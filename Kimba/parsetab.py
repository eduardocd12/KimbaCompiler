
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PROGRAM IF ELSE VAR TRUE FALSE INT FLOAT STRING BOOLEAN VOID AND OR NOT PRINT READ FUNC WHILE MAIN RETURN START RESET END GIRA_IZQ GIRA_DER CAMINA SI_DIBUJA NO_DIBUJA DIBUJA_POLIGONO DIBUJA_CIRCULO DIBUJA_ESTRELLA COLOR_PLUMA ID PLUS MINUS TIMES DIVIDES ASSIGN LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET GREATER_THAN LESS_THAN GREATER_OR_EQUAL_THAN LESS_OR_EQUAL_THAN EQUAL_THAN NOT_EQUAL_THAN COMMA COLON SEMICOLON CONST_INT CONST_FLOAT CONST_STRINGprogram : PROGRAM ID program_point program_point2 SEMICOLON vars functions MAIN program_point3 blockprogram_point : program_point2 : program_point3 : vars : VAR ID vars_aux COLON type vars_point SEMICOLON vars\n            | VAR ID list_declaration COLON type vars_point2 SEMICOLON vars\n            | emptyvars_aux : COMMA ID vars_aux\n                | emptylist_declaration : LBRACKET var_const RBRACKET list_declaration_pointvars_point : vars_point2 : list_declaration_point : expression_log : not expression expression_log_point\n                      | not expression expression_log_point AND expression_log_point2 expression_log\n                      | not expression expression_log_point OR expression_log_point2 expression_logexpression_log_point : expression_log_point2 : not : NOT\n           | emptyexpression : exp expression_point2\n                  | exp GREATER_THAN expression_point exp expression_point2\n                  | exp LESS_THAN expression_point exp expression_point2\n                  | exp GREATER_OR_EQUAL_THAN expression_point exp expression_point2\n                  | exp LESS_OR_EQUAL_THAN expression_point exp expression_point2\n                  | exp EQUAL_THAN expression_point exp expression_point2\n                  | exp NOT_EQUAL_THAN expression_point exp expression_point2expression_point : expression_point2 : exp : term exp_point\n           | term exp_point PLUS exp_point2 exp\n           | term exp_point MINUS exp_point2 exp exp_point : exp_point2 : term : factor term_point\n            | factor term_point TIMES term_point2 term\n            | factor term_point DIVIDES term_point2 termterm_point : term_point2 : factor : LPAREN factor_point expression_log RPAREN factor_point2\n              | var_const factor_point : factor_point2 : var_const : ID var_const_point list_call\n                 | CONST_INT var_const_point2\n                 | CONST_FLOAT var_const_point3\n                 | CONST_STRING var_const_point4\n                 | boolean var_const_point5\n                 | functionvar_const_point : var_const_point2 : var_const_point3 : var_const_point4 : var_const_point5 : boolean : TRUE\n               | FALSEreturn : RETURN expression_log SEMICOLON return_pointreturn_point : functions : FUNC type_func ID LPAREN params RPAREN functions_point block functions_point2 functions\n                 | emptytype_func : type\n                 | VOIDparams : type ID params_aux\n              | emptyparams_aux : COMMA type ID params_aux\n                  | emptyfunctions_point : functions_point2 : type : INT\n            | FLOAT\n            | STRING\n            | BOOLEANblock : LBRACE statements RBRACEstatements : vars statement statements\n                  | vars emptystatement : assignment\n                 | condition\n                 | write\n                 | loop\n                 | method\n                 | predefined_method\n                 | return assignment : ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4\n\t\t\t\t  | ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4assignment_point : assignment_point2 : assignment_point3 : assignment_point4 : list_call : LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET\n            \t | emptylist_point : list_point2 : list_point3 : list_point4 : condition : IF LPAREN expression_log RPAREN condition_point block else condition_point2condition_point : condition_point2 : else : ELSE else_point block\n\t        | emptyelse_point : write : PRINT LPAREN expression_log write_point RPAREN SEMICOLONwrite_point : loop : WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3loop_point : loop_point2 : loop_point3 : method : ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLONmethod_point : method_point2 : method_point3 : method_point4 : method_point5 : function : ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 function_point : function_point2 : function_point3 : function_point4 : function_point5 : args : expression_log args_point args_aux\n\t\t\t| emptyargs_aux : COMMA expression_log args_point args_aux\n                | emptyargs_point : string_var : ID\n                  | CONST_STRINGempty : predefined_method : START LPAREN RPAREN SEMICOLON\n                         | RESET LPAREN RPAREN SEMICOLON\n                         | END LPAREN RPAREN SEMICOLON\n                         | GIRA_IZQ LPAREN exp RPAREN SEMICOLON\n                         | GIRA_DER LPAREN exp RPAREN SEMICOLON\n                         | CAMINA LPAREN exp RPAREN SEMICOLON\n                         | SI_DIBUJA LPAREN RPAREN SEMICOLON\n                         | NO_DIBUJA LPAREN RPAREN SEMICOLON\n                         | DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON\n                         | DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON\n                         | DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON\n                         | COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_point':([3,],[4,]),'program_point2':([4,],[5,]),'vars':([6,42,67,95,96,],[7,55,55,125,126,]),'empty':([6,7,13,31,42,43,48,55,67,92,94,95,96,98,100,102,103,135,161,163,170,191,192,196,198,231,240,241,250,252,],[9,12,25,25,9,58,64,68,9,120,124,9,9,130,64,120,120,120,197,130,120,12,124,120,120,256,120,120,197,120,]),'functions':([7,191,],[10,223,]),'type_func':([11,],[15,]),'type':([11,29,30,43,123,],[16,44,45,57,158,]),'vars_aux':([13,31,],[22,46,]),'list_declaration':([13,],[23,]),'program_point3':([14,],[27,]),'var_const':([26,108,109,110,113,114,115,118,127,178,217,218,219,220,221,222,235,236,237,238,],[32,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'boolean':([26,108,109,110,113,114,115,118,127,178,217,218,219,220,221,222,235,236,237,238,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'function':([26,108,109,110,113,114,115,118,127,178,217,218,219,220,221,222,235,236,237,238,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'block':([27,121,200,233,277,],[41,157,231,257,281,]),'var_const_point':([33,],[48,]),'var_const_point2':([34,],[50,]),'var_const_point3':([35,],[51,]),'var_const_point4':([36,],[52,]),'var_const_point5':([37,],[53,]),'statements':([42,67,],[54,99,]),'params':([43,],[56,]),'vars_point':([44,],[59,]),'vars_point2':([45,],[60,]),'list_declaration_point':([47,],[61,]),'list_call':([48,100,],[62,131,]),'function_point':([49,],[65,]),'statement':([55,],[67,]),'assignment':([55,],[69,]),'condition':([55,],[70,]),'write':([55,],[71,]),'loop':([55,],[72,]),'method':([55,],[73,]),'predefined_method':([55,],[74,]),'return':([55,],[75,]),'list_point':([63,],[97,]),'function_point2':([65,],[98,]),'assignment_point':([76,],[100,]),'loop_point':([79,],[104,]),'expression_log':([92,98,102,103,135,163,170,196,198,240,241,252,],[117,129,133,134,166,129,203,227,228,264,265,274,]),'not':([92,98,102,103,135,163,170,196,198,240,241,252,],[118,118,118,118,118,118,118,118,118,118,118,118,]),'functions_point':([93,],[121,]),'params_aux':([94,192,],[122,224,]),'list_point2':([97,],[127,]),'args':([98,163,],[128,199,]),'method_point':([101,],[132,]),'exp':([108,109,110,113,114,115,118,127,178,217,218,219,220,221,222,235,236,],[140,144,145,148,149,150,156,159,211,242,243,244,245,246,247,259,260,]),'term':([108,109,110,113,114,115,118,127,178,217,218,219,220,221,222,235,236,237,238,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,261,262,]),'factor':([108,109,110,113,114,115,118,127,178,217,218,219,220,221,222,235,236,237,238,],[142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'string_var':([116,],[151,]),'expression':([118,],[155,]),'args_point':([129,227,],[161,250,]),'method_point2':([132,],[163,]),'write_point':([134,],[165,]),'factor_point':([139,],[170,]),'exp_point':([141,],[172,]),'term_point':([142,],[173,]),'return_point':([154,],[182,]),'expression_log_point':([155,],[183,]),'expression_point2':([156,242,243,244,245,246,247,],[184,266,267,268,269,270,271,]),'functions_point2':([157,],[191,]),'list_point3':([159,],[193,]),'function_point3':([160,],[194,]),'args_aux':([161,250,],[195,272,]),'assignment_point2':([162,],[198,]),'condition_point':([164,],[200,]),'expression_point':([185,186,187,188,189,190,],[217,218,219,220,221,222,]),'list_point4':([193,],[225,]),'function_point4':([194,],[226,]),'loop_point2':([202,],[233,]),'exp_point2':([205,206,],[235,236,]),'term_point2':([207,208,],[237,238,]),'expression_log_point2':([215,216,],[240,241,]),'function_point5':([226,],[249,]),'method_point3':([230,],[253,]),'else':([231,],[254,]),'factor_point2':([234,],[258,]),'assignment_point4':([251,284,],[273,285,]),'method_point4':([253,],[275,]),'condition_point2':([254,],[276,]),'else_point':([255,],[277,]),'loop_point3':([257,],[278,]),'method_point5':([275,],[280,]),'assignment_point3':([279,],[282,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID program_point program_point2 SEMICOLON vars functions MAIN program_point3 block','program',10,'p_program','kimba_parser.py',18),
  ('program_point -> <empty>','program_point',0,'p_program_point','kimba_parser.py',22),
  ('program_point2 -> <empty>','program_point2',0,'p_program_point2','kimba_parser.py',29),
  ('program_point3 -> <empty>','program_point3',0,'p_program_point3','kimba_parser.py',37),
  ('vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars','vars',8,'p_vars','kimba_parser.py',53),
  ('vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars','vars',8,'p_vars','kimba_parser.py',54),
  ('vars -> empty','vars',1,'p_vars','kimba_parser.py',55),
  ('vars_aux -> COMMA ID vars_aux','vars_aux',3,'p_vars_aux','kimba_parser.py',58),
  ('vars_aux -> empty','vars_aux',1,'p_vars_aux','kimba_parser.py',59),
  ('list_declaration -> LBRACKET var_const RBRACKET list_declaration_point','list_declaration',4,'p_list_declaration','kimba_parser.py',66),
  ('vars_point -> <empty>','vars_point',0,'p_vars_point','kimba_parser.py',69),
  ('vars_point2 -> <empty>','vars_point2',0,'p_vars_point2','kimba_parser.py',87),
  ('list_declaration_point -> <empty>','list_declaration_point',0,'p_list_declaration_point','kimba_parser.py',102),
  ('expression_log -> not expression expression_log_point','expression_log',3,'p_expression_log','kimba_parser.py',133),
  ('expression_log -> not expression expression_log_point AND expression_log_point2 expression_log','expression_log',6,'p_expression_log','kimba_parser.py',134),
  ('expression_log -> not expression expression_log_point OR expression_log_point2 expression_log','expression_log',6,'p_expression_log','kimba_parser.py',135),
  ('expression_log_point -> <empty>','expression_log_point',0,'p_expression_log_point','kimba_parser.py',138),
  ('expression_log_point2 -> <empty>','expression_log_point2',0,'p_expression_log_point2','kimba_parser.py',144),
  ('not -> NOT','not',1,'p_not','kimba_parser.py',148),
  ('not -> empty','not',1,'p_not','kimba_parser.py',149),
  ('expression -> exp expression_point2','expression',2,'p_expression','kimba_parser.py',152),
  ('expression -> exp GREATER_THAN expression_point exp expression_point2','expression',5,'p_expression','kimba_parser.py',153),
  ('expression -> exp LESS_THAN expression_point exp expression_point2','expression',5,'p_expression','kimba_parser.py',154),
  ('expression -> exp GREATER_OR_EQUAL_THAN expression_point exp expression_point2','expression',5,'p_expression','kimba_parser.py',155),
  ('expression -> exp LESS_OR_EQUAL_THAN expression_point exp expression_point2','expression',5,'p_expression','kimba_parser.py',156),
  ('expression -> exp EQUAL_THAN expression_point exp expression_point2','expression',5,'p_expression','kimba_parser.py',157),
  ('expression -> exp NOT_EQUAL_THAN expression_point exp expression_point2','expression',5,'p_expression','kimba_parser.py',158),
  ('expression_point -> <empty>','expression_point',0,'p_expression_point','kimba_parser.py',161),
  ('expression_point2 -> <empty>','expression_point2',0,'p_expression_point2','kimba_parser.py',165),
  ('exp -> term exp_point','exp',2,'p_exp','kimba_parser.py',171),
  ('exp -> term exp_point PLUS exp_point2 exp','exp',5,'p_exp','kimba_parser.py',172),
  ('exp -> term exp_point MINUS exp_point2 exp','exp',5,'p_exp','kimba_parser.py',173),
  ('exp_point -> <empty>','exp_point',0,'p_exp_point','kimba_parser.py',176),
  ('exp_point2 -> <empty>','exp_point2',0,'p_exp_point2','kimba_parser.py',182),
  ('term -> factor term_point','term',2,'p_term','kimba_parser.py',186),
  ('term -> factor term_point TIMES term_point2 term','term',5,'p_term','kimba_parser.py',187),
  ('term -> factor term_point DIVIDES term_point2 term','term',5,'p_term','kimba_parser.py',188),
  ('term_point -> <empty>','term_point',0,'p_term_point','kimba_parser.py',191),
  ('term_point2 -> <empty>','term_point2',0,'p_term_point2','kimba_parser.py',197),
  ('factor -> LPAREN factor_point expression_log RPAREN factor_point2','factor',5,'p_factor','kimba_parser.py',201),
  ('factor -> var_const','factor',1,'p_factor','kimba_parser.py',202),
  ('factor_point -> <empty>','factor_point',0,'p_factor_point','kimba_parser.py',205),
  ('factor_point2 -> <empty>','factor_point2',0,'p_factor_point2','kimba_parser.py',209),
  ('var_const -> ID var_const_point list_call','var_const',3,'p_var_const','kimba_parser.py',214),
  ('var_const -> CONST_INT var_const_point2','var_const',2,'p_var_const','kimba_parser.py',215),
  ('var_const -> CONST_FLOAT var_const_point3','var_const',2,'p_var_const','kimba_parser.py',216),
  ('var_const -> CONST_STRING var_const_point4','var_const',2,'p_var_const','kimba_parser.py',217),
  ('var_const -> boolean var_const_point5','var_const',2,'p_var_const','kimba_parser.py',218),
  ('var_const -> function','var_const',1,'p_var_const','kimba_parser.py',219),
  ('var_const_point -> <empty>','var_const_point',0,'p_var_const_point','kimba_parser.py',222),
  ('var_const_point2 -> <empty>','var_const_point2',0,'p_var_const_point2','kimba_parser.py',243),
  ('var_const_point3 -> <empty>','var_const_point3',0,'p_var_const_point3','kimba_parser.py',252),
  ('var_const_point4 -> <empty>','var_const_point4',0,'p_var_const_point4','kimba_parser.py',261),
  ('var_const_point5 -> <empty>','var_const_point5',0,'p_var_const_point5','kimba_parser.py',270),
  ('boolean -> TRUE','boolean',1,'p_boolean','kimba_parser.py',287),
  ('boolean -> FALSE','boolean',1,'p_boolean','kimba_parser.py',288),
  ('return -> RETURN expression_log SEMICOLON return_point','return',4,'p_return','kimba_parser.py',294),
  ('return_point -> <empty>','return_point',0,'p_return_point','kimba_parser.py',297),
  ('functions -> FUNC type_func ID LPAREN params RPAREN functions_point block functions_point2 functions','functions',10,'p_functions','kimba_parser.py',327),
  ('functions -> empty','functions',1,'p_functions','kimba_parser.py',328),
  ('type_func -> type','type_func',1,'p_type_func','kimba_parser.py',334),
  ('type_func -> VOID','type_func',1,'p_type_func','kimba_parser.py',335),
  ('params -> type ID params_aux','params',3,'p_params','kimba_parser.py',339),
  ('params -> empty','params',1,'p_params','kimba_parser.py',340),
  ('params_aux -> COMMA type ID params_aux','params_aux',4,'p_params_aux','kimba_parser.py',343),
  ('params_aux -> empty','params_aux',1,'p_params_aux','kimba_parser.py',344),
  ('functions_point -> <empty>','functions_point',0,'p_functions_point','kimba_parser.py',347),
  ('functions_point2 -> <empty>','functions_point2',0,'p_functions_point2','kimba_parser.py',350),
  ('type -> INT','type',1,'p_type','kimba_parser.py',353),
  ('type -> FLOAT','type',1,'p_type','kimba_parser.py',354),
  ('type -> STRING','type',1,'p_type','kimba_parser.py',355),
  ('type -> BOOLEAN','type',1,'p_type','kimba_parser.py',356),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','kimba_parser.py',363),
  ('statements -> vars statement statements','statements',3,'p_statements','kimba_parser.py',368),
  ('statements -> vars empty','statements',2,'p_statements','kimba_parser.py',369),
  ('statement -> assignment','statement',1,'p_statement','kimba_parser.py',372),
  ('statement -> condition','statement',1,'p_statement','kimba_parser.py',373),
  ('statement -> write','statement',1,'p_statement','kimba_parser.py',374),
  ('statement -> loop','statement',1,'p_statement','kimba_parser.py',375),
  ('statement -> method','statement',1,'p_statement','kimba_parser.py',376),
  ('statement -> predefined_method','statement',1,'p_statement','kimba_parser.py',377),
  ('statement -> return','statement',1,'p_statement','kimba_parser.py',378),
  ('assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4','assignment',8,'p_assignment','kimba_parser.py',383),
  ('assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4','assignment',12,'p_assignment','kimba_parser.py',384),
  ('assignment_point -> <empty>','assignment_point',0,'p_assignment_point','kimba_parser.py',390),
  ('assignment_point2 -> <empty>','assignment_point2',0,'p_assignment_point2','kimba_parser.py',393),
  ('assignment_point3 -> <empty>','assignment_point3',0,'p_assignment_point3','kimba_parser.py',396),
  ('assignment_point4 -> <empty>','assignment_point4',0,'p_assignment_point4','kimba_parser.py',399),
  ('list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET','list_call',7,'p_list_call','kimba_parser.py',406),
  ('list_call -> empty','list_call',1,'p_list_call','kimba_parser.py',407),
  ('list_point -> <empty>','list_point',0,'p_list_point','kimba_parser.py',410),
  ('list_point2 -> <empty>','list_point2',0,'p_list_point2','kimba_parser.py',439),
  ('list_point3 -> <empty>','list_point3',0,'p_list_point3','kimba_parser.py',443),
  ('list_point4 -> <empty>','list_point4',0,'p_list_point4','kimba_parser.py',473),
  ('condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2','condition',8,'p_condition','kimba_parser.py',479),
  ('condition_point -> <empty>','condition_point',0,'p_condition_point','kimba_parser.py',482),
  ('condition_point2 -> <empty>','condition_point2',0,'p_condition_point2','kimba_parser.py',486),
  ('else -> ELSE else_point block','else',3,'p_else','kimba_parser.py',489),
  ('else -> empty','else',1,'p_else','kimba_parser.py',490),
  ('else_point -> <empty>','else_point',0,'p_else_point','kimba_parser.py',494),
  ('write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON','write',6,'p_write','kimba_parser.py',499),
  ('write_point -> <empty>','write_point',0,'p_write_point','kimba_parser.py',505),
  ('loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3','loop',8,'p_loop','kimba_parser.py',510),
  ('loop_point -> <empty>','loop_point',0,'p_loop_point','kimba_parser.py',516),
  ('loop_point2 -> <empty>','loop_point2',0,'p_loop_point2','kimba_parser.py',519),
  ('loop_point3 -> <empty>','loop_point3',0,'p_loop_point3','kimba_parser.py',522),
  ('method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON','method',10,'p_method','kimba_parser.py',527),
  ('method_point -> <empty>','method_point',0,'p_method_point','kimba_parser.py',533),
  ('method_point2 -> <empty>','method_point2',0,'p_method_point2','kimba_parser.py',536),
  ('method_point3 -> <empty>','method_point3',0,'p_method_point3','kimba_parser.py',539),
  ('method_point4 -> <empty>','method_point4',0,'p_method_point4','kimba_parser.py',542),
  ('method_point5 -> <empty>','method_point5',0,'p_method_point5','kimba_parser.py',545),
  ('function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5','function',9,'p_function','kimba_parser.py',550),
  ('function_point -> <empty>','function_point',0,'p_function_point','kimba_parser.py',556),
  ('function_point2 -> <empty>','function_point2',0,'p_function_point2','kimba_parser.py',559),
  ('function_point3 -> <empty>','function_point3',0,'p_function_point3','kimba_parser.py',562),
  ('function_point4 -> <empty>','function_point4',0,'p_function_point4','kimba_parser.py',565),
  ('function_point5 -> <empty>','function_point5',0,'p_function_point5','kimba_parser.py',568),
  ('args -> expression_log args_point args_aux','args',3,'p_args','kimba_parser.py',574),
  ('args -> empty','args',1,'p_args','kimba_parser.py',575),
  ('args_aux -> COMMA expression_log args_point args_aux','args_aux',4,'p_args_aux','kimba_parser.py',581),
  ('args_aux -> empty','args_aux',1,'p_args_aux','kimba_parser.py',582),
  ('args_point -> <empty>','args_point',0,'p_args_point','kimba_parser.py',588),
  ('string_var -> ID','string_var',1,'p_string_var','kimba_parser.py',593),
  ('string_var -> CONST_STRING','string_var',1,'p_string_var','kimba_parser.py',594),
  ('empty -> <empty>','empty',0,'p_empty','kimba_parser.py',599),
  ('predefined_method -> START LPAREN RPAREN SEMICOLON','predefined_method',4,'p_predefined_function_call','kimba_parser.py',604),
  ('predefined_method -> RESET LPAREN RPAREN SEMICOLON','predefined_method',4,'p_predefined_function_call','kimba_parser.py',605),
  ('predefined_method -> END LPAREN RPAREN SEMICOLON','predefined_method',4,'p_predefined_function_call','kimba_parser.py',606),
  ('predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',607),
  ('predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',608),
  ('predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',609),
  ('predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON','predefined_method',4,'p_predefined_function_call','kimba_parser.py',610),
  ('predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON','predefined_method',4,'p_predefined_function_call','kimba_parser.py',611),
  ('predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON','predefined_method',7,'p_predefined_function_call','kimba_parser.py',612),
  ('predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',613),
  ('predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',614),
  ('predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',615),
]
