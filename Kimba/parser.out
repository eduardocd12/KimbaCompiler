Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID program_point program_point2 SEMICOLON vars functions MAIN program_point3 block
Rule 2     program_point -> <empty>
Rule 3     program_point2 -> <empty>
Rule 4     program_point3 -> <empty>
Rule 5     vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars
Rule 6     vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars
Rule 7     vars -> empty
Rule 8     vars_aux -> COMMA ID vars_aux
Rule 9     vars_aux -> empty
Rule 10    list_declaration -> LBRACKET var_const RBRACKET list_declaration_point
Rule 11    vars_point -> <empty>
Rule 12    vars_point2 -> <empty>
Rule 13    list_declaration_point -> <empty>
Rule 14    expression_log -> not expression expression_log_point
Rule 15    expression_log -> not expression expression_log_point AND expression_log_point2 expression_log
Rule 16    expression_log -> not expression expression_log_point OR expression_log_point2 expression_log
Rule 17    expression_log_point -> <empty>
Rule 18    expression_log_point2 -> <empty>
Rule 19    not -> NOT
Rule 20    not -> empty
Rule 21    expression -> exp expression_point2
Rule 22    expression -> exp GREATER_THAN expression_point exp expression_point2
Rule 23    expression -> exp LESS_THAN expression_point exp expression_point2
Rule 24    expression -> exp GREATER_OR_EQUAL_THAN expression_point exp expression_point2
Rule 25    expression -> exp LESS_OR_EQUAL_THAN expression_point exp expression_point2
Rule 26    expression -> exp EQUAL_THAN expression_point exp expression_point2
Rule 27    expression -> exp NOT_EQUAL_THAN expression_point exp expression_point2
Rule 28    expression_point -> <empty>
Rule 29    expression_point2 -> <empty>
Rule 30    exp -> term exp_point
Rule 31    exp -> term exp_point PLUS exp_point2 exp
Rule 32    exp -> term exp_point MINUS exp_point2 exp
Rule 33    exp_point -> <empty>
Rule 34    exp_point2 -> <empty>
Rule 35    term -> factor term_point
Rule 36    term -> factor term_point TIMES term_point2 term
Rule 37    term -> factor term_point DIVIDES term_point2 term
Rule 38    term_point -> <empty>
Rule 39    term_point2 -> <empty>
Rule 40    factor -> LPAREN factor_point expression_log RPAREN factor_point2
Rule 41    factor -> var_const
Rule 42    factor_point -> <empty>
Rule 43    factor_point2 -> <empty>
Rule 44    var_const -> ID var_const_point list_call
Rule 45    var_const -> CONST_INT var_const_point2
Rule 46    var_const -> CONST_FLOAT var_const_point3
Rule 47    var_const -> CONST_STRING var_const_point4
Rule 48    var_const -> boolean var_const_point5
Rule 49    var_const -> function
Rule 50    var_const_point -> <empty>
Rule 51    var_const_point2 -> <empty>
Rule 52    var_const_point3 -> <empty>
Rule 53    var_const_point4 -> <empty>
Rule 54    var_const_point5 -> <empty>
Rule 55    boolean -> TRUE
Rule 56    boolean -> FALSE
Rule 57    return -> RETURN expression_log SEMICOLON return_point
Rule 58    return_point -> <empty>
Rule 59    functions -> FUNC type_func ID LPAREN params RPAREN functions_point block functions_point2 functions
Rule 60    functions -> empty
Rule 61    type_func -> type
Rule 62    type_func -> VOID
Rule 63    params -> type ID params_aux
Rule 64    params -> empty
Rule 65    params_aux -> COMMA type ID params_aux
Rule 66    params_aux -> empty
Rule 67    functions_point -> <empty>
Rule 68    functions_point2 -> <empty>
Rule 69    type -> INT
Rule 70    type -> FLOAT
Rule 71    type -> STRING
Rule 72    type -> BOOLEAN
Rule 73    block -> LBRACE statements RBRACE
Rule 74    statements -> vars statement statements
Rule 75    statements -> vars empty
Rule 76    statement -> assignment
Rule 77    statement -> condition
Rule 78    statement -> write
Rule 79    statement -> loop
Rule 80    statement -> method
Rule 81    statement -> predefined_method
Rule 82    statement -> return
Rule 83    assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4
Rule 84    assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4
Rule 85    assignment_point -> <empty>
Rule 86    assignment_point2 -> <empty>
Rule 87    assignment_point3 -> <empty>
Rule 88    assignment_point4 -> <empty>
Rule 89    list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET
Rule 90    list_call -> empty
Rule 91    list_point -> <empty>
Rule 92    list_point2 -> <empty>
Rule 93    list_point3 -> <empty>
Rule 94    list_point4 -> <empty>
Rule 95    condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2
Rule 96    condition_point -> <empty>
Rule 97    condition_point2 -> <empty>
Rule 98    else -> ELSE else_point block
Rule 99    else -> empty
Rule 100   else_point -> <empty>
Rule 101   write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON
Rule 102   write_point -> <empty>
Rule 103   loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3
Rule 104   loop_point -> <empty>
Rule 105   loop_point2 -> <empty>
Rule 106   loop_point3 -> <empty>
Rule 107   method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON
Rule 108   method_point -> <empty>
Rule 109   method_point2 -> <empty>
Rule 110   method_point3 -> <empty>
Rule 111   method_point4 -> <empty>
Rule 112   method_point5 -> <empty>
Rule 113   function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5
Rule 114   function_point -> <empty>
Rule 115   function_point2 -> <empty>
Rule 116   function_point3 -> <empty>
Rule 117   function_point4 -> <empty>
Rule 118   function_point5 -> <empty>
Rule 119   args -> expression_log args_point args_aux
Rule 120   args -> empty
Rule 121   args_aux -> COMMA expression_log args_point args_aux
Rule 122   args_aux -> empty
Rule 123   args_point -> <empty>
Rule 124   string_var -> ID
Rule 125   string_var -> CONST_STRING
Rule 126   empty -> <empty>
Rule 127   predefined_method -> START LPAREN RPAREN SEMICOLON
Rule 128   predefined_method -> RESET LPAREN RPAREN SEMICOLON
Rule 129   predefined_method -> END LPAREN RPAREN SEMICOLON
Rule 130   predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON
Rule 131   predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON
Rule 132   predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON
Rule 133   predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON
Rule 134   predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON
Rule 135   predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON
Rule 136   predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON
Rule 137   predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON
Rule 138   predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON

Terminals, with rules where they appear

AND                  : 15
ASSIGN               : 83 84
BOOLEAN              : 72
CAMINA               : 132
COLON                : 5 6
COLOR_PLUMA          : 138
COMMA                : 8 65 121 135
CONST_FLOAT          : 46
CONST_INT            : 45
CONST_STRING         : 47 125
DIBUJA_CIRCULO       : 136
DIBUJA_ESTRELLA      : 137
DIBUJA_POLIGONO      : 135
DIVIDES              : 37
ELSE                 : 98
END                  : 129
EQUAL_THAN           : 26
FALSE                : 56
FLOAT                : 70
FUNC                 : 59
GIRA_DER             : 131
GIRA_IZQ             : 130
GREATER_OR_EQUAL_THAN : 24
GREATER_THAN         : 22
ID                   : 1 5 6 8 44 59 63 65 83 84 107 113 124
IF                   : 95
INT                  : 69
LBRACE               : 73
LBRACKET             : 10 89
LESS_OR_EQUAL_THAN   : 25
LESS_THAN            : 23
LPAREN               : 40 59 84 95 101 103 107 113 127 128 129 130 131 132 133 134 135 136 137 138
MAIN                 : 1
MINUS                : 32
NOT                  : 19
NOT_EQUAL_THAN       : 27
NO_DIBUJA            : 134
OR                   : 16
PLUS                 : 31
PRINT                : 101
PROGRAM              : 1
RBRACE               : 73
RBRACKET             : 10 89
READ                 : 84
RESET                : 128
RETURN               : 57
RPAREN               : 40 59 84 95 101 103 107 113 127 128 129 130 131 132 133 134 135 136 137 138
SEMICOLON            : 1 5 6 57 83 84 101 107 127 128 129 130 131 132 133 134 135 136 137 138
SI_DIBUJA            : 133
START                : 127
STRING               : 71
TIMES                : 36
TRUE                 : 55
VAR                  : 5 6
VOID                 : 62
WHILE                : 103
error                : 

Nonterminals, with rules where they appear

args                 : 107 113
args_aux             : 119 121
args_point           : 119 121
assignment           : 76
assignment_point     : 83 84
assignment_point2    : 83 84
assignment_point3    : 84
assignment_point4    : 83 84
block                : 1 59 95 98 103
boolean              : 48
condition            : 77
condition_point      : 95
condition_point2     : 95
else                 : 95
else_point           : 98
empty                : 7 9 20 60 64 66 75 90 99 120 122
exp                  : 21 22 22 23 23 24 24 25 25 26 26 27 27 31 32 89 130 131 132 135 135 136 137
exp_point            : 30 31 32
exp_point2           : 31 32
expression           : 14 15 16
expression_log       : 15 16 40 57 83 84 95 101 103 119 121
expression_log_point : 14 15 16
expression_log_point2 : 15 16
expression_point     : 22 23 24 25 26 27
expression_point2    : 21 22 23 24 25 26 27
factor               : 35 36 37
factor_point         : 40
factor_point2        : 40
function             : 49
function_point       : 113
function_point2      : 113
function_point3      : 113
function_point4      : 113
function_point5      : 113
functions            : 1 59
functions_point      : 59
functions_point2     : 59
list_call            : 44 83 84
list_declaration     : 6
list_declaration_point : 10
list_point           : 89
list_point2          : 89
list_point3          : 89
list_point4          : 89
loop                 : 79
loop_point           : 103
loop_point2          : 103
loop_point3          : 103
method               : 80
method_point         : 107
method_point2        : 107
method_point3        : 107
method_point4        : 107
method_point5        : 107
not                  : 14 15 16
params               : 59
params_aux           : 63 65
predefined_method    : 81
program              : 0
program_point        : 1
program_point2       : 1
program_point3       : 1
return               : 82
return_point         : 57
statement            : 74
statements           : 73 74
string_var           : 138
term                 : 30 31 32 36 37
term_point           : 35 36 37
term_point2          : 36 37
type                 : 5 6 61 63 65
type_func            : 59
var_const            : 10 41
var_const_point      : 44
var_const_point2     : 45
var_const_point3     : 46
var_const_point4     : 47
var_const_point5     : 48
vars                 : 1 5 6 74 75
vars_aux             : 5 8
vars_point           : 5
vars_point2          : 6
write                : 78
write_point          : 101

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID program_point program_point2 SEMICOLON vars functions MAIN program_point3 block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID program_point program_point2 SEMICOLON vars functions MAIN program_point3 block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . program_point program_point2 SEMICOLON vars functions MAIN program_point3 block
    (2) program_point -> .

    SEMICOLON       reduce using rule 2 (program_point -> .)

    program_point                  shift and go to state 4

state 4

    (1) program -> PROGRAM ID program_point . program_point2 SEMICOLON vars functions MAIN program_point3 block
    (3) program_point2 -> .

    SEMICOLON       reduce using rule 3 (program_point2 -> .)

    program_point2                 shift and go to state 5

state 5

    (1) program -> PROGRAM ID program_point program_point2 . SEMICOLON vars functions MAIN program_point3 block

    SEMICOLON       shift and go to state 6


state 6

    (1) program -> PROGRAM ID program_point program_point2 SEMICOLON . vars functions MAIN program_point3 block
    (5) vars -> . VAR ID vars_aux COLON type vars_point SEMICOLON vars
    (6) vars -> . VAR ID list_declaration COLON type vars_point2 SEMICOLON vars
    (7) vars -> . empty
    (126) empty -> .

    VAR             shift and go to state 8
    FUNC            reduce using rule 126 (empty -> .)
    MAIN            reduce using rule 126 (empty -> .)

    vars                           shift and go to state 7
    empty                          shift and go to state 9

state 7

    (1) program -> PROGRAM ID program_point program_point2 SEMICOLON vars . functions MAIN program_point3 block
    (59) functions -> . FUNC type_func ID LPAREN params RPAREN functions_point block functions_point2 functions
    (60) functions -> . empty
    (126) empty -> .

    FUNC            shift and go to state 11
    MAIN            reduce using rule 126 (empty -> .)

    functions                      shift and go to state 10
    empty                          shift and go to state 12

state 8

    (5) vars -> VAR . ID vars_aux COLON type vars_point SEMICOLON vars
    (6) vars -> VAR . ID list_declaration COLON type vars_point2 SEMICOLON vars

    ID              shift and go to state 13


state 9

    (7) vars -> empty .

    FUNC            reduce using rule 7 (vars -> empty .)
    MAIN            reduce using rule 7 (vars -> empty .)
    ID              reduce using rule 7 (vars -> empty .)
    IF              reduce using rule 7 (vars -> empty .)
    PRINT           reduce using rule 7 (vars -> empty .)
    WHILE           reduce using rule 7 (vars -> empty .)
    START           reduce using rule 7 (vars -> empty .)
    RESET           reduce using rule 7 (vars -> empty .)
    END             reduce using rule 7 (vars -> empty .)
    GIRA_IZQ        reduce using rule 7 (vars -> empty .)
    GIRA_DER        reduce using rule 7 (vars -> empty .)
    CAMINA          reduce using rule 7 (vars -> empty .)
    SI_DIBUJA       reduce using rule 7 (vars -> empty .)
    NO_DIBUJA       reduce using rule 7 (vars -> empty .)
    DIBUJA_POLIGONO reduce using rule 7 (vars -> empty .)
    DIBUJA_CIRCULO  reduce using rule 7 (vars -> empty .)
    DIBUJA_ESTRELLA reduce using rule 7 (vars -> empty .)
    COLOR_PLUMA     reduce using rule 7 (vars -> empty .)
    RETURN          reduce using rule 7 (vars -> empty .)
    RBRACE          reduce using rule 7 (vars -> empty .)


state 10

    (1) program -> PROGRAM ID program_point program_point2 SEMICOLON vars functions . MAIN program_point3 block

    MAIN            shift and go to state 14


state 11

    (59) functions -> FUNC . type_func ID LPAREN params RPAREN functions_point block functions_point2 functions
    (61) type_func -> . type
    (62) type_func -> . VOID
    (69) type -> . INT
    (70) type -> . FLOAT
    (71) type -> . STRING
    (72) type -> . BOOLEAN

    VOID            shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20
    BOOLEAN         shift and go to state 21

    type_func                      shift and go to state 15
    type                           shift and go to state 16

state 12

    (60) functions -> empty .

    MAIN            reduce using rule 60 (functions -> empty .)


state 13

    (5) vars -> VAR ID . vars_aux COLON type vars_point SEMICOLON vars
    (6) vars -> VAR ID . list_declaration COLON type vars_point2 SEMICOLON vars
    (8) vars_aux -> . COMMA ID vars_aux
    (9) vars_aux -> . empty
    (10) list_declaration -> . LBRACKET var_const RBRACKET list_declaration_point
    (126) empty -> .

    COMMA           shift and go to state 24
    LBRACKET        shift and go to state 26
    COLON           reduce using rule 126 (empty -> .)

    vars_aux                       shift and go to state 22
    list_declaration               shift and go to state 23
    empty                          shift and go to state 25

state 14

    (1) program -> PROGRAM ID program_point program_point2 SEMICOLON vars functions MAIN . program_point3 block
    (4) program_point3 -> .

    LBRACE          reduce using rule 4 (program_point3 -> .)

    program_point3                 shift and go to state 27

state 15

    (59) functions -> FUNC type_func . ID LPAREN params RPAREN functions_point block functions_point2 functions

    ID              shift and go to state 28


state 16

    (61) type_func -> type .

    ID              reduce using rule 61 (type_func -> type .)


state 17

    (62) type_func -> VOID .

    ID              reduce using rule 62 (type_func -> VOID .)


state 18

    (69) type -> INT .

    ID              reduce using rule 69 (type -> INT .)
    SEMICOLON       reduce using rule 69 (type -> INT .)


state 19

    (70) type -> FLOAT .

    ID              reduce using rule 70 (type -> FLOAT .)
    SEMICOLON       reduce using rule 70 (type -> FLOAT .)


state 20

    (71) type -> STRING .

    ID              reduce using rule 71 (type -> STRING .)
    SEMICOLON       reduce using rule 71 (type -> STRING .)


state 21

    (72) type -> BOOLEAN .

    ID              reduce using rule 72 (type -> BOOLEAN .)
    SEMICOLON       reduce using rule 72 (type -> BOOLEAN .)


state 22

    (5) vars -> VAR ID vars_aux . COLON type vars_point SEMICOLON vars

    COLON           shift and go to state 29


state 23

    (6) vars -> VAR ID list_declaration . COLON type vars_point2 SEMICOLON vars

    COLON           shift and go to state 30


state 24

    (8) vars_aux -> COMMA . ID vars_aux

    ID              shift and go to state 31


state 25

    (9) vars_aux -> empty .

    COLON           reduce using rule 9 (vars_aux -> empty .)


state 26

    (10) list_declaration -> LBRACKET . var_const RBRACKET list_declaration_point
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    var_const                      shift and go to state 32
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 27

    (1) program -> PROGRAM ID program_point program_point2 SEMICOLON vars functions MAIN program_point3 . block
    (73) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 41

state 28

    (59) functions -> FUNC type_func ID . LPAREN params RPAREN functions_point block functions_point2 functions

    LPAREN          shift and go to state 43


state 29

    (5) vars -> VAR ID vars_aux COLON . type vars_point SEMICOLON vars
    (69) type -> . INT
    (70) type -> . FLOAT
    (71) type -> . STRING
    (72) type -> . BOOLEAN

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 44

state 30

    (6) vars -> VAR ID list_declaration COLON . type vars_point2 SEMICOLON vars
    (69) type -> . INT
    (70) type -> . FLOAT
    (71) type -> . STRING
    (72) type -> . BOOLEAN

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 45

state 31

    (8) vars_aux -> COMMA ID . vars_aux
    (8) vars_aux -> . COMMA ID vars_aux
    (9) vars_aux -> . empty
    (126) empty -> .

    COMMA           shift and go to state 24
    COLON           reduce using rule 126 (empty -> .)

    vars_aux                       shift and go to state 46
    empty                          shift and go to state 25

state 32

    (10) list_declaration -> LBRACKET var_const . RBRACKET list_declaration_point

    RBRACKET        shift and go to state 47


state 33

    (44) var_const -> ID . var_const_point list_call
    (113) function -> ID . LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5
    (50) var_const_point -> .

    LPAREN          shift and go to state 49
    LBRACKET        reduce using rule 50 (var_const_point -> .)
    RBRACKET        reduce using rule 50 (var_const_point -> .)
    TIMES           reduce using rule 50 (var_const_point -> .)
    DIVIDES         reduce using rule 50 (var_const_point -> .)
    PLUS            reduce using rule 50 (var_const_point -> .)
    MINUS           reduce using rule 50 (var_const_point -> .)
    RPAREN          reduce using rule 50 (var_const_point -> .)
    COMMA           reduce using rule 50 (var_const_point -> .)
    GREATER_THAN    reduce using rule 50 (var_const_point -> .)
    LESS_THAN       reduce using rule 50 (var_const_point -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 50 (var_const_point -> .)
    LESS_OR_EQUAL_THAN reduce using rule 50 (var_const_point -> .)
    EQUAL_THAN      reduce using rule 50 (var_const_point -> .)
    NOT_EQUAL_THAN  reduce using rule 50 (var_const_point -> .)
    AND             reduce using rule 50 (var_const_point -> .)
    OR              reduce using rule 50 (var_const_point -> .)
    SEMICOLON       reduce using rule 50 (var_const_point -> .)

    var_const_point                shift and go to state 48

state 34

    (45) var_const -> CONST_INT . var_const_point2
    (51) var_const_point2 -> .

    RBRACKET        reduce using rule 51 (var_const_point2 -> .)
    TIMES           reduce using rule 51 (var_const_point2 -> .)
    DIVIDES         reduce using rule 51 (var_const_point2 -> .)
    PLUS            reduce using rule 51 (var_const_point2 -> .)
    MINUS           reduce using rule 51 (var_const_point2 -> .)
    RPAREN          reduce using rule 51 (var_const_point2 -> .)
    COMMA           reduce using rule 51 (var_const_point2 -> .)
    GREATER_THAN    reduce using rule 51 (var_const_point2 -> .)
    LESS_THAN       reduce using rule 51 (var_const_point2 -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 51 (var_const_point2 -> .)
    LESS_OR_EQUAL_THAN reduce using rule 51 (var_const_point2 -> .)
    EQUAL_THAN      reduce using rule 51 (var_const_point2 -> .)
    NOT_EQUAL_THAN  reduce using rule 51 (var_const_point2 -> .)
    AND             reduce using rule 51 (var_const_point2 -> .)
    OR              reduce using rule 51 (var_const_point2 -> .)
    SEMICOLON       reduce using rule 51 (var_const_point2 -> .)

    var_const_point2               shift and go to state 50

state 35

    (46) var_const -> CONST_FLOAT . var_const_point3
    (52) var_const_point3 -> .

    RBRACKET        reduce using rule 52 (var_const_point3 -> .)
    TIMES           reduce using rule 52 (var_const_point3 -> .)
    DIVIDES         reduce using rule 52 (var_const_point3 -> .)
    PLUS            reduce using rule 52 (var_const_point3 -> .)
    MINUS           reduce using rule 52 (var_const_point3 -> .)
    RPAREN          reduce using rule 52 (var_const_point3 -> .)
    COMMA           reduce using rule 52 (var_const_point3 -> .)
    GREATER_THAN    reduce using rule 52 (var_const_point3 -> .)
    LESS_THAN       reduce using rule 52 (var_const_point3 -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 52 (var_const_point3 -> .)
    LESS_OR_EQUAL_THAN reduce using rule 52 (var_const_point3 -> .)
    EQUAL_THAN      reduce using rule 52 (var_const_point3 -> .)
    NOT_EQUAL_THAN  reduce using rule 52 (var_const_point3 -> .)
    AND             reduce using rule 52 (var_const_point3 -> .)
    OR              reduce using rule 52 (var_const_point3 -> .)
    SEMICOLON       reduce using rule 52 (var_const_point3 -> .)

    var_const_point3               shift and go to state 51

state 36

    (47) var_const -> CONST_STRING . var_const_point4
    (53) var_const_point4 -> .

    RBRACKET        reduce using rule 53 (var_const_point4 -> .)
    TIMES           reduce using rule 53 (var_const_point4 -> .)
    DIVIDES         reduce using rule 53 (var_const_point4 -> .)
    PLUS            reduce using rule 53 (var_const_point4 -> .)
    MINUS           reduce using rule 53 (var_const_point4 -> .)
    RPAREN          reduce using rule 53 (var_const_point4 -> .)
    COMMA           reduce using rule 53 (var_const_point4 -> .)
    GREATER_THAN    reduce using rule 53 (var_const_point4 -> .)
    LESS_THAN       reduce using rule 53 (var_const_point4 -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 53 (var_const_point4 -> .)
    LESS_OR_EQUAL_THAN reduce using rule 53 (var_const_point4 -> .)
    EQUAL_THAN      reduce using rule 53 (var_const_point4 -> .)
    NOT_EQUAL_THAN  reduce using rule 53 (var_const_point4 -> .)
    AND             reduce using rule 53 (var_const_point4 -> .)
    OR              reduce using rule 53 (var_const_point4 -> .)
    SEMICOLON       reduce using rule 53 (var_const_point4 -> .)

    var_const_point4               shift and go to state 52

state 37

    (48) var_const -> boolean . var_const_point5
    (54) var_const_point5 -> .

    RBRACKET        reduce using rule 54 (var_const_point5 -> .)
    TIMES           reduce using rule 54 (var_const_point5 -> .)
    DIVIDES         reduce using rule 54 (var_const_point5 -> .)
    PLUS            reduce using rule 54 (var_const_point5 -> .)
    MINUS           reduce using rule 54 (var_const_point5 -> .)
    RPAREN          reduce using rule 54 (var_const_point5 -> .)
    COMMA           reduce using rule 54 (var_const_point5 -> .)
    GREATER_THAN    reduce using rule 54 (var_const_point5 -> .)
    LESS_THAN       reduce using rule 54 (var_const_point5 -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 54 (var_const_point5 -> .)
    LESS_OR_EQUAL_THAN reduce using rule 54 (var_const_point5 -> .)
    EQUAL_THAN      reduce using rule 54 (var_const_point5 -> .)
    NOT_EQUAL_THAN  reduce using rule 54 (var_const_point5 -> .)
    AND             reduce using rule 54 (var_const_point5 -> .)
    OR              reduce using rule 54 (var_const_point5 -> .)
    SEMICOLON       reduce using rule 54 (var_const_point5 -> .)

    var_const_point5               shift and go to state 53

state 38

    (49) var_const -> function .

    RBRACKET        reduce using rule 49 (var_const -> function .)
    TIMES           reduce using rule 49 (var_const -> function .)
    DIVIDES         reduce using rule 49 (var_const -> function .)
    PLUS            reduce using rule 49 (var_const -> function .)
    MINUS           reduce using rule 49 (var_const -> function .)
    RPAREN          reduce using rule 49 (var_const -> function .)
    COMMA           reduce using rule 49 (var_const -> function .)
    GREATER_THAN    reduce using rule 49 (var_const -> function .)
    LESS_THAN       reduce using rule 49 (var_const -> function .)
    GREATER_OR_EQUAL_THAN reduce using rule 49 (var_const -> function .)
    LESS_OR_EQUAL_THAN reduce using rule 49 (var_const -> function .)
    EQUAL_THAN      reduce using rule 49 (var_const -> function .)
    NOT_EQUAL_THAN  reduce using rule 49 (var_const -> function .)
    AND             reduce using rule 49 (var_const -> function .)
    OR              reduce using rule 49 (var_const -> function .)
    SEMICOLON       reduce using rule 49 (var_const -> function .)


state 39

    (55) boolean -> TRUE .

    RBRACKET        reduce using rule 55 (boolean -> TRUE .)
    TIMES           reduce using rule 55 (boolean -> TRUE .)
    DIVIDES         reduce using rule 55 (boolean -> TRUE .)
    PLUS            reduce using rule 55 (boolean -> TRUE .)
    MINUS           reduce using rule 55 (boolean -> TRUE .)
    RPAREN          reduce using rule 55 (boolean -> TRUE .)
    COMMA           reduce using rule 55 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 55 (boolean -> TRUE .)
    LESS_THAN       reduce using rule 55 (boolean -> TRUE .)
    GREATER_OR_EQUAL_THAN reduce using rule 55 (boolean -> TRUE .)
    LESS_OR_EQUAL_THAN reduce using rule 55 (boolean -> TRUE .)
    EQUAL_THAN      reduce using rule 55 (boolean -> TRUE .)
    NOT_EQUAL_THAN  reduce using rule 55 (boolean -> TRUE .)
    AND             reduce using rule 55 (boolean -> TRUE .)
    OR              reduce using rule 55 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 55 (boolean -> TRUE .)


state 40

    (56) boolean -> FALSE .

    RBRACKET        reduce using rule 56 (boolean -> FALSE .)
    TIMES           reduce using rule 56 (boolean -> FALSE .)
    DIVIDES         reduce using rule 56 (boolean -> FALSE .)
    PLUS            reduce using rule 56 (boolean -> FALSE .)
    MINUS           reduce using rule 56 (boolean -> FALSE .)
    RPAREN          reduce using rule 56 (boolean -> FALSE .)
    COMMA           reduce using rule 56 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 56 (boolean -> FALSE .)
    LESS_THAN       reduce using rule 56 (boolean -> FALSE .)
    GREATER_OR_EQUAL_THAN reduce using rule 56 (boolean -> FALSE .)
    LESS_OR_EQUAL_THAN reduce using rule 56 (boolean -> FALSE .)
    EQUAL_THAN      reduce using rule 56 (boolean -> FALSE .)
    NOT_EQUAL_THAN  reduce using rule 56 (boolean -> FALSE .)
    AND             reduce using rule 56 (boolean -> FALSE .)
    OR              reduce using rule 56 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 56 (boolean -> FALSE .)


state 41

    (1) program -> PROGRAM ID program_point program_point2 SEMICOLON vars functions MAIN program_point3 block .

    $end            reduce using rule 1 (program -> PROGRAM ID program_point program_point2 SEMICOLON vars functions MAIN program_point3 block .)


state 42

    (73) block -> LBRACE . statements RBRACE
    (74) statements -> . vars statement statements
    (75) statements -> . vars empty
    (5) vars -> . VAR ID vars_aux COLON type vars_point SEMICOLON vars
    (6) vars -> . VAR ID list_declaration COLON type vars_point2 SEMICOLON vars
    (7) vars -> . empty
    (126) empty -> .

    VAR             shift and go to state 8
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    START           reduce using rule 126 (empty -> .)
    RESET           reduce using rule 126 (empty -> .)
    END             reduce using rule 126 (empty -> .)
    GIRA_IZQ        reduce using rule 126 (empty -> .)
    GIRA_DER        reduce using rule 126 (empty -> .)
    CAMINA          reduce using rule 126 (empty -> .)
    SI_DIBUJA       reduce using rule 126 (empty -> .)
    NO_DIBUJA       reduce using rule 126 (empty -> .)
    DIBUJA_POLIGONO reduce using rule 126 (empty -> .)
    DIBUJA_CIRCULO  reduce using rule 126 (empty -> .)
    DIBUJA_ESTRELLA reduce using rule 126 (empty -> .)
    COLOR_PLUMA     reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    RBRACE          reduce using rule 126 (empty -> .)

    statements                     shift and go to state 54
    vars                           shift and go to state 55
    empty                          shift and go to state 9

state 43

    (59) functions -> FUNC type_func ID LPAREN . params RPAREN functions_point block functions_point2 functions
    (63) params -> . type ID params_aux
    (64) params -> . empty
    (69) type -> . INT
    (70) type -> . FLOAT
    (71) type -> . STRING
    (72) type -> . BOOLEAN
    (126) empty -> .

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20
    BOOLEAN         shift and go to state 21
    RPAREN          reduce using rule 126 (empty -> .)

    params                         shift and go to state 56
    type                           shift and go to state 57
    empty                          shift and go to state 58

state 44

    (5) vars -> VAR ID vars_aux COLON type . vars_point SEMICOLON vars
    (11) vars_point -> .

    SEMICOLON       reduce using rule 11 (vars_point -> .)

    vars_point                     shift and go to state 59

state 45

    (6) vars -> VAR ID list_declaration COLON type . vars_point2 SEMICOLON vars
    (12) vars_point2 -> .

    SEMICOLON       reduce using rule 12 (vars_point2 -> .)

    vars_point2                    shift and go to state 60

state 46

    (8) vars_aux -> COMMA ID vars_aux .

    COLON           reduce using rule 8 (vars_aux -> COMMA ID vars_aux .)


state 47

    (10) list_declaration -> LBRACKET var_const RBRACKET . list_declaration_point
    (13) list_declaration_point -> .

    COLON           reduce using rule 13 (list_declaration_point -> .)

    list_declaration_point         shift and go to state 61

state 48

    (44) var_const -> ID var_const_point . list_call
    (89) list_call -> . LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET
    (90) list_call -> . empty
    (126) empty -> .

    LBRACKET        shift and go to state 63
    RBRACKET        reduce using rule 126 (empty -> .)
    TIMES           reduce using rule 126 (empty -> .)
    DIVIDES         reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    GREATER_THAN    reduce using rule 126 (empty -> .)
    LESS_THAN       reduce using rule 126 (empty -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 126 (empty -> .)
    LESS_OR_EQUAL_THAN reduce using rule 126 (empty -> .)
    EQUAL_THAN      reduce using rule 126 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)

    list_call                      shift and go to state 62
    empty                          shift and go to state 64

state 49

    (113) function -> ID LPAREN . function_point function_point2 args RPAREN function_point3 function_point4 function_point5
    (114) function_point -> .

    NOT             reduce using rule 114 (function_point -> .)
    RPAREN          reduce using rule 114 (function_point -> .)
    LPAREN          reduce using rule 114 (function_point -> .)
    ID              reduce using rule 114 (function_point -> .)
    CONST_INT       reduce using rule 114 (function_point -> .)
    CONST_FLOAT     reduce using rule 114 (function_point -> .)
    CONST_STRING    reduce using rule 114 (function_point -> .)
    TRUE            reduce using rule 114 (function_point -> .)
    FALSE           reduce using rule 114 (function_point -> .)

    function_point                 shift and go to state 65

state 50

    (45) var_const -> CONST_INT var_const_point2 .

    RBRACKET        reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    TIMES           reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    DIVIDES         reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    PLUS            reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    MINUS           reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    RPAREN          reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    COMMA           reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    GREATER_THAN    reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    LESS_THAN       reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    GREATER_OR_EQUAL_THAN reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    LESS_OR_EQUAL_THAN reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    EQUAL_THAN      reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    NOT_EQUAL_THAN  reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    AND             reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    OR              reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)
    SEMICOLON       reduce using rule 45 (var_const -> CONST_INT var_const_point2 .)


state 51

    (46) var_const -> CONST_FLOAT var_const_point3 .

    RBRACKET        reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    TIMES           reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    DIVIDES         reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    PLUS            reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    MINUS           reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    RPAREN          reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    COMMA           reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    GREATER_THAN    reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    LESS_THAN       reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    GREATER_OR_EQUAL_THAN reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    LESS_OR_EQUAL_THAN reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    EQUAL_THAN      reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    NOT_EQUAL_THAN  reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    AND             reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    OR              reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)
    SEMICOLON       reduce using rule 46 (var_const -> CONST_FLOAT var_const_point3 .)


state 52

    (47) var_const -> CONST_STRING var_const_point4 .

    RBRACKET        reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    TIMES           reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    DIVIDES         reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    PLUS            reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    MINUS           reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    RPAREN          reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    COMMA           reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    GREATER_THAN    reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    LESS_THAN       reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    GREATER_OR_EQUAL_THAN reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    LESS_OR_EQUAL_THAN reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    EQUAL_THAN      reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    NOT_EQUAL_THAN  reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    AND             reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    OR              reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)
    SEMICOLON       reduce using rule 47 (var_const -> CONST_STRING var_const_point4 .)


state 53

    (48) var_const -> boolean var_const_point5 .

    RBRACKET        reduce using rule 48 (var_const -> boolean var_const_point5 .)
    TIMES           reduce using rule 48 (var_const -> boolean var_const_point5 .)
    DIVIDES         reduce using rule 48 (var_const -> boolean var_const_point5 .)
    PLUS            reduce using rule 48 (var_const -> boolean var_const_point5 .)
    MINUS           reduce using rule 48 (var_const -> boolean var_const_point5 .)
    RPAREN          reduce using rule 48 (var_const -> boolean var_const_point5 .)
    COMMA           reduce using rule 48 (var_const -> boolean var_const_point5 .)
    GREATER_THAN    reduce using rule 48 (var_const -> boolean var_const_point5 .)
    LESS_THAN       reduce using rule 48 (var_const -> boolean var_const_point5 .)
    GREATER_OR_EQUAL_THAN reduce using rule 48 (var_const -> boolean var_const_point5 .)
    LESS_OR_EQUAL_THAN reduce using rule 48 (var_const -> boolean var_const_point5 .)
    EQUAL_THAN      reduce using rule 48 (var_const -> boolean var_const_point5 .)
    NOT_EQUAL_THAN  reduce using rule 48 (var_const -> boolean var_const_point5 .)
    AND             reduce using rule 48 (var_const -> boolean var_const_point5 .)
    OR              reduce using rule 48 (var_const -> boolean var_const_point5 .)
    SEMICOLON       reduce using rule 48 (var_const -> boolean var_const_point5 .)


state 54

    (73) block -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 66


state 55

    (74) statements -> vars . statement statements
    (75) statements -> vars . empty
    (76) statement -> . assignment
    (77) statement -> . condition
    (78) statement -> . write
    (79) statement -> . loop
    (80) statement -> . method
    (81) statement -> . predefined_method
    (82) statement -> . return
    (126) empty -> .
    (83) assignment -> . ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4
    (84) assignment -> . ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4
    (95) condition -> . IF LPAREN expression_log RPAREN condition_point block else condition_point2
    (101) write -> . PRINT LPAREN expression_log write_point RPAREN SEMICOLON
    (103) loop -> . WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3
    (107) method -> . ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON
    (127) predefined_method -> . START LPAREN RPAREN SEMICOLON
    (128) predefined_method -> . RESET LPAREN RPAREN SEMICOLON
    (129) predefined_method -> . END LPAREN RPAREN SEMICOLON
    (130) predefined_method -> . GIRA_IZQ LPAREN exp RPAREN SEMICOLON
    (131) predefined_method -> . GIRA_DER LPAREN exp RPAREN SEMICOLON
    (132) predefined_method -> . CAMINA LPAREN exp RPAREN SEMICOLON
    (133) predefined_method -> . SI_DIBUJA LPAREN RPAREN SEMICOLON
    (134) predefined_method -> . NO_DIBUJA LPAREN RPAREN SEMICOLON
    (135) predefined_method -> . DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON
    (136) predefined_method -> . DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON
    (137) predefined_method -> . DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON
    (138) predefined_method -> . COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON
    (57) return -> . RETURN expression_log SEMICOLON return_point

    RBRACE          reduce using rule 126 (empty -> .)
    ID              shift and go to state 76
    IF              shift and go to state 77
    PRINT           shift and go to state 78
    WHILE           shift and go to state 79
    START           shift and go to state 80
    RESET           shift and go to state 81
    END             shift and go to state 82
    GIRA_IZQ        shift and go to state 83
    GIRA_DER        shift and go to state 84
    CAMINA          shift and go to state 85
    SI_DIBUJA       shift and go to state 86
    NO_DIBUJA       shift and go to state 87
    DIBUJA_POLIGONO shift and go to state 88
    DIBUJA_CIRCULO  shift and go to state 89
    DIBUJA_ESTRELLA shift and go to state 90
    COLOR_PLUMA     shift and go to state 91
    RETURN          shift and go to state 92

    statement                      shift and go to state 67
    empty                          shift and go to state 68
    assignment                     shift and go to state 69
    condition                      shift and go to state 70
    write                          shift and go to state 71
    loop                           shift and go to state 72
    method                         shift and go to state 73
    predefined_method              shift and go to state 74
    return                         shift and go to state 75

state 56

    (59) functions -> FUNC type_func ID LPAREN params . RPAREN functions_point block functions_point2 functions

    RPAREN          shift and go to state 93


state 57

    (63) params -> type . ID params_aux

    ID              shift and go to state 94


state 58

    (64) params -> empty .

    RPAREN          reduce using rule 64 (params -> empty .)


state 59

    (5) vars -> VAR ID vars_aux COLON type vars_point . SEMICOLON vars

    SEMICOLON       shift and go to state 95


state 60

    (6) vars -> VAR ID list_declaration COLON type vars_point2 . SEMICOLON vars

    SEMICOLON       shift and go to state 96


state 61

    (10) list_declaration -> LBRACKET var_const RBRACKET list_declaration_point .

    COLON           reduce using rule 10 (list_declaration -> LBRACKET var_const RBRACKET list_declaration_point .)


state 62

    (44) var_const -> ID var_const_point list_call .

    RBRACKET        reduce using rule 44 (var_const -> ID var_const_point list_call .)
    TIMES           reduce using rule 44 (var_const -> ID var_const_point list_call .)
    DIVIDES         reduce using rule 44 (var_const -> ID var_const_point list_call .)
    PLUS            reduce using rule 44 (var_const -> ID var_const_point list_call .)
    MINUS           reduce using rule 44 (var_const -> ID var_const_point list_call .)
    RPAREN          reduce using rule 44 (var_const -> ID var_const_point list_call .)
    COMMA           reduce using rule 44 (var_const -> ID var_const_point list_call .)
    GREATER_THAN    reduce using rule 44 (var_const -> ID var_const_point list_call .)
    LESS_THAN       reduce using rule 44 (var_const -> ID var_const_point list_call .)
    GREATER_OR_EQUAL_THAN reduce using rule 44 (var_const -> ID var_const_point list_call .)
    LESS_OR_EQUAL_THAN reduce using rule 44 (var_const -> ID var_const_point list_call .)
    EQUAL_THAN      reduce using rule 44 (var_const -> ID var_const_point list_call .)
    NOT_EQUAL_THAN  reduce using rule 44 (var_const -> ID var_const_point list_call .)
    AND             reduce using rule 44 (var_const -> ID var_const_point list_call .)
    OR              reduce using rule 44 (var_const -> ID var_const_point list_call .)
    SEMICOLON       reduce using rule 44 (var_const -> ID var_const_point list_call .)


state 63

    (89) list_call -> LBRACKET . list_point list_point2 exp list_point3 list_point4 RBRACKET
    (91) list_point -> .

    LPAREN          reduce using rule 91 (list_point -> .)
    ID              reduce using rule 91 (list_point -> .)
    CONST_INT       reduce using rule 91 (list_point -> .)
    CONST_FLOAT     reduce using rule 91 (list_point -> .)
    CONST_STRING    reduce using rule 91 (list_point -> .)
    TRUE            reduce using rule 91 (list_point -> .)
    FALSE           reduce using rule 91 (list_point -> .)

    list_point                     shift and go to state 97

state 64

    (90) list_call -> empty .

    RBRACKET        reduce using rule 90 (list_call -> empty .)
    TIMES           reduce using rule 90 (list_call -> empty .)
    DIVIDES         reduce using rule 90 (list_call -> empty .)
    PLUS            reduce using rule 90 (list_call -> empty .)
    MINUS           reduce using rule 90 (list_call -> empty .)
    RPAREN          reduce using rule 90 (list_call -> empty .)
    COMMA           reduce using rule 90 (list_call -> empty .)
    GREATER_THAN    reduce using rule 90 (list_call -> empty .)
    LESS_THAN       reduce using rule 90 (list_call -> empty .)
    GREATER_OR_EQUAL_THAN reduce using rule 90 (list_call -> empty .)
    LESS_OR_EQUAL_THAN reduce using rule 90 (list_call -> empty .)
    EQUAL_THAN      reduce using rule 90 (list_call -> empty .)
    NOT_EQUAL_THAN  reduce using rule 90 (list_call -> empty .)
    AND             reduce using rule 90 (list_call -> empty .)
    OR              reduce using rule 90 (list_call -> empty .)
    SEMICOLON       reduce using rule 90 (list_call -> empty .)
    ASSIGN          reduce using rule 90 (list_call -> empty .)


state 65

    (113) function -> ID LPAREN function_point . function_point2 args RPAREN function_point3 function_point4 function_point5
    (115) function_point2 -> .

    NOT             reduce using rule 115 (function_point2 -> .)
    RPAREN          reduce using rule 115 (function_point2 -> .)
    LPAREN          reduce using rule 115 (function_point2 -> .)
    ID              reduce using rule 115 (function_point2 -> .)
    CONST_INT       reduce using rule 115 (function_point2 -> .)
    CONST_FLOAT     reduce using rule 115 (function_point2 -> .)
    CONST_STRING    reduce using rule 115 (function_point2 -> .)
    TRUE            reduce using rule 115 (function_point2 -> .)
    FALSE           reduce using rule 115 (function_point2 -> .)

    function_point2                shift and go to state 98

state 66

    (73) block -> LBRACE statements RBRACE .

    $end            reduce using rule 73 (block -> LBRACE statements RBRACE .)
    FUNC            reduce using rule 73 (block -> LBRACE statements RBRACE .)
    MAIN            reduce using rule 73 (block -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 73 (block -> LBRACE statements RBRACE .)
    VAR             reduce using rule 73 (block -> LBRACE statements RBRACE .)
    ID              reduce using rule 73 (block -> LBRACE statements RBRACE .)
    IF              reduce using rule 73 (block -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 73 (block -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 73 (block -> LBRACE statements RBRACE .)
    START           reduce using rule 73 (block -> LBRACE statements RBRACE .)
    RESET           reduce using rule 73 (block -> LBRACE statements RBRACE .)
    END             reduce using rule 73 (block -> LBRACE statements RBRACE .)
    GIRA_IZQ        reduce using rule 73 (block -> LBRACE statements RBRACE .)
    GIRA_DER        reduce using rule 73 (block -> LBRACE statements RBRACE .)
    CAMINA          reduce using rule 73 (block -> LBRACE statements RBRACE .)
    SI_DIBUJA       reduce using rule 73 (block -> LBRACE statements RBRACE .)
    NO_DIBUJA       reduce using rule 73 (block -> LBRACE statements RBRACE .)
    DIBUJA_POLIGONO reduce using rule 73 (block -> LBRACE statements RBRACE .)
    DIBUJA_CIRCULO  reduce using rule 73 (block -> LBRACE statements RBRACE .)
    DIBUJA_ESTRELLA reduce using rule 73 (block -> LBRACE statements RBRACE .)
    COLOR_PLUMA     reduce using rule 73 (block -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 73 (block -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 73 (block -> LBRACE statements RBRACE .)


state 67

    (74) statements -> vars statement . statements
    (74) statements -> . vars statement statements
    (75) statements -> . vars empty
    (5) vars -> . VAR ID vars_aux COLON type vars_point SEMICOLON vars
    (6) vars -> . VAR ID list_declaration COLON type vars_point2 SEMICOLON vars
    (7) vars -> . empty
    (126) empty -> .

    VAR             shift and go to state 8
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    START           reduce using rule 126 (empty -> .)
    RESET           reduce using rule 126 (empty -> .)
    END             reduce using rule 126 (empty -> .)
    GIRA_IZQ        reduce using rule 126 (empty -> .)
    GIRA_DER        reduce using rule 126 (empty -> .)
    CAMINA          reduce using rule 126 (empty -> .)
    SI_DIBUJA       reduce using rule 126 (empty -> .)
    NO_DIBUJA       reduce using rule 126 (empty -> .)
    DIBUJA_POLIGONO reduce using rule 126 (empty -> .)
    DIBUJA_CIRCULO  reduce using rule 126 (empty -> .)
    DIBUJA_ESTRELLA reduce using rule 126 (empty -> .)
    COLOR_PLUMA     reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    RBRACE          reduce using rule 126 (empty -> .)

    vars                           shift and go to state 55
    statements                     shift and go to state 99
    empty                          shift and go to state 9

state 68

    (75) statements -> vars empty .

    RBRACE          reduce using rule 75 (statements -> vars empty .)


state 69

    (76) statement -> assignment .

    VAR             reduce using rule 76 (statement -> assignment .)
    ID              reduce using rule 76 (statement -> assignment .)
    IF              reduce using rule 76 (statement -> assignment .)
    PRINT           reduce using rule 76 (statement -> assignment .)
    WHILE           reduce using rule 76 (statement -> assignment .)
    START           reduce using rule 76 (statement -> assignment .)
    RESET           reduce using rule 76 (statement -> assignment .)
    END             reduce using rule 76 (statement -> assignment .)
    GIRA_IZQ        reduce using rule 76 (statement -> assignment .)
    GIRA_DER        reduce using rule 76 (statement -> assignment .)
    CAMINA          reduce using rule 76 (statement -> assignment .)
    SI_DIBUJA       reduce using rule 76 (statement -> assignment .)
    NO_DIBUJA       reduce using rule 76 (statement -> assignment .)
    DIBUJA_POLIGONO reduce using rule 76 (statement -> assignment .)
    DIBUJA_CIRCULO  reduce using rule 76 (statement -> assignment .)
    DIBUJA_ESTRELLA reduce using rule 76 (statement -> assignment .)
    COLOR_PLUMA     reduce using rule 76 (statement -> assignment .)
    RETURN          reduce using rule 76 (statement -> assignment .)
    RBRACE          reduce using rule 76 (statement -> assignment .)


state 70

    (77) statement -> condition .

    VAR             reduce using rule 77 (statement -> condition .)
    ID              reduce using rule 77 (statement -> condition .)
    IF              reduce using rule 77 (statement -> condition .)
    PRINT           reduce using rule 77 (statement -> condition .)
    WHILE           reduce using rule 77 (statement -> condition .)
    START           reduce using rule 77 (statement -> condition .)
    RESET           reduce using rule 77 (statement -> condition .)
    END             reduce using rule 77 (statement -> condition .)
    GIRA_IZQ        reduce using rule 77 (statement -> condition .)
    GIRA_DER        reduce using rule 77 (statement -> condition .)
    CAMINA          reduce using rule 77 (statement -> condition .)
    SI_DIBUJA       reduce using rule 77 (statement -> condition .)
    NO_DIBUJA       reduce using rule 77 (statement -> condition .)
    DIBUJA_POLIGONO reduce using rule 77 (statement -> condition .)
    DIBUJA_CIRCULO  reduce using rule 77 (statement -> condition .)
    DIBUJA_ESTRELLA reduce using rule 77 (statement -> condition .)
    COLOR_PLUMA     reduce using rule 77 (statement -> condition .)
    RETURN          reduce using rule 77 (statement -> condition .)
    RBRACE          reduce using rule 77 (statement -> condition .)


state 71

    (78) statement -> write .

    VAR             reduce using rule 78 (statement -> write .)
    ID              reduce using rule 78 (statement -> write .)
    IF              reduce using rule 78 (statement -> write .)
    PRINT           reduce using rule 78 (statement -> write .)
    WHILE           reduce using rule 78 (statement -> write .)
    START           reduce using rule 78 (statement -> write .)
    RESET           reduce using rule 78 (statement -> write .)
    END             reduce using rule 78 (statement -> write .)
    GIRA_IZQ        reduce using rule 78 (statement -> write .)
    GIRA_DER        reduce using rule 78 (statement -> write .)
    CAMINA          reduce using rule 78 (statement -> write .)
    SI_DIBUJA       reduce using rule 78 (statement -> write .)
    NO_DIBUJA       reduce using rule 78 (statement -> write .)
    DIBUJA_POLIGONO reduce using rule 78 (statement -> write .)
    DIBUJA_CIRCULO  reduce using rule 78 (statement -> write .)
    DIBUJA_ESTRELLA reduce using rule 78 (statement -> write .)
    COLOR_PLUMA     reduce using rule 78 (statement -> write .)
    RETURN          reduce using rule 78 (statement -> write .)
    RBRACE          reduce using rule 78 (statement -> write .)


state 72

    (79) statement -> loop .

    VAR             reduce using rule 79 (statement -> loop .)
    ID              reduce using rule 79 (statement -> loop .)
    IF              reduce using rule 79 (statement -> loop .)
    PRINT           reduce using rule 79 (statement -> loop .)
    WHILE           reduce using rule 79 (statement -> loop .)
    START           reduce using rule 79 (statement -> loop .)
    RESET           reduce using rule 79 (statement -> loop .)
    END             reduce using rule 79 (statement -> loop .)
    GIRA_IZQ        reduce using rule 79 (statement -> loop .)
    GIRA_DER        reduce using rule 79 (statement -> loop .)
    CAMINA          reduce using rule 79 (statement -> loop .)
    SI_DIBUJA       reduce using rule 79 (statement -> loop .)
    NO_DIBUJA       reduce using rule 79 (statement -> loop .)
    DIBUJA_POLIGONO reduce using rule 79 (statement -> loop .)
    DIBUJA_CIRCULO  reduce using rule 79 (statement -> loop .)
    DIBUJA_ESTRELLA reduce using rule 79 (statement -> loop .)
    COLOR_PLUMA     reduce using rule 79 (statement -> loop .)
    RETURN          reduce using rule 79 (statement -> loop .)
    RBRACE          reduce using rule 79 (statement -> loop .)


state 73

    (80) statement -> method .

    VAR             reduce using rule 80 (statement -> method .)
    ID              reduce using rule 80 (statement -> method .)
    IF              reduce using rule 80 (statement -> method .)
    PRINT           reduce using rule 80 (statement -> method .)
    WHILE           reduce using rule 80 (statement -> method .)
    START           reduce using rule 80 (statement -> method .)
    RESET           reduce using rule 80 (statement -> method .)
    END             reduce using rule 80 (statement -> method .)
    GIRA_IZQ        reduce using rule 80 (statement -> method .)
    GIRA_DER        reduce using rule 80 (statement -> method .)
    CAMINA          reduce using rule 80 (statement -> method .)
    SI_DIBUJA       reduce using rule 80 (statement -> method .)
    NO_DIBUJA       reduce using rule 80 (statement -> method .)
    DIBUJA_POLIGONO reduce using rule 80 (statement -> method .)
    DIBUJA_CIRCULO  reduce using rule 80 (statement -> method .)
    DIBUJA_ESTRELLA reduce using rule 80 (statement -> method .)
    COLOR_PLUMA     reduce using rule 80 (statement -> method .)
    RETURN          reduce using rule 80 (statement -> method .)
    RBRACE          reduce using rule 80 (statement -> method .)


state 74

    (81) statement -> predefined_method .

    VAR             reduce using rule 81 (statement -> predefined_method .)
    ID              reduce using rule 81 (statement -> predefined_method .)
    IF              reduce using rule 81 (statement -> predefined_method .)
    PRINT           reduce using rule 81 (statement -> predefined_method .)
    WHILE           reduce using rule 81 (statement -> predefined_method .)
    START           reduce using rule 81 (statement -> predefined_method .)
    RESET           reduce using rule 81 (statement -> predefined_method .)
    END             reduce using rule 81 (statement -> predefined_method .)
    GIRA_IZQ        reduce using rule 81 (statement -> predefined_method .)
    GIRA_DER        reduce using rule 81 (statement -> predefined_method .)
    CAMINA          reduce using rule 81 (statement -> predefined_method .)
    SI_DIBUJA       reduce using rule 81 (statement -> predefined_method .)
    NO_DIBUJA       reduce using rule 81 (statement -> predefined_method .)
    DIBUJA_POLIGONO reduce using rule 81 (statement -> predefined_method .)
    DIBUJA_CIRCULO  reduce using rule 81 (statement -> predefined_method .)
    DIBUJA_ESTRELLA reduce using rule 81 (statement -> predefined_method .)
    COLOR_PLUMA     reduce using rule 81 (statement -> predefined_method .)
    RETURN          reduce using rule 81 (statement -> predefined_method .)
    RBRACE          reduce using rule 81 (statement -> predefined_method .)


state 75

    (82) statement -> return .

    VAR             reduce using rule 82 (statement -> return .)
    ID              reduce using rule 82 (statement -> return .)
    IF              reduce using rule 82 (statement -> return .)
    PRINT           reduce using rule 82 (statement -> return .)
    WHILE           reduce using rule 82 (statement -> return .)
    START           reduce using rule 82 (statement -> return .)
    RESET           reduce using rule 82 (statement -> return .)
    END             reduce using rule 82 (statement -> return .)
    GIRA_IZQ        reduce using rule 82 (statement -> return .)
    GIRA_DER        reduce using rule 82 (statement -> return .)
    CAMINA          reduce using rule 82 (statement -> return .)
    SI_DIBUJA       reduce using rule 82 (statement -> return .)
    NO_DIBUJA       reduce using rule 82 (statement -> return .)
    DIBUJA_POLIGONO reduce using rule 82 (statement -> return .)
    DIBUJA_CIRCULO  reduce using rule 82 (statement -> return .)
    DIBUJA_ESTRELLA reduce using rule 82 (statement -> return .)
    COLOR_PLUMA     reduce using rule 82 (statement -> return .)
    RETURN          reduce using rule 82 (statement -> return .)
    RBRACE          reduce using rule 82 (statement -> return .)


state 76

    (83) assignment -> ID . assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4
    (84) assignment -> ID . assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4
    (107) method -> ID . LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON
    (85) assignment_point -> .

    LPAREN          shift and go to state 101
    LBRACKET        reduce using rule 85 (assignment_point -> .)
    ASSIGN          reduce using rule 85 (assignment_point -> .)

    assignment_point               shift and go to state 100

state 77

    (95) condition -> IF . LPAREN expression_log RPAREN condition_point block else condition_point2

    LPAREN          shift and go to state 102


state 78

    (101) write -> PRINT . LPAREN expression_log write_point RPAREN SEMICOLON

    LPAREN          shift and go to state 103


state 79

    (103) loop -> WHILE . loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3
    (104) loop_point -> .

    LPAREN          reduce using rule 104 (loop_point -> .)

    loop_point                     shift and go to state 104

state 80

    (127) predefined_method -> START . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 105


state 81

    (128) predefined_method -> RESET . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 106


state 82

    (129) predefined_method -> END . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 107


state 83

    (130) predefined_method -> GIRA_IZQ . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 108


state 84

    (131) predefined_method -> GIRA_DER . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 109


state 85

    (132) predefined_method -> CAMINA . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 110


state 86

    (133) predefined_method -> SI_DIBUJA . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 111


state 87

    (134) predefined_method -> NO_DIBUJA . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 112


state 88

    (135) predefined_method -> DIBUJA_POLIGONO . LPAREN exp COMMA exp RPAREN SEMICOLON

    LPAREN          shift and go to state 113


state 89

    (136) predefined_method -> DIBUJA_CIRCULO . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 114


state 90

    (137) predefined_method -> DIBUJA_ESTRELLA . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 115


state 91

    (138) predefined_method -> COLOR_PLUMA . LPAREN string_var RPAREN SEMICOLON

    LPAREN          shift and go to state 116


state 92

    (57) return -> RETURN . expression_log SEMICOLON return_point
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (19) not -> . NOT
    (20) not -> . empty
    (126) empty -> .

    NOT             shift and go to state 119
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)

    expression_log                 shift and go to state 117
    not                            shift and go to state 118
    empty                          shift and go to state 120

state 93

    (59) functions -> FUNC type_func ID LPAREN params RPAREN . functions_point block functions_point2 functions
    (67) functions_point -> .

    LBRACE          reduce using rule 67 (functions_point -> .)

    functions_point                shift and go to state 121

state 94

    (63) params -> type ID . params_aux
    (65) params_aux -> . COMMA type ID params_aux
    (66) params_aux -> . empty
    (126) empty -> .

    COMMA           shift and go to state 123
    RPAREN          reduce using rule 126 (empty -> .)

    params_aux                     shift and go to state 122
    empty                          shift and go to state 124

state 95

    (5) vars -> VAR ID vars_aux COLON type vars_point SEMICOLON . vars
    (5) vars -> . VAR ID vars_aux COLON type vars_point SEMICOLON vars
    (6) vars -> . VAR ID list_declaration COLON type vars_point2 SEMICOLON vars
    (7) vars -> . empty
    (126) empty -> .

    VAR             shift and go to state 8
    FUNC            reduce using rule 126 (empty -> .)
    MAIN            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    START           reduce using rule 126 (empty -> .)
    RESET           reduce using rule 126 (empty -> .)
    END             reduce using rule 126 (empty -> .)
    GIRA_IZQ        reduce using rule 126 (empty -> .)
    GIRA_DER        reduce using rule 126 (empty -> .)
    CAMINA          reduce using rule 126 (empty -> .)
    SI_DIBUJA       reduce using rule 126 (empty -> .)
    NO_DIBUJA       reduce using rule 126 (empty -> .)
    DIBUJA_POLIGONO reduce using rule 126 (empty -> .)
    DIBUJA_CIRCULO  reduce using rule 126 (empty -> .)
    DIBUJA_ESTRELLA reduce using rule 126 (empty -> .)
    COLOR_PLUMA     reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    RBRACE          reduce using rule 126 (empty -> .)

    vars                           shift and go to state 125
    empty                          shift and go to state 9

state 96

    (6) vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON . vars
    (5) vars -> . VAR ID vars_aux COLON type vars_point SEMICOLON vars
    (6) vars -> . VAR ID list_declaration COLON type vars_point2 SEMICOLON vars
    (7) vars -> . empty
    (126) empty -> .

    VAR             shift and go to state 8
    FUNC            reduce using rule 126 (empty -> .)
    MAIN            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    START           reduce using rule 126 (empty -> .)
    RESET           reduce using rule 126 (empty -> .)
    END             reduce using rule 126 (empty -> .)
    GIRA_IZQ        reduce using rule 126 (empty -> .)
    GIRA_DER        reduce using rule 126 (empty -> .)
    CAMINA          reduce using rule 126 (empty -> .)
    SI_DIBUJA       reduce using rule 126 (empty -> .)
    NO_DIBUJA       reduce using rule 126 (empty -> .)
    DIBUJA_POLIGONO reduce using rule 126 (empty -> .)
    DIBUJA_CIRCULO  reduce using rule 126 (empty -> .)
    DIBUJA_ESTRELLA reduce using rule 126 (empty -> .)
    COLOR_PLUMA     reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    RBRACE          reduce using rule 126 (empty -> .)

    vars                           shift and go to state 126
    empty                          shift and go to state 9

state 97

    (89) list_call -> LBRACKET list_point . list_point2 exp list_point3 list_point4 RBRACKET
    (92) list_point2 -> .

    LPAREN          reduce using rule 92 (list_point2 -> .)
    ID              reduce using rule 92 (list_point2 -> .)
    CONST_INT       reduce using rule 92 (list_point2 -> .)
    CONST_FLOAT     reduce using rule 92 (list_point2 -> .)
    CONST_STRING    reduce using rule 92 (list_point2 -> .)
    TRUE            reduce using rule 92 (list_point2 -> .)
    FALSE           reduce using rule 92 (list_point2 -> .)

    list_point2                    shift and go to state 127

state 98

    (113) function -> ID LPAREN function_point function_point2 . args RPAREN function_point3 function_point4 function_point5
    (119) args -> . expression_log args_point args_aux
    (120) args -> . empty
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (126) empty -> .
    (19) not -> . NOT
    (20) not -> . empty

    RPAREN          reduce using rule 126 (empty -> .)
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)
    NOT             shift and go to state 119

    args                           shift and go to state 128
    expression_log                 shift and go to state 129
    empty                          shift and go to state 130
    not                            shift and go to state 118

state 99

    (74) statements -> vars statement statements .

    RBRACE          reduce using rule 74 (statements -> vars statement statements .)


state 100

    (83) assignment -> ID assignment_point . list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4
    (84) assignment -> ID assignment_point . list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4
    (89) list_call -> . LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET
    (90) list_call -> . empty
    (126) empty -> .

    LBRACKET        shift and go to state 63
    ASSIGN          reduce using rule 126 (empty -> .)

    list_call                      shift and go to state 131
    empty                          shift and go to state 64

state 101

    (107) method -> ID LPAREN . method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON
    (108) method_point -> .

    NOT             reduce using rule 108 (method_point -> .)
    RPAREN          reduce using rule 108 (method_point -> .)
    LPAREN          reduce using rule 108 (method_point -> .)
    ID              reduce using rule 108 (method_point -> .)
    CONST_INT       reduce using rule 108 (method_point -> .)
    CONST_FLOAT     reduce using rule 108 (method_point -> .)
    CONST_STRING    reduce using rule 108 (method_point -> .)
    TRUE            reduce using rule 108 (method_point -> .)
    FALSE           reduce using rule 108 (method_point -> .)

    method_point                   shift and go to state 132

state 102

    (95) condition -> IF LPAREN . expression_log RPAREN condition_point block else condition_point2
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (19) not -> . NOT
    (20) not -> . empty
    (126) empty -> .

    NOT             shift and go to state 119
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)

    expression_log                 shift and go to state 133
    not                            shift and go to state 118
    empty                          shift and go to state 120

state 103

    (101) write -> PRINT LPAREN . expression_log write_point RPAREN SEMICOLON
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (19) not -> . NOT
    (20) not -> . empty
    (126) empty -> .

    NOT             shift and go to state 119
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)

    expression_log                 shift and go to state 134
    not                            shift and go to state 118
    empty                          shift and go to state 120

state 104

    (103) loop -> WHILE loop_point . LPAREN expression_log RPAREN loop_point2 block loop_point3

    LPAREN          shift and go to state 135


state 105

    (127) predefined_method -> START LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 136


state 106

    (128) predefined_method -> RESET LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 137


state 107

    (129) predefined_method -> END LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 138


state 108

    (130) predefined_method -> GIRA_IZQ LPAREN . exp RPAREN SEMICOLON
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 140
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 109

    (131) predefined_method -> GIRA_DER LPAREN . exp RPAREN SEMICOLON
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 144
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 110

    (132) predefined_method -> CAMINA LPAREN . exp RPAREN SEMICOLON
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 145
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 111

    (133) predefined_method -> SI_DIBUJA LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 146


state 112

    (134) predefined_method -> NO_DIBUJA LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 147


state 113

    (135) predefined_method -> DIBUJA_POLIGONO LPAREN . exp COMMA exp RPAREN SEMICOLON
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 148
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 114

    (136) predefined_method -> DIBUJA_CIRCULO LPAREN . exp RPAREN SEMICOLON
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 149
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 115

    (137) predefined_method -> DIBUJA_ESTRELLA LPAREN . exp RPAREN SEMICOLON
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 150
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 116

    (138) predefined_method -> COLOR_PLUMA LPAREN . string_var RPAREN SEMICOLON
    (124) string_var -> . ID
    (125) string_var -> . CONST_STRING

    ID              shift and go to state 152
    CONST_STRING    shift and go to state 153

    string_var                     shift and go to state 151

state 117

    (57) return -> RETURN expression_log . SEMICOLON return_point

    SEMICOLON       shift and go to state 154


state 118

    (14) expression_log -> not . expression expression_log_point
    (15) expression_log -> not . expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> not . expression expression_log_point OR expression_log_point2 expression_log
    (21) expression -> . exp expression_point2
    (22) expression -> . exp GREATER_THAN expression_point exp expression_point2
    (23) expression -> . exp LESS_THAN expression_point exp expression_point2
    (24) expression -> . exp GREATER_OR_EQUAL_THAN expression_point exp expression_point2
    (25) expression -> . exp LESS_OR_EQUAL_THAN expression_point exp expression_point2
    (26) expression -> . exp EQUAL_THAN expression_point exp expression_point2
    (27) expression -> . exp NOT_EQUAL_THAN expression_point exp expression_point2
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    expression                     shift and go to state 155
    exp                            shift and go to state 156
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 119

    (19) not -> NOT .

    LPAREN          reduce using rule 19 (not -> NOT .)
    ID              reduce using rule 19 (not -> NOT .)
    CONST_INT       reduce using rule 19 (not -> NOT .)
    CONST_FLOAT     reduce using rule 19 (not -> NOT .)
    CONST_STRING    reduce using rule 19 (not -> NOT .)
    TRUE            reduce using rule 19 (not -> NOT .)
    FALSE           reduce using rule 19 (not -> NOT .)


state 120

    (20) not -> empty .

    LPAREN          reduce using rule 20 (not -> empty .)
    ID              reduce using rule 20 (not -> empty .)
    CONST_INT       reduce using rule 20 (not -> empty .)
    CONST_FLOAT     reduce using rule 20 (not -> empty .)
    CONST_STRING    reduce using rule 20 (not -> empty .)
    TRUE            reduce using rule 20 (not -> empty .)
    FALSE           reduce using rule 20 (not -> empty .)


state 121

    (59) functions -> FUNC type_func ID LPAREN params RPAREN functions_point . block functions_point2 functions
    (73) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 157

state 122

    (63) params -> type ID params_aux .

    RPAREN          reduce using rule 63 (params -> type ID params_aux .)


state 123

    (65) params_aux -> COMMA . type ID params_aux
    (69) type -> . INT
    (70) type -> . FLOAT
    (71) type -> . STRING
    (72) type -> . BOOLEAN

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    STRING          shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 158

state 124

    (66) params_aux -> empty .

    RPAREN          reduce using rule 66 (params_aux -> empty .)


state 125

    (5) vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .

    FUNC            reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    MAIN            reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    ID              reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    IF              reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    PRINT           reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    WHILE           reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    START           reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    RESET           reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    END             reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    GIRA_IZQ        reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    GIRA_DER        reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    CAMINA          reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    SI_DIBUJA       reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    NO_DIBUJA       reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    DIBUJA_POLIGONO reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    DIBUJA_CIRCULO  reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    DIBUJA_ESTRELLA reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    COLOR_PLUMA     reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    RETURN          reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)
    RBRACE          reduce using rule 5 (vars -> VAR ID vars_aux COLON type vars_point SEMICOLON vars .)


state 126

    (6) vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .

    FUNC            reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    MAIN            reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    ID              reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    IF              reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    PRINT           reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    WHILE           reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    START           reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    RESET           reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    END             reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    GIRA_IZQ        reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    GIRA_DER        reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    CAMINA          reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    SI_DIBUJA       reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    NO_DIBUJA       reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    DIBUJA_POLIGONO reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    DIBUJA_CIRCULO  reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    DIBUJA_ESTRELLA reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    COLOR_PLUMA     reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    RETURN          reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)
    RBRACE          reduce using rule 6 (vars -> VAR ID list_declaration COLON type vars_point2 SEMICOLON vars .)


state 127

    (89) list_call -> LBRACKET list_point list_point2 . exp list_point3 list_point4 RBRACKET
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 159
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 128

    (113) function -> ID LPAREN function_point function_point2 args . RPAREN function_point3 function_point4 function_point5

    RPAREN          shift and go to state 160


state 129

    (119) args -> expression_log . args_point args_aux
    (123) args_point -> .

    COMMA           reduce using rule 123 (args_point -> .)
    RPAREN          reduce using rule 123 (args_point -> .)

    args_point                     shift and go to state 161

state 130

    (120) args -> empty .
    (20) not -> empty .

    RPAREN          reduce using rule 120 (args -> empty .)
    LPAREN          reduce using rule 20 (not -> empty .)
    ID              reduce using rule 20 (not -> empty .)
    CONST_INT       reduce using rule 20 (not -> empty .)
    CONST_FLOAT     reduce using rule 20 (not -> empty .)
    CONST_STRING    reduce using rule 20 (not -> empty .)
    TRUE            reduce using rule 20 (not -> empty .)
    FALSE           reduce using rule 20 (not -> empty .)


state 131

    (83) assignment -> ID assignment_point list_call . ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4
    (84) assignment -> ID assignment_point list_call . ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4

    ASSIGN          shift and go to state 162


state 132

    (107) method -> ID LPAREN method_point . method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON
    (109) method_point2 -> .

    NOT             reduce using rule 109 (method_point2 -> .)
    RPAREN          reduce using rule 109 (method_point2 -> .)
    LPAREN          reduce using rule 109 (method_point2 -> .)
    ID              reduce using rule 109 (method_point2 -> .)
    CONST_INT       reduce using rule 109 (method_point2 -> .)
    CONST_FLOAT     reduce using rule 109 (method_point2 -> .)
    CONST_STRING    reduce using rule 109 (method_point2 -> .)
    TRUE            reduce using rule 109 (method_point2 -> .)
    FALSE           reduce using rule 109 (method_point2 -> .)

    method_point2                  shift and go to state 163

state 133

    (95) condition -> IF LPAREN expression_log . RPAREN condition_point block else condition_point2

    RPAREN          shift and go to state 164


state 134

    (101) write -> PRINT LPAREN expression_log . write_point RPAREN SEMICOLON
    (102) write_point -> .

    RPAREN          reduce using rule 102 (write_point -> .)

    write_point                    shift and go to state 165

state 135

    (103) loop -> WHILE loop_point LPAREN . expression_log RPAREN loop_point2 block loop_point3
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (19) not -> . NOT
    (20) not -> . empty
    (126) empty -> .

    NOT             shift and go to state 119
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)

    expression_log                 shift and go to state 166
    not                            shift and go to state 118
    empty                          shift and go to state 120

state 136

    (127) predefined_method -> START LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 167


state 137

    (128) predefined_method -> RESET LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 168


state 138

    (129) predefined_method -> END LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 169


state 139

    (40) factor -> LPAREN . factor_point expression_log RPAREN factor_point2
    (42) factor_point -> .

    NOT             reduce using rule 42 (factor_point -> .)
    LPAREN          reduce using rule 42 (factor_point -> .)
    ID              reduce using rule 42 (factor_point -> .)
    CONST_INT       reduce using rule 42 (factor_point -> .)
    CONST_FLOAT     reduce using rule 42 (factor_point -> .)
    CONST_STRING    reduce using rule 42 (factor_point -> .)
    TRUE            reduce using rule 42 (factor_point -> .)
    FALSE           reduce using rule 42 (factor_point -> .)

    factor_point                   shift and go to state 170

state 140

    (130) predefined_method -> GIRA_IZQ LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 171


state 141

    (30) exp -> term . exp_point
    (31) exp -> term . exp_point PLUS exp_point2 exp
    (32) exp -> term . exp_point MINUS exp_point2 exp
    (33) exp_point -> .

    PLUS            reduce using rule 33 (exp_point -> .)
    MINUS           reduce using rule 33 (exp_point -> .)
    RPAREN          reduce using rule 33 (exp_point -> .)
    COMMA           reduce using rule 33 (exp_point -> .)
    GREATER_THAN    reduce using rule 33 (exp_point -> .)
    LESS_THAN       reduce using rule 33 (exp_point -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 33 (exp_point -> .)
    LESS_OR_EQUAL_THAN reduce using rule 33 (exp_point -> .)
    EQUAL_THAN      reduce using rule 33 (exp_point -> .)
    NOT_EQUAL_THAN  reduce using rule 33 (exp_point -> .)
    AND             reduce using rule 33 (exp_point -> .)
    OR              reduce using rule 33 (exp_point -> .)
    SEMICOLON       reduce using rule 33 (exp_point -> .)
    RBRACKET        reduce using rule 33 (exp_point -> .)

    exp_point                      shift and go to state 172

state 142

    (35) term -> factor . term_point
    (36) term -> factor . term_point TIMES term_point2 term
    (37) term -> factor . term_point DIVIDES term_point2 term
    (38) term_point -> .

    TIMES           reduce using rule 38 (term_point -> .)
    DIVIDES         reduce using rule 38 (term_point -> .)
    PLUS            reduce using rule 38 (term_point -> .)
    MINUS           reduce using rule 38 (term_point -> .)
    RPAREN          reduce using rule 38 (term_point -> .)
    COMMA           reduce using rule 38 (term_point -> .)
    GREATER_THAN    reduce using rule 38 (term_point -> .)
    LESS_THAN       reduce using rule 38 (term_point -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 38 (term_point -> .)
    LESS_OR_EQUAL_THAN reduce using rule 38 (term_point -> .)
    EQUAL_THAN      reduce using rule 38 (term_point -> .)
    NOT_EQUAL_THAN  reduce using rule 38 (term_point -> .)
    AND             reduce using rule 38 (term_point -> .)
    OR              reduce using rule 38 (term_point -> .)
    SEMICOLON       reduce using rule 38 (term_point -> .)
    RBRACKET        reduce using rule 38 (term_point -> .)

    term_point                     shift and go to state 173

state 143

    (41) factor -> var_const .

    TIMES           reduce using rule 41 (factor -> var_const .)
    DIVIDES         reduce using rule 41 (factor -> var_const .)
    PLUS            reduce using rule 41 (factor -> var_const .)
    MINUS           reduce using rule 41 (factor -> var_const .)
    RPAREN          reduce using rule 41 (factor -> var_const .)
    COMMA           reduce using rule 41 (factor -> var_const .)
    GREATER_THAN    reduce using rule 41 (factor -> var_const .)
    LESS_THAN       reduce using rule 41 (factor -> var_const .)
    GREATER_OR_EQUAL_THAN reduce using rule 41 (factor -> var_const .)
    LESS_OR_EQUAL_THAN reduce using rule 41 (factor -> var_const .)
    EQUAL_THAN      reduce using rule 41 (factor -> var_const .)
    NOT_EQUAL_THAN  reduce using rule 41 (factor -> var_const .)
    AND             reduce using rule 41 (factor -> var_const .)
    OR              reduce using rule 41 (factor -> var_const .)
    SEMICOLON       reduce using rule 41 (factor -> var_const .)
    RBRACKET        reduce using rule 41 (factor -> var_const .)


state 144

    (131) predefined_method -> GIRA_DER LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 174


state 145

    (132) predefined_method -> CAMINA LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 175


state 146

    (133) predefined_method -> SI_DIBUJA LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 176


state 147

    (134) predefined_method -> NO_DIBUJA LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 177


state 148

    (135) predefined_method -> DIBUJA_POLIGONO LPAREN exp . COMMA exp RPAREN SEMICOLON

    COMMA           shift and go to state 178


state 149

    (136) predefined_method -> DIBUJA_CIRCULO LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 179


state 150

    (137) predefined_method -> DIBUJA_ESTRELLA LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 180


state 151

    (138) predefined_method -> COLOR_PLUMA LPAREN string_var . RPAREN SEMICOLON

    RPAREN          shift and go to state 181


state 152

    (124) string_var -> ID .

    RPAREN          reduce using rule 124 (string_var -> ID .)


state 153

    (125) string_var -> CONST_STRING .

    RPAREN          reduce using rule 125 (string_var -> CONST_STRING .)


state 154

    (57) return -> RETURN expression_log SEMICOLON . return_point
    (58) return_point -> .

    VAR             reduce using rule 58 (return_point -> .)
    ID              reduce using rule 58 (return_point -> .)
    IF              reduce using rule 58 (return_point -> .)
    PRINT           reduce using rule 58 (return_point -> .)
    WHILE           reduce using rule 58 (return_point -> .)
    START           reduce using rule 58 (return_point -> .)
    RESET           reduce using rule 58 (return_point -> .)
    END             reduce using rule 58 (return_point -> .)
    GIRA_IZQ        reduce using rule 58 (return_point -> .)
    GIRA_DER        reduce using rule 58 (return_point -> .)
    CAMINA          reduce using rule 58 (return_point -> .)
    SI_DIBUJA       reduce using rule 58 (return_point -> .)
    NO_DIBUJA       reduce using rule 58 (return_point -> .)
    DIBUJA_POLIGONO reduce using rule 58 (return_point -> .)
    DIBUJA_CIRCULO  reduce using rule 58 (return_point -> .)
    DIBUJA_ESTRELLA reduce using rule 58 (return_point -> .)
    COLOR_PLUMA     reduce using rule 58 (return_point -> .)
    RETURN          reduce using rule 58 (return_point -> .)
    RBRACE          reduce using rule 58 (return_point -> .)

    return_point                   shift and go to state 182

state 155

    (14) expression_log -> not expression . expression_log_point
    (15) expression_log -> not expression . expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> not expression . expression_log_point OR expression_log_point2 expression_log
    (17) expression_log_point -> .

    AND             reduce using rule 17 (expression_log_point -> .)
    OR              reduce using rule 17 (expression_log_point -> .)
    SEMICOLON       reduce using rule 17 (expression_log_point -> .)
    COMMA           reduce using rule 17 (expression_log_point -> .)
    RPAREN          reduce using rule 17 (expression_log_point -> .)

    expression_log_point           shift and go to state 183

state 156

    (21) expression -> exp . expression_point2
    (22) expression -> exp . GREATER_THAN expression_point exp expression_point2
    (23) expression -> exp . LESS_THAN expression_point exp expression_point2
    (24) expression -> exp . GREATER_OR_EQUAL_THAN expression_point exp expression_point2
    (25) expression -> exp . LESS_OR_EQUAL_THAN expression_point exp expression_point2
    (26) expression -> exp . EQUAL_THAN expression_point exp expression_point2
    (27) expression -> exp . NOT_EQUAL_THAN expression_point exp expression_point2
    (29) expression_point2 -> .

    GREATER_THAN    shift and go to state 185
    LESS_THAN       shift and go to state 186
    GREATER_OR_EQUAL_THAN shift and go to state 187
    LESS_OR_EQUAL_THAN shift and go to state 188
    EQUAL_THAN      shift and go to state 189
    NOT_EQUAL_THAN  shift and go to state 190
    AND             reduce using rule 29 (expression_point2 -> .)
    OR              reduce using rule 29 (expression_point2 -> .)
    SEMICOLON       reduce using rule 29 (expression_point2 -> .)
    COMMA           reduce using rule 29 (expression_point2 -> .)
    RPAREN          reduce using rule 29 (expression_point2 -> .)

    expression_point2              shift and go to state 184

state 157

    (59) functions -> FUNC type_func ID LPAREN params RPAREN functions_point block . functions_point2 functions
    (68) functions_point2 -> .

    FUNC            reduce using rule 68 (functions_point2 -> .)
    MAIN            reduce using rule 68 (functions_point2 -> .)

    functions_point2               shift and go to state 191

state 158

    (65) params_aux -> COMMA type . ID params_aux

    ID              shift and go to state 192


state 159

    (89) list_call -> LBRACKET list_point list_point2 exp . list_point3 list_point4 RBRACKET
    (93) list_point3 -> .

    RBRACKET        reduce using rule 93 (list_point3 -> .)

    list_point3                    shift and go to state 193

state 160

    (113) function -> ID LPAREN function_point function_point2 args RPAREN . function_point3 function_point4 function_point5
    (116) function_point3 -> .

    RBRACKET        reduce using rule 116 (function_point3 -> .)
    TIMES           reduce using rule 116 (function_point3 -> .)
    DIVIDES         reduce using rule 116 (function_point3 -> .)
    PLUS            reduce using rule 116 (function_point3 -> .)
    MINUS           reduce using rule 116 (function_point3 -> .)
    RPAREN          reduce using rule 116 (function_point3 -> .)
    COMMA           reduce using rule 116 (function_point3 -> .)
    GREATER_THAN    reduce using rule 116 (function_point3 -> .)
    LESS_THAN       reduce using rule 116 (function_point3 -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 116 (function_point3 -> .)
    LESS_OR_EQUAL_THAN reduce using rule 116 (function_point3 -> .)
    EQUAL_THAN      reduce using rule 116 (function_point3 -> .)
    NOT_EQUAL_THAN  reduce using rule 116 (function_point3 -> .)
    AND             reduce using rule 116 (function_point3 -> .)
    OR              reduce using rule 116 (function_point3 -> .)
    SEMICOLON       reduce using rule 116 (function_point3 -> .)

    function_point3                shift and go to state 194

state 161

    (119) args -> expression_log args_point . args_aux
    (121) args_aux -> . COMMA expression_log args_point args_aux
    (122) args_aux -> . empty
    (126) empty -> .

    COMMA           shift and go to state 196
    RPAREN          reduce using rule 126 (empty -> .)

    args_aux                       shift and go to state 195
    empty                          shift and go to state 197

state 162

    (83) assignment -> ID assignment_point list_call ASSIGN . assignment_point2 expression_log SEMICOLON assignment_point4
    (84) assignment -> ID assignment_point list_call ASSIGN . assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4
    (86) assignment_point2 -> .

    READ            reduce using rule 86 (assignment_point2 -> .)
    NOT             reduce using rule 86 (assignment_point2 -> .)
    LPAREN          reduce using rule 86 (assignment_point2 -> .)
    ID              reduce using rule 86 (assignment_point2 -> .)
    CONST_INT       reduce using rule 86 (assignment_point2 -> .)
    CONST_FLOAT     reduce using rule 86 (assignment_point2 -> .)
    CONST_STRING    reduce using rule 86 (assignment_point2 -> .)
    TRUE            reduce using rule 86 (assignment_point2 -> .)
    FALSE           reduce using rule 86 (assignment_point2 -> .)

    assignment_point2              shift and go to state 198

state 163

    (107) method -> ID LPAREN method_point method_point2 . args RPAREN method_point3 method_point4 method_point5 SEMICOLON
    (119) args -> . expression_log args_point args_aux
    (120) args -> . empty
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (126) empty -> .
    (19) not -> . NOT
    (20) not -> . empty

    RPAREN          reduce using rule 126 (empty -> .)
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)
    NOT             shift and go to state 119

    args                           shift and go to state 199
    expression_log                 shift and go to state 129
    empty                          shift and go to state 130
    not                            shift and go to state 118

state 164

    (95) condition -> IF LPAREN expression_log RPAREN . condition_point block else condition_point2
    (96) condition_point -> .

    LBRACE          reduce using rule 96 (condition_point -> .)

    condition_point                shift and go to state 200

state 165

    (101) write -> PRINT LPAREN expression_log write_point . RPAREN SEMICOLON

    RPAREN          shift and go to state 201


state 166

    (103) loop -> WHILE loop_point LPAREN expression_log . RPAREN loop_point2 block loop_point3

    RPAREN          shift and go to state 202


state 167

    (127) predefined_method -> START LPAREN RPAREN SEMICOLON .

    VAR             reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    START           reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    RESET           reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    CAMINA          reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 127 (predefined_method -> START LPAREN RPAREN SEMICOLON .)


state 168

    (128) predefined_method -> RESET LPAREN RPAREN SEMICOLON .

    VAR             reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    START           reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    RESET           reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    CAMINA          reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 128 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)


state 169

    (129) predefined_method -> END LPAREN RPAREN SEMICOLON .

    VAR             reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    START           reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    RESET           reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    CAMINA          reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 129 (predefined_method -> END LPAREN RPAREN SEMICOLON .)


state 170

    (40) factor -> LPAREN factor_point . expression_log RPAREN factor_point2
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (19) not -> . NOT
    (20) not -> . empty
    (126) empty -> .

    NOT             shift and go to state 119
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)

    expression_log                 shift and go to state 203
    not                            shift and go to state 118
    empty                          shift and go to state 120

state 171

    (130) predefined_method -> GIRA_IZQ LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 204


state 172

    (30) exp -> term exp_point .
    (31) exp -> term exp_point . PLUS exp_point2 exp
    (32) exp -> term exp_point . MINUS exp_point2 exp

    RPAREN          reduce using rule 30 (exp -> term exp_point .)
    COMMA           reduce using rule 30 (exp -> term exp_point .)
    GREATER_THAN    reduce using rule 30 (exp -> term exp_point .)
    LESS_THAN       reduce using rule 30 (exp -> term exp_point .)
    GREATER_OR_EQUAL_THAN reduce using rule 30 (exp -> term exp_point .)
    LESS_OR_EQUAL_THAN reduce using rule 30 (exp -> term exp_point .)
    EQUAL_THAN      reduce using rule 30 (exp -> term exp_point .)
    NOT_EQUAL_THAN  reduce using rule 30 (exp -> term exp_point .)
    AND             reduce using rule 30 (exp -> term exp_point .)
    OR              reduce using rule 30 (exp -> term exp_point .)
    SEMICOLON       reduce using rule 30 (exp -> term exp_point .)
    RBRACKET        reduce using rule 30 (exp -> term exp_point .)
    PLUS            shift and go to state 205
    MINUS           shift and go to state 206


state 173

    (35) term -> factor term_point .
    (36) term -> factor term_point . TIMES term_point2 term
    (37) term -> factor term_point . DIVIDES term_point2 term

    PLUS            reduce using rule 35 (term -> factor term_point .)
    MINUS           reduce using rule 35 (term -> factor term_point .)
    RPAREN          reduce using rule 35 (term -> factor term_point .)
    COMMA           reduce using rule 35 (term -> factor term_point .)
    GREATER_THAN    reduce using rule 35 (term -> factor term_point .)
    LESS_THAN       reduce using rule 35 (term -> factor term_point .)
    GREATER_OR_EQUAL_THAN reduce using rule 35 (term -> factor term_point .)
    LESS_OR_EQUAL_THAN reduce using rule 35 (term -> factor term_point .)
    EQUAL_THAN      reduce using rule 35 (term -> factor term_point .)
    NOT_EQUAL_THAN  reduce using rule 35 (term -> factor term_point .)
    AND             reduce using rule 35 (term -> factor term_point .)
    OR              reduce using rule 35 (term -> factor term_point .)
    SEMICOLON       reduce using rule 35 (term -> factor term_point .)
    RBRACKET        reduce using rule 35 (term -> factor term_point .)
    TIMES           shift and go to state 207
    DIVIDES         shift and go to state 208


state 174

    (131) predefined_method -> GIRA_DER LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 209


state 175

    (132) predefined_method -> CAMINA LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 210


state 176

    (133) predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .

    VAR             reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    START           reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    RESET           reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    CAMINA          reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 133 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)


state 177

    (134) predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .

    VAR             reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    START           reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    RESET           reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    CAMINA          reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 134 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)


state 178

    (135) predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA . exp RPAREN SEMICOLON
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 211
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 179

    (136) predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 212


state 180

    (137) predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 213


state 181

    (138) predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 214


state 182

    (57) return -> RETURN expression_log SEMICOLON return_point .

    VAR             reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    ID              reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    IF              reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    PRINT           reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    WHILE           reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    START           reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    RESET           reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    END             reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    GIRA_IZQ        reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    GIRA_DER        reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    CAMINA          reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    SI_DIBUJA       reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    NO_DIBUJA       reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    DIBUJA_POLIGONO reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    DIBUJA_CIRCULO  reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    DIBUJA_ESTRELLA reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    COLOR_PLUMA     reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    RETURN          reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)
    RBRACE          reduce using rule 57 (return -> RETURN expression_log SEMICOLON return_point .)


state 183

    (14) expression_log -> not expression expression_log_point .
    (15) expression_log -> not expression expression_log_point . AND expression_log_point2 expression_log
    (16) expression_log -> not expression expression_log_point . OR expression_log_point2 expression_log

    SEMICOLON       reduce using rule 14 (expression_log -> not expression expression_log_point .)
    COMMA           reduce using rule 14 (expression_log -> not expression expression_log_point .)
    RPAREN          reduce using rule 14 (expression_log -> not expression expression_log_point .)
    AND             shift and go to state 215
    OR              shift and go to state 216


state 184

    (21) expression -> exp expression_point2 .

    AND             reduce using rule 21 (expression -> exp expression_point2 .)
    OR              reduce using rule 21 (expression -> exp expression_point2 .)
    SEMICOLON       reduce using rule 21 (expression -> exp expression_point2 .)
    COMMA           reduce using rule 21 (expression -> exp expression_point2 .)
    RPAREN          reduce using rule 21 (expression -> exp expression_point2 .)


state 185

    (22) expression -> exp GREATER_THAN . expression_point exp expression_point2
    (28) expression_point -> .

    LPAREN          reduce using rule 28 (expression_point -> .)
    ID              reduce using rule 28 (expression_point -> .)
    CONST_INT       reduce using rule 28 (expression_point -> .)
    CONST_FLOAT     reduce using rule 28 (expression_point -> .)
    CONST_STRING    reduce using rule 28 (expression_point -> .)
    TRUE            reduce using rule 28 (expression_point -> .)
    FALSE           reduce using rule 28 (expression_point -> .)

    expression_point               shift and go to state 217

state 186

    (23) expression -> exp LESS_THAN . expression_point exp expression_point2
    (28) expression_point -> .

    LPAREN          reduce using rule 28 (expression_point -> .)
    ID              reduce using rule 28 (expression_point -> .)
    CONST_INT       reduce using rule 28 (expression_point -> .)
    CONST_FLOAT     reduce using rule 28 (expression_point -> .)
    CONST_STRING    reduce using rule 28 (expression_point -> .)
    TRUE            reduce using rule 28 (expression_point -> .)
    FALSE           reduce using rule 28 (expression_point -> .)

    expression_point               shift and go to state 218

state 187

    (24) expression -> exp GREATER_OR_EQUAL_THAN . expression_point exp expression_point2
    (28) expression_point -> .

    LPAREN          reduce using rule 28 (expression_point -> .)
    ID              reduce using rule 28 (expression_point -> .)
    CONST_INT       reduce using rule 28 (expression_point -> .)
    CONST_FLOAT     reduce using rule 28 (expression_point -> .)
    CONST_STRING    reduce using rule 28 (expression_point -> .)
    TRUE            reduce using rule 28 (expression_point -> .)
    FALSE           reduce using rule 28 (expression_point -> .)

    expression_point               shift and go to state 219

state 188

    (25) expression -> exp LESS_OR_EQUAL_THAN . expression_point exp expression_point2
    (28) expression_point -> .

    LPAREN          reduce using rule 28 (expression_point -> .)
    ID              reduce using rule 28 (expression_point -> .)
    CONST_INT       reduce using rule 28 (expression_point -> .)
    CONST_FLOAT     reduce using rule 28 (expression_point -> .)
    CONST_STRING    reduce using rule 28 (expression_point -> .)
    TRUE            reduce using rule 28 (expression_point -> .)
    FALSE           reduce using rule 28 (expression_point -> .)

    expression_point               shift and go to state 220

state 189

    (26) expression -> exp EQUAL_THAN . expression_point exp expression_point2
    (28) expression_point -> .

    LPAREN          reduce using rule 28 (expression_point -> .)
    ID              reduce using rule 28 (expression_point -> .)
    CONST_INT       reduce using rule 28 (expression_point -> .)
    CONST_FLOAT     reduce using rule 28 (expression_point -> .)
    CONST_STRING    reduce using rule 28 (expression_point -> .)
    TRUE            reduce using rule 28 (expression_point -> .)
    FALSE           reduce using rule 28 (expression_point -> .)

    expression_point               shift and go to state 221

state 190

    (27) expression -> exp NOT_EQUAL_THAN . expression_point exp expression_point2
    (28) expression_point -> .

    LPAREN          reduce using rule 28 (expression_point -> .)
    ID              reduce using rule 28 (expression_point -> .)
    CONST_INT       reduce using rule 28 (expression_point -> .)
    CONST_FLOAT     reduce using rule 28 (expression_point -> .)
    CONST_STRING    reduce using rule 28 (expression_point -> .)
    TRUE            reduce using rule 28 (expression_point -> .)
    FALSE           reduce using rule 28 (expression_point -> .)

    expression_point               shift and go to state 222

state 191

    (59) functions -> FUNC type_func ID LPAREN params RPAREN functions_point block functions_point2 . functions
    (59) functions -> . FUNC type_func ID LPAREN params RPAREN functions_point block functions_point2 functions
    (60) functions -> . empty
    (126) empty -> .

    FUNC            shift and go to state 11
    MAIN            reduce using rule 126 (empty -> .)

    functions                      shift and go to state 223
    empty                          shift and go to state 12

state 192

    (65) params_aux -> COMMA type ID . params_aux
    (65) params_aux -> . COMMA type ID params_aux
    (66) params_aux -> . empty
    (126) empty -> .

    COMMA           shift and go to state 123
    RPAREN          reduce using rule 126 (empty -> .)

    params_aux                     shift and go to state 224
    empty                          shift and go to state 124

state 193

    (89) list_call -> LBRACKET list_point list_point2 exp list_point3 . list_point4 RBRACKET
    (94) list_point4 -> .

    RBRACKET        reduce using rule 94 (list_point4 -> .)

    list_point4                    shift and go to state 225

state 194

    (113) function -> ID LPAREN function_point function_point2 args RPAREN function_point3 . function_point4 function_point5
    (117) function_point4 -> .

    RBRACKET        reduce using rule 117 (function_point4 -> .)
    TIMES           reduce using rule 117 (function_point4 -> .)
    DIVIDES         reduce using rule 117 (function_point4 -> .)
    PLUS            reduce using rule 117 (function_point4 -> .)
    MINUS           reduce using rule 117 (function_point4 -> .)
    RPAREN          reduce using rule 117 (function_point4 -> .)
    COMMA           reduce using rule 117 (function_point4 -> .)
    GREATER_THAN    reduce using rule 117 (function_point4 -> .)
    LESS_THAN       reduce using rule 117 (function_point4 -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 117 (function_point4 -> .)
    LESS_OR_EQUAL_THAN reduce using rule 117 (function_point4 -> .)
    EQUAL_THAN      reduce using rule 117 (function_point4 -> .)
    NOT_EQUAL_THAN  reduce using rule 117 (function_point4 -> .)
    AND             reduce using rule 117 (function_point4 -> .)
    OR              reduce using rule 117 (function_point4 -> .)
    SEMICOLON       reduce using rule 117 (function_point4 -> .)

    function_point4                shift and go to state 226

state 195

    (119) args -> expression_log args_point args_aux .

    RPAREN          reduce using rule 119 (args -> expression_log args_point args_aux .)


state 196

    (121) args_aux -> COMMA . expression_log args_point args_aux
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (19) not -> . NOT
    (20) not -> . empty
    (126) empty -> .

    NOT             shift and go to state 119
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)

    expression_log                 shift and go to state 227
    not                            shift and go to state 118
    empty                          shift and go to state 120

state 197

    (122) args_aux -> empty .

    RPAREN          reduce using rule 122 (args_aux -> empty .)


state 198

    (83) assignment -> ID assignment_point list_call ASSIGN assignment_point2 . expression_log SEMICOLON assignment_point4
    (84) assignment -> ID assignment_point list_call ASSIGN assignment_point2 . READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (19) not -> . NOT
    (20) not -> . empty
    (126) empty -> .

    READ            shift and go to state 229
    NOT             shift and go to state 119
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)

    expression_log                 shift and go to state 228
    not                            shift and go to state 118
    empty                          shift and go to state 120

state 199

    (107) method -> ID LPAREN method_point method_point2 args . RPAREN method_point3 method_point4 method_point5 SEMICOLON

    RPAREN          shift and go to state 230


state 200

    (95) condition -> IF LPAREN expression_log RPAREN condition_point . block else condition_point2
    (73) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 231

state 201

    (101) write -> PRINT LPAREN expression_log write_point RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 232


state 202

    (103) loop -> WHILE loop_point LPAREN expression_log RPAREN . loop_point2 block loop_point3
    (105) loop_point2 -> .

    LBRACE          reduce using rule 105 (loop_point2 -> .)

    loop_point2                    shift and go to state 233

state 203

    (40) factor -> LPAREN factor_point expression_log . RPAREN factor_point2

    RPAREN          shift and go to state 234


state 204

    (130) predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .

    VAR             reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    START           reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    RESET           reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    END             reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 130 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)


state 205

    (31) exp -> term exp_point PLUS . exp_point2 exp
    (34) exp_point2 -> .

    LPAREN          reduce using rule 34 (exp_point2 -> .)
    ID              reduce using rule 34 (exp_point2 -> .)
    CONST_INT       reduce using rule 34 (exp_point2 -> .)
    CONST_FLOAT     reduce using rule 34 (exp_point2 -> .)
    CONST_STRING    reduce using rule 34 (exp_point2 -> .)
    TRUE            reduce using rule 34 (exp_point2 -> .)
    FALSE           reduce using rule 34 (exp_point2 -> .)

    exp_point2                     shift and go to state 235

state 206

    (32) exp -> term exp_point MINUS . exp_point2 exp
    (34) exp_point2 -> .

    LPAREN          reduce using rule 34 (exp_point2 -> .)
    ID              reduce using rule 34 (exp_point2 -> .)
    CONST_INT       reduce using rule 34 (exp_point2 -> .)
    CONST_FLOAT     reduce using rule 34 (exp_point2 -> .)
    CONST_STRING    reduce using rule 34 (exp_point2 -> .)
    TRUE            reduce using rule 34 (exp_point2 -> .)
    FALSE           reduce using rule 34 (exp_point2 -> .)

    exp_point2                     shift and go to state 236

state 207

    (36) term -> factor term_point TIMES . term_point2 term
    (39) term_point2 -> .

    LPAREN          reduce using rule 39 (term_point2 -> .)
    ID              reduce using rule 39 (term_point2 -> .)
    CONST_INT       reduce using rule 39 (term_point2 -> .)
    CONST_FLOAT     reduce using rule 39 (term_point2 -> .)
    CONST_STRING    reduce using rule 39 (term_point2 -> .)
    TRUE            reduce using rule 39 (term_point2 -> .)
    FALSE           reduce using rule 39 (term_point2 -> .)

    term_point2                    shift and go to state 237

state 208

    (37) term -> factor term_point DIVIDES . term_point2 term
    (39) term_point2 -> .

    LPAREN          reduce using rule 39 (term_point2 -> .)
    ID              reduce using rule 39 (term_point2 -> .)
    CONST_INT       reduce using rule 39 (term_point2 -> .)
    CONST_FLOAT     reduce using rule 39 (term_point2 -> .)
    CONST_STRING    reduce using rule 39 (term_point2 -> .)
    TRUE            reduce using rule 39 (term_point2 -> .)
    FALSE           reduce using rule 39 (term_point2 -> .)

    term_point2                    shift and go to state 238

state 209

    (131) predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .

    VAR             reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    START           reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    RESET           reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    END             reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 131 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)


state 210

    (132) predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .

    VAR             reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    START           reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    RESET           reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    END             reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 132 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)


state 211

    (135) predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 239


state 212

    (136) predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .

    VAR             reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    START           reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    RESET           reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    END             reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 136 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)


state 213

    (137) predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .

    VAR             reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    START           reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    RESET           reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    END             reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 137 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)


state 214

    (138) predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .

    VAR             reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    ID              reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    IF              reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    PRINT           reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    WHILE           reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    START           reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    RESET           reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    END             reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    CAMINA          reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    RETURN          reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    RBRACE          reduce using rule 138 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)


state 215

    (15) expression_log -> not expression expression_log_point AND . expression_log_point2 expression_log
    (18) expression_log_point2 -> .

    NOT             reduce using rule 18 (expression_log_point2 -> .)
    LPAREN          reduce using rule 18 (expression_log_point2 -> .)
    ID              reduce using rule 18 (expression_log_point2 -> .)
    CONST_INT       reduce using rule 18 (expression_log_point2 -> .)
    CONST_FLOAT     reduce using rule 18 (expression_log_point2 -> .)
    CONST_STRING    reduce using rule 18 (expression_log_point2 -> .)
    TRUE            reduce using rule 18 (expression_log_point2 -> .)
    FALSE           reduce using rule 18 (expression_log_point2 -> .)

    expression_log_point2          shift and go to state 240

state 216

    (16) expression_log -> not expression expression_log_point OR . expression_log_point2 expression_log
    (18) expression_log_point2 -> .

    NOT             reduce using rule 18 (expression_log_point2 -> .)
    LPAREN          reduce using rule 18 (expression_log_point2 -> .)
    ID              reduce using rule 18 (expression_log_point2 -> .)
    CONST_INT       reduce using rule 18 (expression_log_point2 -> .)
    CONST_FLOAT     reduce using rule 18 (expression_log_point2 -> .)
    CONST_STRING    reduce using rule 18 (expression_log_point2 -> .)
    TRUE            reduce using rule 18 (expression_log_point2 -> .)
    FALSE           reduce using rule 18 (expression_log_point2 -> .)

    expression_log_point2          shift and go to state 241

state 217

    (22) expression -> exp GREATER_THAN expression_point . exp expression_point2
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 242
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 218

    (23) expression -> exp LESS_THAN expression_point . exp expression_point2
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 243
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 219

    (24) expression -> exp GREATER_OR_EQUAL_THAN expression_point . exp expression_point2
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 244
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 220

    (25) expression -> exp LESS_OR_EQUAL_THAN expression_point . exp expression_point2
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 245
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 221

    (26) expression -> exp EQUAL_THAN expression_point . exp expression_point2
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 246
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 222

    (27) expression -> exp NOT_EQUAL_THAN expression_point . exp expression_point2
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 247
    term                           shift and go to state 141
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 223

    (59) functions -> FUNC type_func ID LPAREN params RPAREN functions_point block functions_point2 functions .

    MAIN            reduce using rule 59 (functions -> FUNC type_func ID LPAREN params RPAREN functions_point block functions_point2 functions .)


state 224

    (65) params_aux -> COMMA type ID params_aux .

    RPAREN          reduce using rule 65 (params_aux -> COMMA type ID params_aux .)


state 225

    (89) list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 . RBRACKET

    RBRACKET        shift and go to state 248


state 226

    (113) function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 . function_point5
    (118) function_point5 -> .

    RBRACKET        reduce using rule 118 (function_point5 -> .)
    TIMES           reduce using rule 118 (function_point5 -> .)
    DIVIDES         reduce using rule 118 (function_point5 -> .)
    PLUS            reduce using rule 118 (function_point5 -> .)
    MINUS           reduce using rule 118 (function_point5 -> .)
    RPAREN          reduce using rule 118 (function_point5 -> .)
    COMMA           reduce using rule 118 (function_point5 -> .)
    GREATER_THAN    reduce using rule 118 (function_point5 -> .)
    LESS_THAN       reduce using rule 118 (function_point5 -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 118 (function_point5 -> .)
    LESS_OR_EQUAL_THAN reduce using rule 118 (function_point5 -> .)
    EQUAL_THAN      reduce using rule 118 (function_point5 -> .)
    NOT_EQUAL_THAN  reduce using rule 118 (function_point5 -> .)
    AND             reduce using rule 118 (function_point5 -> .)
    OR              reduce using rule 118 (function_point5 -> .)
    SEMICOLON       reduce using rule 118 (function_point5 -> .)

    function_point5                shift and go to state 249

state 227

    (121) args_aux -> COMMA expression_log . args_point args_aux
    (123) args_point -> .

    COMMA           reduce using rule 123 (args_point -> .)
    RPAREN          reduce using rule 123 (args_point -> .)

    args_point                     shift and go to state 250

state 228

    (83) assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log . SEMICOLON assignment_point4

    SEMICOLON       shift and go to state 251


state 229

    (84) assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ . LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4

    LPAREN          shift and go to state 252


state 230

    (107) method -> ID LPAREN method_point method_point2 args RPAREN . method_point3 method_point4 method_point5 SEMICOLON
    (110) method_point3 -> .

    SEMICOLON       reduce using rule 110 (method_point3 -> .)

    method_point3                  shift and go to state 253

state 231

    (95) condition -> IF LPAREN expression_log RPAREN condition_point block . else condition_point2
    (98) else -> . ELSE else_point block
    (99) else -> . empty
    (126) empty -> .

    ELSE            shift and go to state 255
    VAR             reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    PRINT           reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    START           reduce using rule 126 (empty -> .)
    RESET           reduce using rule 126 (empty -> .)
    END             reduce using rule 126 (empty -> .)
    GIRA_IZQ        reduce using rule 126 (empty -> .)
    GIRA_DER        reduce using rule 126 (empty -> .)
    CAMINA          reduce using rule 126 (empty -> .)
    SI_DIBUJA       reduce using rule 126 (empty -> .)
    NO_DIBUJA       reduce using rule 126 (empty -> .)
    DIBUJA_POLIGONO reduce using rule 126 (empty -> .)
    DIBUJA_CIRCULO  reduce using rule 126 (empty -> .)
    DIBUJA_ESTRELLA reduce using rule 126 (empty -> .)
    COLOR_PLUMA     reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    RBRACE          reduce using rule 126 (empty -> .)

    else                           shift and go to state 254
    empty                          shift and go to state 256

state 232

    (101) write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .

    VAR             reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    ID              reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    IF              reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    PRINT           reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    WHILE           reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    START           reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    RESET           reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    END             reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    CAMINA          reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    RETURN          reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)
    RBRACE          reduce using rule 101 (write -> PRINT LPAREN expression_log write_point RPAREN SEMICOLON .)


state 233

    (103) loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 . block loop_point3
    (73) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 257

state 234

    (40) factor -> LPAREN factor_point expression_log RPAREN . factor_point2
    (43) factor_point2 -> .

    TIMES           reduce using rule 43 (factor_point2 -> .)
    DIVIDES         reduce using rule 43 (factor_point2 -> .)
    PLUS            reduce using rule 43 (factor_point2 -> .)
    MINUS           reduce using rule 43 (factor_point2 -> .)
    RPAREN          reduce using rule 43 (factor_point2 -> .)
    COMMA           reduce using rule 43 (factor_point2 -> .)
    GREATER_THAN    reduce using rule 43 (factor_point2 -> .)
    LESS_THAN       reduce using rule 43 (factor_point2 -> .)
    GREATER_OR_EQUAL_THAN reduce using rule 43 (factor_point2 -> .)
    LESS_OR_EQUAL_THAN reduce using rule 43 (factor_point2 -> .)
    EQUAL_THAN      reduce using rule 43 (factor_point2 -> .)
    NOT_EQUAL_THAN  reduce using rule 43 (factor_point2 -> .)
    AND             reduce using rule 43 (factor_point2 -> .)
    OR              reduce using rule 43 (factor_point2 -> .)
    SEMICOLON       reduce using rule 43 (factor_point2 -> .)
    RBRACKET        reduce using rule 43 (factor_point2 -> .)

    factor_point2                  shift and go to state 258

state 235

    (31) exp -> term exp_point PLUS exp_point2 . exp
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    term                           shift and go to state 141
    exp                            shift and go to state 259
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 236

    (32) exp -> term exp_point MINUS exp_point2 . exp
    (30) exp -> . term exp_point
    (31) exp -> . term exp_point PLUS exp_point2 exp
    (32) exp -> . term exp_point MINUS exp_point2 exp
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    term                           shift and go to state 141
    exp                            shift and go to state 260
    factor                         shift and go to state 142
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 237

    (36) term -> factor term_point TIMES term_point2 . term
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    factor                         shift and go to state 142
    term                           shift and go to state 261
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 238

    (37) term -> factor term_point DIVIDES term_point2 . term
    (35) term -> . factor term_point
    (36) term -> . factor term_point TIMES term_point2 term
    (37) term -> . factor term_point DIVIDES term_point2 term
    (40) factor -> . LPAREN factor_point expression_log RPAREN factor_point2
    (41) factor -> . var_const
    (44) var_const -> . ID var_const_point list_call
    (45) var_const -> . CONST_INT var_const_point2
    (46) var_const -> . CONST_FLOAT var_const_point3
    (47) var_const -> . CONST_STRING var_const_point4
    (48) var_const -> . boolean var_const_point5
    (49) var_const -> . function
    (55) boolean -> . TRUE
    (56) boolean -> . FALSE
    (113) function -> . ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5

    LPAREN          shift and go to state 139
    ID              shift and go to state 33
    CONST_INT       shift and go to state 34
    CONST_FLOAT     shift and go to state 35
    CONST_STRING    shift and go to state 36
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    factor                         shift and go to state 142
    term                           shift and go to state 262
    var_const                      shift and go to state 143
    boolean                        shift and go to state 37
    function                       shift and go to state 38

state 239

    (135) predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 263


state 240

    (15) expression_log -> not expression expression_log_point AND expression_log_point2 . expression_log
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (19) not -> . NOT
    (20) not -> . empty
    (126) empty -> .

    NOT             shift and go to state 119
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)

    not                            shift and go to state 118
    expression_log                 shift and go to state 264
    empty                          shift and go to state 120

state 241

    (16) expression_log -> not expression expression_log_point OR expression_log_point2 . expression_log
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (19) not -> . NOT
    (20) not -> . empty
    (126) empty -> .

    NOT             shift and go to state 119
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)

    not                            shift and go to state 118
    expression_log                 shift and go to state 265
    empty                          shift and go to state 120

state 242

    (22) expression -> exp GREATER_THAN expression_point exp . expression_point2
    (29) expression_point2 -> .

    AND             reduce using rule 29 (expression_point2 -> .)
    OR              reduce using rule 29 (expression_point2 -> .)
    SEMICOLON       reduce using rule 29 (expression_point2 -> .)
    COMMA           reduce using rule 29 (expression_point2 -> .)
    RPAREN          reduce using rule 29 (expression_point2 -> .)

    expression_point2              shift and go to state 266

state 243

    (23) expression -> exp LESS_THAN expression_point exp . expression_point2
    (29) expression_point2 -> .

    AND             reduce using rule 29 (expression_point2 -> .)
    OR              reduce using rule 29 (expression_point2 -> .)
    SEMICOLON       reduce using rule 29 (expression_point2 -> .)
    COMMA           reduce using rule 29 (expression_point2 -> .)
    RPAREN          reduce using rule 29 (expression_point2 -> .)

    expression_point2              shift and go to state 267

state 244

    (24) expression -> exp GREATER_OR_EQUAL_THAN expression_point exp . expression_point2
    (29) expression_point2 -> .

    AND             reduce using rule 29 (expression_point2 -> .)
    OR              reduce using rule 29 (expression_point2 -> .)
    SEMICOLON       reduce using rule 29 (expression_point2 -> .)
    COMMA           reduce using rule 29 (expression_point2 -> .)
    RPAREN          reduce using rule 29 (expression_point2 -> .)

    expression_point2              shift and go to state 268

state 245

    (25) expression -> exp LESS_OR_EQUAL_THAN expression_point exp . expression_point2
    (29) expression_point2 -> .

    AND             reduce using rule 29 (expression_point2 -> .)
    OR              reduce using rule 29 (expression_point2 -> .)
    SEMICOLON       reduce using rule 29 (expression_point2 -> .)
    COMMA           reduce using rule 29 (expression_point2 -> .)
    RPAREN          reduce using rule 29 (expression_point2 -> .)

    expression_point2              shift and go to state 269

state 246

    (26) expression -> exp EQUAL_THAN expression_point exp . expression_point2
    (29) expression_point2 -> .

    AND             reduce using rule 29 (expression_point2 -> .)
    OR              reduce using rule 29 (expression_point2 -> .)
    SEMICOLON       reduce using rule 29 (expression_point2 -> .)
    COMMA           reduce using rule 29 (expression_point2 -> .)
    RPAREN          reduce using rule 29 (expression_point2 -> .)

    expression_point2              shift and go to state 270

state 247

    (27) expression -> exp NOT_EQUAL_THAN expression_point exp . expression_point2
    (29) expression_point2 -> .

    AND             reduce using rule 29 (expression_point2 -> .)
    OR              reduce using rule 29 (expression_point2 -> .)
    SEMICOLON       reduce using rule 29 (expression_point2 -> .)
    COMMA           reduce using rule 29 (expression_point2 -> .)
    RPAREN          reduce using rule 29 (expression_point2 -> .)

    expression_point2              shift and go to state 271

state 248

    (89) list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .

    RBRACKET        reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    TIMES           reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    DIVIDES         reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    PLUS            reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    MINUS           reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    RPAREN          reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    COMMA           reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    GREATER_THAN    reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    LESS_THAN       reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    GREATER_OR_EQUAL_THAN reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    LESS_OR_EQUAL_THAN reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    EQUAL_THAN      reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    NOT_EQUAL_THAN  reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    AND             reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    OR              reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    SEMICOLON       reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)
    ASSIGN          reduce using rule 89 (list_call -> LBRACKET list_point list_point2 exp list_point3 list_point4 RBRACKET .)


state 249

    (113) function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .

    RBRACKET        reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    TIMES           reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    DIVIDES         reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    PLUS            reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    MINUS           reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    RPAREN          reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    COMMA           reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    GREATER_THAN    reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    LESS_THAN       reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    GREATER_OR_EQUAL_THAN reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    LESS_OR_EQUAL_THAN reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    EQUAL_THAN      reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    NOT_EQUAL_THAN  reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    AND             reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    OR              reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)
    SEMICOLON       reduce using rule 113 (function -> ID LPAREN function_point function_point2 args RPAREN function_point3 function_point4 function_point5 .)


state 250

    (121) args_aux -> COMMA expression_log args_point . args_aux
    (121) args_aux -> . COMMA expression_log args_point args_aux
    (122) args_aux -> . empty
    (126) empty -> .

    COMMA           shift and go to state 196
    RPAREN          reduce using rule 126 (empty -> .)

    args_aux                       shift and go to state 272
    empty                          shift and go to state 197

state 251

    (83) assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON . assignment_point4
    (88) assignment_point4 -> .

    VAR             reduce using rule 88 (assignment_point4 -> .)
    ID              reduce using rule 88 (assignment_point4 -> .)
    IF              reduce using rule 88 (assignment_point4 -> .)
    PRINT           reduce using rule 88 (assignment_point4 -> .)
    WHILE           reduce using rule 88 (assignment_point4 -> .)
    START           reduce using rule 88 (assignment_point4 -> .)
    RESET           reduce using rule 88 (assignment_point4 -> .)
    END             reduce using rule 88 (assignment_point4 -> .)
    GIRA_IZQ        reduce using rule 88 (assignment_point4 -> .)
    GIRA_DER        reduce using rule 88 (assignment_point4 -> .)
    CAMINA          reduce using rule 88 (assignment_point4 -> .)
    SI_DIBUJA       reduce using rule 88 (assignment_point4 -> .)
    NO_DIBUJA       reduce using rule 88 (assignment_point4 -> .)
    DIBUJA_POLIGONO reduce using rule 88 (assignment_point4 -> .)
    DIBUJA_CIRCULO  reduce using rule 88 (assignment_point4 -> .)
    DIBUJA_ESTRELLA reduce using rule 88 (assignment_point4 -> .)
    COLOR_PLUMA     reduce using rule 88 (assignment_point4 -> .)
    RETURN          reduce using rule 88 (assignment_point4 -> .)
    RBRACE          reduce using rule 88 (assignment_point4 -> .)

    assignment_point4              shift and go to state 273

state 252

    (84) assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN . expression_log RPAREN assignment_point3 SEMICOLON assignment_point4
    (14) expression_log -> . not expression expression_log_point
    (15) expression_log -> . not expression expression_log_point AND expression_log_point2 expression_log
    (16) expression_log -> . not expression expression_log_point OR expression_log_point2 expression_log
    (19) not -> . NOT
    (20) not -> . empty
    (126) empty -> .

    NOT             shift and go to state 119
    LPAREN          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    CONST_INT       reduce using rule 126 (empty -> .)
    CONST_FLOAT     reduce using rule 126 (empty -> .)
    CONST_STRING    reduce using rule 126 (empty -> .)
    TRUE            reduce using rule 126 (empty -> .)
    FALSE           reduce using rule 126 (empty -> .)

    expression_log                 shift and go to state 274
    not                            shift and go to state 118
    empty                          shift and go to state 120

state 253

    (107) method -> ID LPAREN method_point method_point2 args RPAREN method_point3 . method_point4 method_point5 SEMICOLON
    (111) method_point4 -> .

    SEMICOLON       reduce using rule 111 (method_point4 -> .)

    method_point4                  shift and go to state 275

state 254

    (95) condition -> IF LPAREN expression_log RPAREN condition_point block else . condition_point2
    (97) condition_point2 -> .

    VAR             reduce using rule 97 (condition_point2 -> .)
    ID              reduce using rule 97 (condition_point2 -> .)
    IF              reduce using rule 97 (condition_point2 -> .)
    PRINT           reduce using rule 97 (condition_point2 -> .)
    WHILE           reduce using rule 97 (condition_point2 -> .)
    START           reduce using rule 97 (condition_point2 -> .)
    RESET           reduce using rule 97 (condition_point2 -> .)
    END             reduce using rule 97 (condition_point2 -> .)
    GIRA_IZQ        reduce using rule 97 (condition_point2 -> .)
    GIRA_DER        reduce using rule 97 (condition_point2 -> .)
    CAMINA          reduce using rule 97 (condition_point2 -> .)
    SI_DIBUJA       reduce using rule 97 (condition_point2 -> .)
    NO_DIBUJA       reduce using rule 97 (condition_point2 -> .)
    DIBUJA_POLIGONO reduce using rule 97 (condition_point2 -> .)
    DIBUJA_CIRCULO  reduce using rule 97 (condition_point2 -> .)
    DIBUJA_ESTRELLA reduce using rule 97 (condition_point2 -> .)
    COLOR_PLUMA     reduce using rule 97 (condition_point2 -> .)
    RETURN          reduce using rule 97 (condition_point2 -> .)
    RBRACE          reduce using rule 97 (condition_point2 -> .)

    condition_point2               shift and go to state 276

state 255

    (98) else -> ELSE . else_point block
    (100) else_point -> .

    LBRACE          reduce using rule 100 (else_point -> .)

    else_point                     shift and go to state 277

state 256

    (99) else -> empty .

    VAR             reduce using rule 99 (else -> empty .)
    ID              reduce using rule 99 (else -> empty .)
    IF              reduce using rule 99 (else -> empty .)
    PRINT           reduce using rule 99 (else -> empty .)
    WHILE           reduce using rule 99 (else -> empty .)
    START           reduce using rule 99 (else -> empty .)
    RESET           reduce using rule 99 (else -> empty .)
    END             reduce using rule 99 (else -> empty .)
    GIRA_IZQ        reduce using rule 99 (else -> empty .)
    GIRA_DER        reduce using rule 99 (else -> empty .)
    CAMINA          reduce using rule 99 (else -> empty .)
    SI_DIBUJA       reduce using rule 99 (else -> empty .)
    NO_DIBUJA       reduce using rule 99 (else -> empty .)
    DIBUJA_POLIGONO reduce using rule 99 (else -> empty .)
    DIBUJA_CIRCULO  reduce using rule 99 (else -> empty .)
    DIBUJA_ESTRELLA reduce using rule 99 (else -> empty .)
    COLOR_PLUMA     reduce using rule 99 (else -> empty .)
    RETURN          reduce using rule 99 (else -> empty .)
    RBRACE          reduce using rule 99 (else -> empty .)


state 257

    (103) loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block . loop_point3
    (106) loop_point3 -> .

    VAR             reduce using rule 106 (loop_point3 -> .)
    ID              reduce using rule 106 (loop_point3 -> .)
    IF              reduce using rule 106 (loop_point3 -> .)
    PRINT           reduce using rule 106 (loop_point3 -> .)
    WHILE           reduce using rule 106 (loop_point3 -> .)
    START           reduce using rule 106 (loop_point3 -> .)
    RESET           reduce using rule 106 (loop_point3 -> .)
    END             reduce using rule 106 (loop_point3 -> .)
    GIRA_IZQ        reduce using rule 106 (loop_point3 -> .)
    GIRA_DER        reduce using rule 106 (loop_point3 -> .)
    CAMINA          reduce using rule 106 (loop_point3 -> .)
    SI_DIBUJA       reduce using rule 106 (loop_point3 -> .)
    NO_DIBUJA       reduce using rule 106 (loop_point3 -> .)
    DIBUJA_POLIGONO reduce using rule 106 (loop_point3 -> .)
    DIBUJA_CIRCULO  reduce using rule 106 (loop_point3 -> .)
    DIBUJA_ESTRELLA reduce using rule 106 (loop_point3 -> .)
    COLOR_PLUMA     reduce using rule 106 (loop_point3 -> .)
    RETURN          reduce using rule 106 (loop_point3 -> .)
    RBRACE          reduce using rule 106 (loop_point3 -> .)

    loop_point3                    shift and go to state 278

state 258

    (40) factor -> LPAREN factor_point expression_log RPAREN factor_point2 .

    TIMES           reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    DIVIDES         reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    PLUS            reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    MINUS           reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    RPAREN          reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    COMMA           reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    GREATER_THAN    reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    LESS_THAN       reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    GREATER_OR_EQUAL_THAN reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    LESS_OR_EQUAL_THAN reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    EQUAL_THAN      reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    NOT_EQUAL_THAN  reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    AND             reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    OR              reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    SEMICOLON       reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)
    RBRACKET        reduce using rule 40 (factor -> LPAREN factor_point expression_log RPAREN factor_point2 .)


state 259

    (31) exp -> term exp_point PLUS exp_point2 exp .

    RPAREN          reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    COMMA           reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    GREATER_THAN    reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    LESS_THAN       reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    GREATER_OR_EQUAL_THAN reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    LESS_OR_EQUAL_THAN reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    EQUAL_THAN      reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    NOT_EQUAL_THAN  reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    AND             reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    OR              reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    SEMICOLON       reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)
    RBRACKET        reduce using rule 31 (exp -> term exp_point PLUS exp_point2 exp .)


state 260

    (32) exp -> term exp_point MINUS exp_point2 exp .

    RPAREN          reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    COMMA           reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    GREATER_THAN    reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    LESS_THAN       reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    GREATER_OR_EQUAL_THAN reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    LESS_OR_EQUAL_THAN reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    EQUAL_THAN      reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    NOT_EQUAL_THAN  reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    AND             reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    OR              reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    SEMICOLON       reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)
    RBRACKET        reduce using rule 32 (exp -> term exp_point MINUS exp_point2 exp .)


state 261

    (36) term -> factor term_point TIMES term_point2 term .

    PLUS            reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    MINUS           reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    RPAREN          reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    COMMA           reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    GREATER_THAN    reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    LESS_THAN       reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    GREATER_OR_EQUAL_THAN reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    LESS_OR_EQUAL_THAN reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    EQUAL_THAN      reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    NOT_EQUAL_THAN  reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    AND             reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    OR              reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    SEMICOLON       reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)
    RBRACKET        reduce using rule 36 (term -> factor term_point TIMES term_point2 term .)


state 262

    (37) term -> factor term_point DIVIDES term_point2 term .

    PLUS            reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    MINUS           reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    RPAREN          reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    COMMA           reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    GREATER_THAN    reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    LESS_THAN       reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    GREATER_OR_EQUAL_THAN reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    LESS_OR_EQUAL_THAN reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    EQUAL_THAN      reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    NOT_EQUAL_THAN  reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    AND             reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    OR              reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    SEMICOLON       reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)
    RBRACKET        reduce using rule 37 (term -> factor term_point DIVIDES term_point2 term .)


state 263

    (135) predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .

    VAR             reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    ID              reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    IF              reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    START           reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RESET           reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    END             reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 135 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)


state 264

    (15) expression_log -> not expression expression_log_point AND expression_log_point2 expression_log .

    SEMICOLON       reduce using rule 15 (expression_log -> not expression expression_log_point AND expression_log_point2 expression_log .)
    COMMA           reduce using rule 15 (expression_log -> not expression expression_log_point AND expression_log_point2 expression_log .)
    RPAREN          reduce using rule 15 (expression_log -> not expression expression_log_point AND expression_log_point2 expression_log .)


state 265

    (16) expression_log -> not expression expression_log_point OR expression_log_point2 expression_log .

    SEMICOLON       reduce using rule 16 (expression_log -> not expression expression_log_point OR expression_log_point2 expression_log .)
    COMMA           reduce using rule 16 (expression_log -> not expression expression_log_point OR expression_log_point2 expression_log .)
    RPAREN          reduce using rule 16 (expression_log -> not expression expression_log_point OR expression_log_point2 expression_log .)


state 266

    (22) expression -> exp GREATER_THAN expression_point exp expression_point2 .

    AND             reduce using rule 22 (expression -> exp GREATER_THAN expression_point exp expression_point2 .)
    OR              reduce using rule 22 (expression -> exp GREATER_THAN expression_point exp expression_point2 .)
    SEMICOLON       reduce using rule 22 (expression -> exp GREATER_THAN expression_point exp expression_point2 .)
    COMMA           reduce using rule 22 (expression -> exp GREATER_THAN expression_point exp expression_point2 .)
    RPAREN          reduce using rule 22 (expression -> exp GREATER_THAN expression_point exp expression_point2 .)


state 267

    (23) expression -> exp LESS_THAN expression_point exp expression_point2 .

    AND             reduce using rule 23 (expression -> exp LESS_THAN expression_point exp expression_point2 .)
    OR              reduce using rule 23 (expression -> exp LESS_THAN expression_point exp expression_point2 .)
    SEMICOLON       reduce using rule 23 (expression -> exp LESS_THAN expression_point exp expression_point2 .)
    COMMA           reduce using rule 23 (expression -> exp LESS_THAN expression_point exp expression_point2 .)
    RPAREN          reduce using rule 23 (expression -> exp LESS_THAN expression_point exp expression_point2 .)


state 268

    (24) expression -> exp GREATER_OR_EQUAL_THAN expression_point exp expression_point2 .

    AND             reduce using rule 24 (expression -> exp GREATER_OR_EQUAL_THAN expression_point exp expression_point2 .)
    OR              reduce using rule 24 (expression -> exp GREATER_OR_EQUAL_THAN expression_point exp expression_point2 .)
    SEMICOLON       reduce using rule 24 (expression -> exp GREATER_OR_EQUAL_THAN expression_point exp expression_point2 .)
    COMMA           reduce using rule 24 (expression -> exp GREATER_OR_EQUAL_THAN expression_point exp expression_point2 .)
    RPAREN          reduce using rule 24 (expression -> exp GREATER_OR_EQUAL_THAN expression_point exp expression_point2 .)


state 269

    (25) expression -> exp LESS_OR_EQUAL_THAN expression_point exp expression_point2 .

    AND             reduce using rule 25 (expression -> exp LESS_OR_EQUAL_THAN expression_point exp expression_point2 .)
    OR              reduce using rule 25 (expression -> exp LESS_OR_EQUAL_THAN expression_point exp expression_point2 .)
    SEMICOLON       reduce using rule 25 (expression -> exp LESS_OR_EQUAL_THAN expression_point exp expression_point2 .)
    COMMA           reduce using rule 25 (expression -> exp LESS_OR_EQUAL_THAN expression_point exp expression_point2 .)
    RPAREN          reduce using rule 25 (expression -> exp LESS_OR_EQUAL_THAN expression_point exp expression_point2 .)


state 270

    (26) expression -> exp EQUAL_THAN expression_point exp expression_point2 .

    AND             reduce using rule 26 (expression -> exp EQUAL_THAN expression_point exp expression_point2 .)
    OR              reduce using rule 26 (expression -> exp EQUAL_THAN expression_point exp expression_point2 .)
    SEMICOLON       reduce using rule 26 (expression -> exp EQUAL_THAN expression_point exp expression_point2 .)
    COMMA           reduce using rule 26 (expression -> exp EQUAL_THAN expression_point exp expression_point2 .)
    RPAREN          reduce using rule 26 (expression -> exp EQUAL_THAN expression_point exp expression_point2 .)


state 271

    (27) expression -> exp NOT_EQUAL_THAN expression_point exp expression_point2 .

    AND             reduce using rule 27 (expression -> exp NOT_EQUAL_THAN expression_point exp expression_point2 .)
    OR              reduce using rule 27 (expression -> exp NOT_EQUAL_THAN expression_point exp expression_point2 .)
    SEMICOLON       reduce using rule 27 (expression -> exp NOT_EQUAL_THAN expression_point exp expression_point2 .)
    COMMA           reduce using rule 27 (expression -> exp NOT_EQUAL_THAN expression_point exp expression_point2 .)
    RPAREN          reduce using rule 27 (expression -> exp NOT_EQUAL_THAN expression_point exp expression_point2 .)


state 272

    (121) args_aux -> COMMA expression_log args_point args_aux .

    RPAREN          reduce using rule 121 (args_aux -> COMMA expression_log args_point args_aux .)


state 273

    (83) assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .

    VAR             reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    ID              reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    IF              reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    PRINT           reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    WHILE           reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    START           reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    RESET           reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    END             reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    GIRA_IZQ        reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    GIRA_DER        reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    CAMINA          reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    SI_DIBUJA       reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    NO_DIBUJA       reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    DIBUJA_POLIGONO reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    DIBUJA_CIRCULO  reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    DIBUJA_ESTRELLA reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    COLOR_PLUMA     reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    RETURN          reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)
    RBRACE          reduce using rule 83 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 expression_log SEMICOLON assignment_point4 .)


state 274

    (84) assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log . RPAREN assignment_point3 SEMICOLON assignment_point4

    RPAREN          shift and go to state 279


state 275

    (107) method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 . method_point5 SEMICOLON
    (112) method_point5 -> .

    SEMICOLON       reduce using rule 112 (method_point5 -> .)

    method_point5                  shift and go to state 280

state 276

    (95) condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .

    VAR             reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    ID              reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    IF              reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    PRINT           reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    WHILE           reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    START           reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    RESET           reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    END             reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    GIRA_IZQ        reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    GIRA_DER        reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    CAMINA          reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    SI_DIBUJA       reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    NO_DIBUJA       reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    DIBUJA_POLIGONO reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    DIBUJA_CIRCULO  reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    DIBUJA_ESTRELLA reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    COLOR_PLUMA     reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    RETURN          reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    RBRACE          reduce using rule 95 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)


state 277

    (98) else -> ELSE else_point . block
    (73) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 42

    block                          shift and go to state 281

state 278

    (103) loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .

    VAR             reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    ID              reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    IF              reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    PRINT           reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    WHILE           reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    START           reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    RESET           reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    END             reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    GIRA_IZQ        reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    GIRA_DER        reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    CAMINA          reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    SI_DIBUJA       reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    NO_DIBUJA       reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    DIBUJA_POLIGONO reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    DIBUJA_CIRCULO  reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    DIBUJA_ESTRELLA reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    COLOR_PLUMA     reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    RETURN          reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)
    RBRACE          reduce using rule 103 (loop -> WHILE loop_point LPAREN expression_log RPAREN loop_point2 block loop_point3 .)


state 279

    (84) assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN . assignment_point3 SEMICOLON assignment_point4
    (87) assignment_point3 -> .

    SEMICOLON       reduce using rule 87 (assignment_point3 -> .)

    assignment_point3              shift and go to state 282

state 280

    (107) method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 . SEMICOLON

    SEMICOLON       shift and go to state 283


state 281

    (98) else -> ELSE else_point block .

    VAR             reduce using rule 98 (else -> ELSE else_point block .)
    ID              reduce using rule 98 (else -> ELSE else_point block .)
    IF              reduce using rule 98 (else -> ELSE else_point block .)
    PRINT           reduce using rule 98 (else -> ELSE else_point block .)
    WHILE           reduce using rule 98 (else -> ELSE else_point block .)
    START           reduce using rule 98 (else -> ELSE else_point block .)
    RESET           reduce using rule 98 (else -> ELSE else_point block .)
    END             reduce using rule 98 (else -> ELSE else_point block .)
    GIRA_IZQ        reduce using rule 98 (else -> ELSE else_point block .)
    GIRA_DER        reduce using rule 98 (else -> ELSE else_point block .)
    CAMINA          reduce using rule 98 (else -> ELSE else_point block .)
    SI_DIBUJA       reduce using rule 98 (else -> ELSE else_point block .)
    NO_DIBUJA       reduce using rule 98 (else -> ELSE else_point block .)
    DIBUJA_POLIGONO reduce using rule 98 (else -> ELSE else_point block .)
    DIBUJA_CIRCULO  reduce using rule 98 (else -> ELSE else_point block .)
    DIBUJA_ESTRELLA reduce using rule 98 (else -> ELSE else_point block .)
    COLOR_PLUMA     reduce using rule 98 (else -> ELSE else_point block .)
    RETURN          reduce using rule 98 (else -> ELSE else_point block .)
    RBRACE          reduce using rule 98 (else -> ELSE else_point block .)


state 282

    (84) assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 . SEMICOLON assignment_point4

    SEMICOLON       shift and go to state 284


state 283

    (107) method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .

    VAR             reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    ID              reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    IF              reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    PRINT           reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    WHILE           reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    START           reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    RESET           reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    END             reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    GIRA_IZQ        reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    GIRA_DER        reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    CAMINA          reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    SI_DIBUJA       reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    NO_DIBUJA       reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    COLOR_PLUMA     reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    RETURN          reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)
    RBRACE          reduce using rule 107 (method -> ID LPAREN method_point method_point2 args RPAREN method_point3 method_point4 method_point5 SEMICOLON .)


state 284

    (84) assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON . assignment_point4
    (88) assignment_point4 -> .

    VAR             reduce using rule 88 (assignment_point4 -> .)
    ID              reduce using rule 88 (assignment_point4 -> .)
    IF              reduce using rule 88 (assignment_point4 -> .)
    PRINT           reduce using rule 88 (assignment_point4 -> .)
    WHILE           reduce using rule 88 (assignment_point4 -> .)
    START           reduce using rule 88 (assignment_point4 -> .)
    RESET           reduce using rule 88 (assignment_point4 -> .)
    END             reduce using rule 88 (assignment_point4 -> .)
    GIRA_IZQ        reduce using rule 88 (assignment_point4 -> .)
    GIRA_DER        reduce using rule 88 (assignment_point4 -> .)
    CAMINA          reduce using rule 88 (assignment_point4 -> .)
    SI_DIBUJA       reduce using rule 88 (assignment_point4 -> .)
    NO_DIBUJA       reduce using rule 88 (assignment_point4 -> .)
    DIBUJA_POLIGONO reduce using rule 88 (assignment_point4 -> .)
    DIBUJA_CIRCULO  reduce using rule 88 (assignment_point4 -> .)
    DIBUJA_ESTRELLA reduce using rule 88 (assignment_point4 -> .)
    COLOR_PLUMA     reduce using rule 88 (assignment_point4 -> .)
    RETURN          reduce using rule 88 (assignment_point4 -> .)
    RBRACE          reduce using rule 88 (assignment_point4 -> .)

    assignment_point4              shift and go to state 285

state 285

    (84) assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .

    VAR             reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    ID              reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    IF              reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    PRINT           reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    WHILE           reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    START           reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    RESET           reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    END             reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    GIRA_IZQ        reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    GIRA_DER        reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    CAMINA          reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    SI_DIBUJA       reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    NO_DIBUJA       reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    DIBUJA_POLIGONO reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    DIBUJA_CIRCULO  reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    DIBUJA_ESTRELLA reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    COLOR_PLUMA     reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    RETURN          reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)
    RBRACE          reduce using rule 84 (assignment -> ID assignment_point list_call ASSIGN assignment_point2 READ LPAREN expression_log RPAREN assignment_point3 SEMICOLON assignment_point4 .)

