
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOLEAN CAMINA COLON COLOR_PLUMA COMMA CONST_FLOAT CONST_INT CONST_STRING DIBUJA_CIRCULO DIBUJA_ESTRELLA DIBUJA_POLIGONO DIVIDES ELSE END EQUAL_THAN FALSE FLOAT FUNC GIRA_DER GIRA_IZQ GREATER_OR_EQUAL_THAN GREATER_THAN ID IF INT LBRACE LBRACKET LESS_OR_EQUAL_THAN LESS_THAN LPAREN MAIN MINUS NOT NOT_EQUAL_THAN NO_DIBUJA OR PLUS PRINT PROGRAM RBRACE RBRACKET READ RESET RETURN RPAREN SEMICOLON SI_DIBUJA START STRING TIMES TRUE VAR VOID WHILEprogram : PROGRAM ID SEMICOLON vars functions MAIN blockvars : VAR ID COLON type SEMICOLON vars\n            | VAR ID list COLON type SEMICOLON vars\n            | emptynot : NOT\n           | emptyexpression_log : not expression\n                      | not expression AND expression_log\n                      | not expression OR expression_logexpression : exp\n                  | exp GREATER_THAN exp\n                  | exp LESS_THAN exp\n                  | exp GREATER_OR_EQUAL_THAN exp\n                  | exp LESS_OR_EQUAL_THAN exp\n                  | exp EQUAL_THAN exp\n                  | exp NOT_EQUAL_THAN expexp : term\n           | term PLUS exp\n           | term MINUS exp term : factor\n            | factor TIMES term\n            | factor DIVIDES termfactor : LPAREN expression_log RPAREN\n              | var_const list : LBRACKET var_const RBRACKETreturn : RETURN expression_log SEMICOLONfunctions : FUNC type_func ID LPAREN params RPAREN block functions\n                 | emptyparams : type ID params_aux\n              | emptyparams_aux : COMMA type ID params_aux\n                  | emptytype_func : type\n                 | VOIDblock : LBRACE statements RBRACEstatements : vars statement statements\n                  | vars emptystatement : assignment\n                 | condition\n                 | write\n                 | loop\n                 | method\n                 | predefined_method\n                 | return type : INT\n            | FLOAT\n            | STRING\n            | BOOLEANassignment : ID ASSIGN expression_log SEMICOLON\n\t\t\t\t  | ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLONcondition : IF LPAREN expression_log RPAREN condition_point block else condition_point2condition_point : else : ELSE block\n\t        | emptycondition_point2 : write : PRINT LPAREN expression_log RPAREN SEMICOLONloop : WHILE LPAREN expression_log RPAREN blockboolean : TRUE\n               | FALSEmethod : ID LPAREN args RPAREN SEMICOLONfunction : ID LPAREN args RPARENargs : expression_log args_aux\n\t\t\t| emptyargs_aux : COMMA expression_log args_aux\n                | emptyvar_const : ID\n    \t\t\t | ID list\n                 | CONST_INT\n                 | CONST_FLOAT\n                 | CONST_STRING\n                 | boolean\n                 | functionempty : string_var : ID\n                  | CONST_STRINGpredefined_method : START LPAREN RPAREN SEMICOLON\n                         | RESET LPAREN RPAREN SEMICOLON\n                         | END LPAREN RPAREN SEMICOLON\n                         | GIRA_IZQ LPAREN exp RPAREN SEMICOLON\n                         | GIRA_DER LPAREN exp RPAREN SEMICOLON\n                         | CAMINA LPAREN exp RPAREN SEMICOLON\n                         | SI_DIBUJA LPAREN RPAREN SEMICOLON\n                         | NO_DIBUJA LPAREN RPAREN SEMICOLON\n                         | DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON\n                         | DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON\n                         | DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON\n                         | COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,23,45,],[0,-1,-35,]),'ID':([2,6,7,13,14,15,16,17,18,19,22,24,38,40,44,45,46,48,49,50,51,52,53,54,71,73,75,76,79,80,81,83,84,85,86,87,91,92,93,96,97,98,99,101,104,107,113,135,141,142,143,144,145,146,147,148,149,150,151,152,154,155,160,161,162,166,167,168,173,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[3,11,-4,25,-33,-34,-45,-46,-47,-48,29,-73,55,-73,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-73,103,-2,-73,-6,29,-5,-73,-73,-73,-73,-73,29,29,29,29,29,29,133,-6,-3,-73,-73,-26,-73,-73,29,29,29,29,29,29,29,29,29,29,-49,-73,-76,-77,-78,-82,-83,29,200,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'SEMICOLON':([3,16,17,18,19,26,29,30,31,32,33,34,35,36,41,42,43,100,105,109,110,111,112,114,115,121,122,123,127,128,156,158,163,164,165,169,170,171,175,176,177,178,179,180,181,182,183,184,185,186,187,201,203,],[4,-45,-46,-47,-48,40,-66,-68,-69,-70,-71,-72,-58,-59,76,-25,-67,135,-61,-7,-10,-17,-20,-24,154,160,161,162,166,167,189,191,193,194,195,197,198,199,-8,-9,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-23,205,209,]),'VAR':([4,24,40,45,46,48,49,50,51,52,53,54,76,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[6,6,6,-35,6,-38,-39,-40,-41,-42,-43,-44,6,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'FUNC':([4,5,7,40,45,75,76,104,136,],[-73,9,-4,-73,-35,-2,-73,-3,9,]),'MAIN':([4,5,7,8,10,40,45,75,76,104,136,172,],[-73,-73,-4,12,-28,-73,-35,-2,-73,-3,-73,-27,]),'IF':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,56,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'PRINT':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,57,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'WHILE':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,58,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'START':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,59,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'RESET':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,60,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'END':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,61,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'GIRA_IZQ':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,62,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'GIRA_DER':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,63,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'CAMINA':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,64,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'SI_DIBUJA':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,65,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'NO_DIBUJA':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,66,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'DIBUJA_POLIGONO':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,67,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'DIBUJA_CIRCULO':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,68,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'DIBUJA_ESTRELLA':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,69,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'COLOR_PLUMA':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,70,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'RETURN':([7,24,38,40,45,46,48,49,50,51,52,53,54,75,76,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,71,-73,-35,-73,-38,-39,-40,-41,-42,-43,-44,-2,-73,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'RBRACE':([7,24,37,38,40,45,46,47,48,49,50,51,52,53,54,75,76,82,104,135,154,160,161,162,166,167,189,191,192,193,194,195,197,198,199,202,205,206,208,209,210,211,],[-4,-73,45,-73,-73,-35,-73,-37,-38,-39,-40,-41,-42,-43,-44,-2,-73,-36,-3,-26,-49,-76,-77,-78,-82,-83,-60,-56,-57,-79,-80,-81,-85,-86,-87,-73,-50,-55,-54,-84,-51,-53,]),'VOID':([9,],[15,]),'INT':([9,20,27,39,138,],[16,16,16,16,16,]),'FLOAT':([9,20,27,39,138,],[17,17,17,17,17,]),'STRING':([9,20,27,39,138,],[18,18,18,18,18,]),'BOOLEAN':([9,20,27,39,138,],[19,19,19,19,19,]),'COLON':([11,21,42,],[20,27,-25,]),'LBRACKET':([11,29,],[22,22,]),'LBRACE':([12,102,157,159,190,207,],[24,24,-52,24,24,24,]),'CONST_INT':([22,44,71,79,80,81,83,84,85,86,87,91,92,93,96,97,98,101,107,113,141,142,143,144,145,146,147,148,149,150,151,152,155,168,],[30,-73,-73,-6,30,-5,-73,-73,-73,-73,-73,30,30,30,30,30,30,-6,-73,-73,-73,-73,30,30,30,30,30,30,30,30,30,30,-73,30,]),'CONST_FLOAT':([22,44,71,79,80,81,83,84,85,86,87,91,92,93,96,97,98,101,107,113,141,142,143,144,145,146,147,148,149,150,151,152,155,168,],[31,-73,-73,-6,31,-5,-73,-73,-73,-73,-73,31,31,31,31,31,31,-6,-73,-73,-73,-73,31,31,31,31,31,31,31,31,31,31,-73,31,]),'CONST_STRING':([22,44,71,79,80,81,83,84,85,86,87,91,92,93,96,97,98,99,101,107,113,141,142,143,144,145,146,147,148,149,150,151,152,155,168,],[32,-73,-73,-6,32,-5,-73,-73,-73,-73,-73,32,32,32,32,32,32,134,-6,-73,-73,-73,-73,32,32,32,32,32,32,32,32,32,32,-73,32,]),'TRUE':([22,44,71,79,80,81,83,84,85,86,87,91,92,93,96,97,98,101,107,113,141,142,143,144,145,146,147,148,149,150,151,152,155,168,],[35,-73,-73,-6,35,-5,-73,-73,-73,-73,-73,35,35,35,35,35,35,-6,-73,-73,-73,-73,35,35,35,35,35,35,35,35,35,35,-73,35,]),'FALSE':([22,44,71,79,80,81,83,84,85,86,87,91,92,93,96,97,98,101,107,113,141,142,143,144,145,146,147,148,149,150,151,152,155,168,],[36,-73,-73,-6,36,-5,-73,-73,-73,-73,-73,36,36,36,36,36,36,-6,-73,-73,-73,-73,36,36,36,36,36,36,36,36,36,36,-73,36,]),'LPAREN':([25,29,44,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,79,80,81,83,84,85,86,87,91,92,93,96,97,98,101,107,113,116,141,142,143,144,145,146,147,148,149,150,151,152,155,168,],[39,44,-73,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,-73,-6,113,-5,-73,-73,-73,-73,-73,113,113,113,113,113,113,-6,-73,-73,155,-73,-73,113,113,113,113,113,113,113,113,113,113,-73,113,]),'RBRACKET':([28,29,30,31,32,33,34,35,36,42,43,105,],[42,-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,]),'TIMES':([29,30,31,32,33,34,35,36,42,43,105,112,114,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,151,-24,-23,]),'DIVIDES':([29,30,31,32,33,34,35,36,42,43,105,112,114,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,152,-24,-23,]),'PLUS':([29,30,31,32,33,34,35,36,42,43,105,111,112,114,185,186,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,149,-20,-24,-21,-22,-23,]),'MINUS':([29,30,31,32,33,34,35,36,42,43,105,111,112,114,185,186,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,150,-20,-24,-21,-22,-23,]),'GREATER_THAN':([29,30,31,32,33,34,35,36,42,43,105,110,111,112,114,183,184,185,186,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,143,-17,-20,-24,-18,-19,-21,-22,-23,]),'LESS_THAN':([29,30,31,32,33,34,35,36,42,43,105,110,111,112,114,183,184,185,186,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,144,-17,-20,-24,-18,-19,-21,-22,-23,]),'GREATER_OR_EQUAL_THAN':([29,30,31,32,33,34,35,36,42,43,105,110,111,112,114,183,184,185,186,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,145,-17,-20,-24,-18,-19,-21,-22,-23,]),'LESS_OR_EQUAL_THAN':([29,30,31,32,33,34,35,36,42,43,105,110,111,112,114,183,184,185,186,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,146,-17,-20,-24,-18,-19,-21,-22,-23,]),'EQUAL_THAN':([29,30,31,32,33,34,35,36,42,43,105,110,111,112,114,183,184,185,186,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,147,-17,-20,-24,-18,-19,-21,-22,-23,]),'NOT_EQUAL_THAN':([29,30,31,32,33,34,35,36,42,43,105,110,111,112,114,183,184,185,186,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,148,-17,-20,-24,-18,-19,-21,-22,-23,]),'AND':([29,30,31,32,33,34,35,36,42,43,105,109,110,111,112,114,177,178,179,180,181,182,183,184,185,186,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,141,-10,-17,-20,-24,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-23,]),'OR':([29,30,31,32,33,34,35,36,42,43,105,109,110,111,112,114,177,178,179,180,181,182,183,184,185,186,187,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,-61,142,-10,-17,-20,-24,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-23,]),'COMMA':([29,30,31,32,33,34,35,36,42,43,78,103,105,109,110,111,112,114,129,140,175,176,177,178,179,180,181,182,183,184,185,186,187,200,],[-66,-68,-69,-70,-71,-72,-58,-59,-25,-67,107,138,-61,-7,-10,-17,-20,-24,168,107,-8,-9,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-23,138,]),'RPAREN':([29,30,31,32,33,34,35,36,39,42,43,44,72,74,77,78,79,84,88,89,90,94,95,103,105,106,108,109,110,111,112,114,117,118,119,120,124,125,126,130,131,132,133,134,137,139,140,153,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,196,200,204,],[-66,-68,-69,-70,-71,-72,-58,-59,-73,-25,-67,-73,102,-30,105,-73,-63,-73,121,122,123,127,128,-73,-61,-62,-65,-7,-10,-17,-20,-24,156,157,158,159,163,164,165,169,170,171,-74,-75,-29,-32,-73,187,-64,-8,-9,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-23,201,203,-73,-31,]),'NOT':([44,71,83,84,85,86,87,107,113,141,142,155,],[81,81,81,81,81,81,81,81,81,81,81,81,]),'ELSE':([45,202,],[-35,207,]),'ASSIGN':([55,],[83,]),'READ':([83,],[116,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,24,40,46,76,],[5,38,75,38,104,]),'empty':([4,5,24,38,39,40,44,46,71,76,78,83,84,85,86,87,103,107,113,136,140,141,142,155,200,202,],[7,10,7,47,74,7,79,7,101,7,108,101,79,101,101,101,139,101,101,10,108,101,101,101,139,208,]),'functions':([5,136,],[8,172,]),'type_func':([9,],[13,]),'type':([9,20,27,39,138,],[14,26,41,73,173,]),'list':([11,29,],[21,43,]),'block':([12,102,159,190,207,],[23,136,192,202,211,]),'var_const':([22,80,91,92,93,96,97,98,143,144,145,146,147,148,149,150,151,152,168,],[28,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'boolean':([22,80,91,92,93,96,97,98,143,144,145,146,147,148,149,150,151,152,168,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'function':([22,80,91,92,93,96,97,98,143,144,145,146,147,148,149,150,151,152,168,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'statements':([24,46,],[37,82,]),'statement':([38,],[46,]),'assignment':([38,],[48,]),'condition':([38,],[49,]),'write':([38,],[50,]),'loop':([38,],[51,]),'method':([38,],[52,]),'predefined_method':([38,],[53,]),'return':([38,],[54,]),'params':([39,],[72,]),'args':([44,84,],[77,117,]),'expression_log':([44,71,83,84,85,86,87,107,113,141,142,155,],[78,100,115,78,118,119,120,140,153,175,176,188,]),'not':([44,71,83,84,85,86,87,107,113,141,142,155,],[80,80,80,80,80,80,80,80,80,80,80,80,]),'args_aux':([78,140,],[106,174,]),'expression':([80,],[109,]),'exp':([80,91,92,93,96,97,98,143,144,145,146,147,148,149,150,168,],[110,124,125,126,129,130,131,177,178,179,180,181,182,183,184,196,]),'term':([80,91,92,93,96,97,98,143,144,145,146,147,148,149,150,151,152,168,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,185,186,111,]),'factor':([80,91,92,93,96,97,98,143,144,145,146,147,148,149,150,151,152,168,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'string_var':([99,],[132,]),'params_aux':([103,200,],[137,204,]),'condition_point':([157,],[190,]),'else':([202,],[206,]),'condition_point2':([206,],[210,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON vars functions MAIN block','program',7,'p_program','kimba_parser.py',15),
  ('vars -> VAR ID COLON type SEMICOLON vars','vars',6,'p_vars','kimba_parser.py',23),
  ('vars -> VAR ID list COLON type SEMICOLON vars','vars',7,'p_vars','kimba_parser.py',24),
  ('vars -> empty','vars',1,'p_vars','kimba_parser.py',25),
  ('not -> NOT','not',1,'p_not','kimba_parser.py',28),
  ('not -> empty','not',1,'p_not','kimba_parser.py',29),
  ('expression_log -> not expression','expression_log',2,'p_expression_log','kimba_parser.py',32),
  ('expression_log -> not expression AND expression_log','expression_log',4,'p_expression_log','kimba_parser.py',33),
  ('expression_log -> not expression OR expression_log','expression_log',4,'p_expression_log','kimba_parser.py',34),
  ('expression -> exp','expression',1,'p_expression','kimba_parser.py',37),
  ('expression -> exp GREATER_THAN exp','expression',3,'p_expression','kimba_parser.py',38),
  ('expression -> exp LESS_THAN exp','expression',3,'p_expression','kimba_parser.py',39),
  ('expression -> exp GREATER_OR_EQUAL_THAN exp','expression',3,'p_expression','kimba_parser.py',40),
  ('expression -> exp LESS_OR_EQUAL_THAN exp','expression',3,'p_expression','kimba_parser.py',41),
  ('expression -> exp EQUAL_THAN exp','expression',3,'p_expression','kimba_parser.py',42),
  ('expression -> exp NOT_EQUAL_THAN exp','expression',3,'p_expression','kimba_parser.py',43),
  ('exp -> term','exp',1,'p_exp','kimba_parser.py',46),
  ('exp -> term PLUS exp','exp',3,'p_exp','kimba_parser.py',47),
  ('exp -> term MINUS exp','exp',3,'p_exp','kimba_parser.py',48),
  ('term -> factor','term',1,'p_term','kimba_parser.py',51),
  ('term -> factor TIMES term','term',3,'p_term','kimba_parser.py',52),
  ('term -> factor DIVIDES term','term',3,'p_term','kimba_parser.py',53),
  ('factor -> LPAREN expression_log RPAREN','factor',3,'p_factor','kimba_parser.py',56),
  ('factor -> var_const','factor',1,'p_factor','kimba_parser.py',57),
  ('list -> LBRACKET var_const RBRACKET','list',3,'p_list','kimba_parser.py',60),
  ('return -> RETURN expression_log SEMICOLON','return',3,'p_return','kimba_parser.py',63),
  ('functions -> FUNC type_func ID LPAREN params RPAREN block functions','functions',8,'p_functions','kimba_parser.py',69),
  ('functions -> empty','functions',1,'p_functions','kimba_parser.py',70),
  ('params -> type ID params_aux','params',3,'p_params','kimba_parser.py',76),
  ('params -> empty','params',1,'p_params','kimba_parser.py',77),
  ('params_aux -> COMMA type ID params_aux','params_aux',4,'p_params_aux','kimba_parser.py',80),
  ('params_aux -> empty','params_aux',1,'p_params_aux','kimba_parser.py',81),
  ('type_func -> type','type_func',1,'p_type_func','kimba_parser.py',84),
  ('type_func -> VOID','type_func',1,'p_type_func','kimba_parser.py',85),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','kimba_parser.py',89),
  ('statements -> vars statement statements','statements',3,'p_statements','kimba_parser.py',92),
  ('statements -> vars empty','statements',2,'p_statements','kimba_parser.py',93),
  ('statement -> assignment','statement',1,'p_statement','kimba_parser.py',96),
  ('statement -> condition','statement',1,'p_statement','kimba_parser.py',97),
  ('statement -> write','statement',1,'p_statement','kimba_parser.py',98),
  ('statement -> loop','statement',1,'p_statement','kimba_parser.py',99),
  ('statement -> method','statement',1,'p_statement','kimba_parser.py',100),
  ('statement -> predefined_method','statement',1,'p_statement','kimba_parser.py',101),
  ('statement -> return','statement',1,'p_statement','kimba_parser.py',102),
  ('type -> INT','type',1,'p_type','kimba_parser.py',105),
  ('type -> FLOAT','type',1,'p_type','kimba_parser.py',106),
  ('type -> STRING','type',1,'p_type','kimba_parser.py',107),
  ('type -> BOOLEAN','type',1,'p_type','kimba_parser.py',108),
  ('assignment -> ID ASSIGN expression_log SEMICOLON','assignment',4,'p_assignment','kimba_parser.py',112),
  ('assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON','assignment',7,'p_assignment','kimba_parser.py',113),
  ('condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2','condition',8,'p_condition','kimba_parser.py',119),
  ('condition_point -> <empty>','condition_point',0,'p_if_point','kimba_parser.py',122),
  ('else -> ELSE block','else',2,'p_else_point','kimba_parser.py',126),
  ('else -> empty','else',1,'p_else_point','kimba_parser.py',127),
  ('condition_point2 -> <empty>','condition_point2',0,'p_if_point2','kimba_parser.py',131),
  ('write -> PRINT LPAREN expression_log RPAREN SEMICOLON','write',5,'p_write','kimba_parser.py',134),
  ('loop -> WHILE LPAREN expression_log RPAREN block','loop',5,'p_loop','kimba_parser.py',140),
  ('boolean -> TRUE','boolean',1,'p_boolean','kimba_parser.py',146),
  ('boolean -> FALSE','boolean',1,'p_boolean','kimba_parser.py',147),
  ('method -> ID LPAREN args RPAREN SEMICOLON','method',5,'p_method','kimba_parser.py',151),
  ('function -> ID LPAREN args RPAREN','function',4,'p_function','kimba_parser.py',157),
  ('args -> expression_log args_aux','args',2,'p_args','kimba_parser.py',163),
  ('args -> empty','args',1,'p_args','kimba_parser.py',164),
  ('args_aux -> COMMA expression_log args_aux','args_aux',3,'p_args_aux','kimba_parser.py',170),
  ('args_aux -> empty','args_aux',1,'p_args_aux','kimba_parser.py',171),
  ('var_const -> ID','var_const',1,'p_var_const','kimba_parser.py',177),
  ('var_const -> ID list','var_const',2,'p_var_const','kimba_parser.py',178),
  ('var_const -> CONST_INT','var_const',1,'p_var_const','kimba_parser.py',179),
  ('var_const -> CONST_FLOAT','var_const',1,'p_var_const','kimba_parser.py',180),
  ('var_const -> CONST_STRING','var_const',1,'p_var_const','kimba_parser.py',181),
  ('var_const -> boolean','var_const',1,'p_var_const','kimba_parser.py',182),
  ('var_const -> function','var_const',1,'p_var_const','kimba_parser.py',183),
  ('empty -> <empty>','empty',0,'p_empty','kimba_parser.py',186),
  ('string_var -> ID','string_var',1,'p_string_var','kimba_parser.py',189),
  ('string_var -> CONST_STRING','string_var',1,'p_string_var','kimba_parser.py',190),
  ('predefined_method -> START LPAREN RPAREN SEMICOLON','predefined_method',4,'p_predefined_function_call','kimba_parser.py',195),
  ('predefined_method -> RESET LPAREN RPAREN SEMICOLON','predefined_method',4,'p_predefined_function_call','kimba_parser.py',196),
  ('predefined_method -> END LPAREN RPAREN SEMICOLON','predefined_method',4,'p_predefined_function_call','kimba_parser.py',197),
  ('predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',198),
  ('predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',199),
  ('predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',200),
  ('predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON','predefined_method',4,'p_predefined_function_call','kimba_parser.py',201),
  ('predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON','predefined_method',4,'p_predefined_function_call','kimba_parser.py',202),
  ('predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON','predefined_method',7,'p_predefined_function_call','kimba_parser.py',203),
  ('predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',204),
  ('predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',205),
  ('predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON','predefined_method',5,'p_predefined_function_call','kimba_parser.py',206),
]
