Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON vars functions MAIN block
Rule 2     vars -> VAR ID COLON type SEMICOLON vars
Rule 3     vars -> VAR ID list COLON type SEMICOLON vars
Rule 4     vars -> empty
Rule 5     not -> NOT
Rule 6     not -> empty
Rule 7     expression_log -> not expression
Rule 8     expression_log -> not expression AND expression_log
Rule 9     expression_log -> not expression OR expression_log
Rule 10    expression -> exp
Rule 11    expression -> exp GREATER_THAN exp
Rule 12    expression -> exp LESS_THAN exp
Rule 13    expression -> exp GREATER_OR_EQUAL_THAN exp
Rule 14    expression -> exp LESS_OR_EQUAL_THAN exp
Rule 15    expression -> exp EQUAL_THAN exp
Rule 16    expression -> exp NOT_EQUAL_THAN exp
Rule 17    exp -> term
Rule 18    exp -> term PLUS exp
Rule 19    exp -> term MINUS exp
Rule 20    term -> factor
Rule 21    term -> factor TIMES term
Rule 22    term -> factor DIVIDES term
Rule 23    factor -> LPAREN expression_log RPAREN
Rule 24    factor -> var_const
Rule 25    list -> LBRACKET var_const RBRACKET
Rule 26    return -> RETURN expression_log SEMICOLON
Rule 27    functions -> FUNC type_func ID LPAREN params RPAREN block functions
Rule 28    functions -> empty
Rule 29    params -> type ID params_aux
Rule 30    params -> empty
Rule 31    params_aux -> COMMA type ID params_aux
Rule 32    params_aux -> empty
Rule 33    type_func -> type
Rule 34    type_func -> VOID
Rule 35    block -> LBRACE statements RBRACE
Rule 36    statements -> vars statement statements
Rule 37    statements -> vars empty
Rule 38    statement -> assignment
Rule 39    statement -> condition
Rule 40    statement -> write
Rule 41    statement -> loop
Rule 42    statement -> method
Rule 43    statement -> predefined_method
Rule 44    statement -> return
Rule 45    type -> INT
Rule 46    type -> FLOAT
Rule 47    type -> STRING
Rule 48    type -> BOOLEAN
Rule 49    assignment -> ID ASSIGN expression_log SEMICOLON
Rule 50    assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON
Rule 51    condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2
Rule 52    condition_point -> <empty>
Rule 53    else -> ELSE block
Rule 54    else -> empty
Rule 55    condition_point2 -> <empty>
Rule 56    write -> PRINT LPAREN expression_log RPAREN SEMICOLON
Rule 57    loop -> WHILE LPAREN expression_log RPAREN block
Rule 58    boolean -> TRUE
Rule 59    boolean -> FALSE
Rule 60    method -> ID LPAREN args RPAREN SEMICOLON
Rule 61    function -> ID LPAREN args RPAREN
Rule 62    args -> expression_log args_aux
Rule 63    args -> empty
Rule 64    args_aux -> COMMA expression_log args_aux
Rule 65    args_aux -> empty
Rule 66    var_const -> ID
Rule 67    var_const -> ID list
Rule 68    var_const -> CONST_INT
Rule 69    var_const -> CONST_FLOAT
Rule 70    var_const -> CONST_STRING
Rule 71    var_const -> boolean
Rule 72    var_const -> function
Rule 73    empty -> <empty>
Rule 74    string_var -> ID
Rule 75    string_var -> CONST_STRING
Rule 76    predefined_method -> START LPAREN RPAREN SEMICOLON
Rule 77    predefined_method -> RESET LPAREN RPAREN SEMICOLON
Rule 78    predefined_method -> END LPAREN RPAREN SEMICOLON
Rule 79    predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON
Rule 80    predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON
Rule 81    predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON
Rule 82    predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON
Rule 83    predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON
Rule 84    predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON
Rule 85    predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON
Rule 86    predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON
Rule 87    predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON

Terminals, with rules where they appear

AND                  : 8
ASSIGN               : 49 50
BOOLEAN              : 48
CAMINA               : 81
COLON                : 2 3
COLOR_PLUMA          : 87
COMMA                : 31 64 84
CONST_FLOAT          : 69
CONST_INT            : 68
CONST_STRING         : 70 75
DIBUJA_CIRCULO       : 85
DIBUJA_ESTRELLA      : 86
DIBUJA_POLIGONO      : 84
DIVIDES              : 22
ELSE                 : 53
END                  : 78
EQUAL_THAN           : 15
FALSE                : 59
FLOAT                : 46
FUNC                 : 27
GIRA_DER             : 80
GIRA_IZQ             : 79
GREATER_OR_EQUAL_THAN : 13
GREATER_THAN         : 11
ID                   : 1 2 3 27 29 31 49 50 60 61 66 67 74
IF                   : 51
INT                  : 45
LBRACE               : 35
LBRACKET             : 25
LESS_OR_EQUAL_THAN   : 14
LESS_THAN            : 12
LPAREN               : 23 27 50 51 56 57 60 61 76 77 78 79 80 81 82 83 84 85 86 87
MAIN                 : 1
MINUS                : 19
NOT                  : 5
NOT_EQUAL_THAN       : 16
NO_DIBUJA            : 83
OR                   : 9
PLUS                 : 18
PRINT                : 56
PROGRAM              : 1
RBRACE               : 35
RBRACKET             : 25
READ                 : 50
RESET                : 77
RETURN               : 26
RPAREN               : 23 27 50 51 56 57 60 61 76 77 78 79 80 81 82 83 84 85 86 87
SEMICOLON            : 1 2 3 26 49 50 56 60 76 77 78 79 80 81 82 83 84 85 86 87
SI_DIBUJA            : 82
START                : 76
STRING               : 47
TIMES                : 21
TRUE                 : 58
VAR                  : 2 3
VOID                 : 34
WHILE                : 57
error                : 

Nonterminals, with rules where they appear

args                 : 60 61
args_aux             : 62 64
assignment           : 38
block                : 1 27 51 53 57
boolean              : 71
condition            : 39
condition_point      : 51
condition_point2     : 51
else                 : 51
empty                : 4 6 28 30 32 37 54 63 65
exp                  : 10 11 11 12 12 13 13 14 14 15 15 16 16 18 19 79 80 81 84 84 85 86
expression           : 7 8 9
expression_log       : 8 9 23 26 49 50 51 56 57 62 64
factor               : 20 21 22
function             : 72
functions            : 1 27
list                 : 3 67
loop                 : 41
method               : 42
not                  : 7 8 9
params               : 27
params_aux           : 29 31
predefined_method    : 43
program              : 0
return               : 44
statement            : 36
statements           : 35 36
string_var           : 87
term                 : 17 18 19 21 22
type                 : 2 3 29 31 33
type_func            : 27
var_const            : 24 25
vars                 : 1 2 3 36 37
write                : 40

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON vars functions MAIN block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON vars functions MAIN block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON vars functions MAIN block

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . vars functions MAIN block
    (2) vars -> . VAR ID COLON type SEMICOLON vars
    (3) vars -> . VAR ID list COLON type SEMICOLON vars
    (4) vars -> . empty
    (73) empty -> .

    VAR             shift and go to state 6
    FUNC            reduce using rule 73 (empty -> .)
    MAIN            reduce using rule 73 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON vars . functions MAIN block
    (27) functions -> . FUNC type_func ID LPAREN params RPAREN block functions
    (28) functions -> . empty
    (73) empty -> .

    FUNC            shift and go to state 9
    MAIN            reduce using rule 73 (empty -> .)

    functions                      shift and go to state 8
    empty                          shift and go to state 10

state 6

    (2) vars -> VAR . ID COLON type SEMICOLON vars
    (3) vars -> VAR . ID list COLON type SEMICOLON vars

    ID              shift and go to state 11


state 7

    (4) vars -> empty .

    FUNC            reduce using rule 4 (vars -> empty .)
    MAIN            reduce using rule 4 (vars -> empty .)
    ID              reduce using rule 4 (vars -> empty .)
    IF              reduce using rule 4 (vars -> empty .)
    PRINT           reduce using rule 4 (vars -> empty .)
    WHILE           reduce using rule 4 (vars -> empty .)
    START           reduce using rule 4 (vars -> empty .)
    RESET           reduce using rule 4 (vars -> empty .)
    END             reduce using rule 4 (vars -> empty .)
    GIRA_IZQ        reduce using rule 4 (vars -> empty .)
    GIRA_DER        reduce using rule 4 (vars -> empty .)
    CAMINA          reduce using rule 4 (vars -> empty .)
    SI_DIBUJA       reduce using rule 4 (vars -> empty .)
    NO_DIBUJA       reduce using rule 4 (vars -> empty .)
    DIBUJA_POLIGONO reduce using rule 4 (vars -> empty .)
    DIBUJA_CIRCULO  reduce using rule 4 (vars -> empty .)
    DIBUJA_ESTRELLA reduce using rule 4 (vars -> empty .)
    COLOR_PLUMA     reduce using rule 4 (vars -> empty .)
    RETURN          reduce using rule 4 (vars -> empty .)
    RBRACE          reduce using rule 4 (vars -> empty .)


state 8

    (1) program -> PROGRAM ID SEMICOLON vars functions . MAIN block

    MAIN            shift and go to state 12


state 9

    (27) functions -> FUNC . type_func ID LPAREN params RPAREN block functions
    (33) type_func -> . type
    (34) type_func -> . VOID
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOLEAN

    VOID            shift and go to state 15
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19

    type_func                      shift and go to state 13
    type                           shift and go to state 14

state 10

    (28) functions -> empty .

    MAIN            reduce using rule 28 (functions -> empty .)


state 11

    (2) vars -> VAR ID . COLON type SEMICOLON vars
    (3) vars -> VAR ID . list COLON type SEMICOLON vars
    (25) list -> . LBRACKET var_const RBRACKET

    COLON           shift and go to state 20
    LBRACKET        shift and go to state 22

    list                           shift and go to state 21

state 12

    (1) program -> PROGRAM ID SEMICOLON vars functions MAIN . block
    (35) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 23

state 13

    (27) functions -> FUNC type_func . ID LPAREN params RPAREN block functions

    ID              shift and go to state 25


state 14

    (33) type_func -> type .

    ID              reduce using rule 33 (type_func -> type .)


state 15

    (34) type_func -> VOID .

    ID              reduce using rule 34 (type_func -> VOID .)


state 16

    (45) type -> INT .

    ID              reduce using rule 45 (type -> INT .)
    SEMICOLON       reduce using rule 45 (type -> INT .)


state 17

    (46) type -> FLOAT .

    ID              reduce using rule 46 (type -> FLOAT .)
    SEMICOLON       reduce using rule 46 (type -> FLOAT .)


state 18

    (47) type -> STRING .

    ID              reduce using rule 47 (type -> STRING .)
    SEMICOLON       reduce using rule 47 (type -> STRING .)


state 19

    (48) type -> BOOLEAN .

    ID              reduce using rule 48 (type -> BOOLEAN .)
    SEMICOLON       reduce using rule 48 (type -> BOOLEAN .)


state 20

    (2) vars -> VAR ID COLON . type SEMICOLON vars
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOLEAN

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19

    type                           shift and go to state 26

state 21

    (3) vars -> VAR ID list . COLON type SEMICOLON vars

    COLON           shift and go to state 27


state 22

    (25) list -> LBRACKET . var_const RBRACKET
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    var_const                      shift and go to state 28
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 23

    (1) program -> PROGRAM ID SEMICOLON vars functions MAIN block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON vars functions MAIN block .)


state 24

    (35) block -> LBRACE . statements RBRACE
    (36) statements -> . vars statement statements
    (37) statements -> . vars empty
    (2) vars -> . VAR ID COLON type SEMICOLON vars
    (3) vars -> . VAR ID list COLON type SEMICOLON vars
    (4) vars -> . empty
    (73) empty -> .

    VAR             shift and go to state 6
    ID              reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    START           reduce using rule 73 (empty -> .)
    RESET           reduce using rule 73 (empty -> .)
    END             reduce using rule 73 (empty -> .)
    GIRA_IZQ        reduce using rule 73 (empty -> .)
    GIRA_DER        reduce using rule 73 (empty -> .)
    CAMINA          reduce using rule 73 (empty -> .)
    SI_DIBUJA       reduce using rule 73 (empty -> .)
    NO_DIBUJA       reduce using rule 73 (empty -> .)
    DIBUJA_POLIGONO reduce using rule 73 (empty -> .)
    DIBUJA_CIRCULO  reduce using rule 73 (empty -> .)
    DIBUJA_ESTRELLA reduce using rule 73 (empty -> .)
    COLOR_PLUMA     reduce using rule 73 (empty -> .)
    RETURN          reduce using rule 73 (empty -> .)
    RBRACE          reduce using rule 73 (empty -> .)

    statements                     shift and go to state 37
    vars                           shift and go to state 38
    empty                          shift and go to state 7

state 25

    (27) functions -> FUNC type_func ID . LPAREN params RPAREN block functions

    LPAREN          shift and go to state 39


state 26

    (2) vars -> VAR ID COLON type . SEMICOLON vars

    SEMICOLON       shift and go to state 40


state 27

    (3) vars -> VAR ID list COLON . type SEMICOLON vars
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOLEAN

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19

    type                           shift and go to state 41

state 28

    (25) list -> LBRACKET var_const . RBRACKET

    RBRACKET        shift and go to state 42


state 29

    (66) var_const -> ID .
    (67) var_const -> ID . list
    (61) function -> ID . LPAREN args RPAREN
    (25) list -> . LBRACKET var_const RBRACKET

    RBRACKET        reduce using rule 66 (var_const -> ID .)
    TIMES           reduce using rule 66 (var_const -> ID .)
    DIVIDES         reduce using rule 66 (var_const -> ID .)
    PLUS            reduce using rule 66 (var_const -> ID .)
    MINUS           reduce using rule 66 (var_const -> ID .)
    GREATER_THAN    reduce using rule 66 (var_const -> ID .)
    LESS_THAN       reduce using rule 66 (var_const -> ID .)
    GREATER_OR_EQUAL_THAN reduce using rule 66 (var_const -> ID .)
    LESS_OR_EQUAL_THAN reduce using rule 66 (var_const -> ID .)
    EQUAL_THAN      reduce using rule 66 (var_const -> ID .)
    NOT_EQUAL_THAN  reduce using rule 66 (var_const -> ID .)
    AND             reduce using rule 66 (var_const -> ID .)
    OR              reduce using rule 66 (var_const -> ID .)
    COMMA           reduce using rule 66 (var_const -> ID .)
    RPAREN          reduce using rule 66 (var_const -> ID .)
    SEMICOLON       reduce using rule 66 (var_const -> ID .)
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 22

    list                           shift and go to state 43

state 30

    (68) var_const -> CONST_INT .

    RBRACKET        reduce using rule 68 (var_const -> CONST_INT .)
    TIMES           reduce using rule 68 (var_const -> CONST_INT .)
    DIVIDES         reduce using rule 68 (var_const -> CONST_INT .)
    PLUS            reduce using rule 68 (var_const -> CONST_INT .)
    MINUS           reduce using rule 68 (var_const -> CONST_INT .)
    GREATER_THAN    reduce using rule 68 (var_const -> CONST_INT .)
    LESS_THAN       reduce using rule 68 (var_const -> CONST_INT .)
    GREATER_OR_EQUAL_THAN reduce using rule 68 (var_const -> CONST_INT .)
    LESS_OR_EQUAL_THAN reduce using rule 68 (var_const -> CONST_INT .)
    EQUAL_THAN      reduce using rule 68 (var_const -> CONST_INT .)
    NOT_EQUAL_THAN  reduce using rule 68 (var_const -> CONST_INT .)
    AND             reduce using rule 68 (var_const -> CONST_INT .)
    OR              reduce using rule 68 (var_const -> CONST_INT .)
    COMMA           reduce using rule 68 (var_const -> CONST_INT .)
    RPAREN          reduce using rule 68 (var_const -> CONST_INT .)
    SEMICOLON       reduce using rule 68 (var_const -> CONST_INT .)


state 31

    (69) var_const -> CONST_FLOAT .

    RBRACKET        reduce using rule 69 (var_const -> CONST_FLOAT .)
    TIMES           reduce using rule 69 (var_const -> CONST_FLOAT .)
    DIVIDES         reduce using rule 69 (var_const -> CONST_FLOAT .)
    PLUS            reduce using rule 69 (var_const -> CONST_FLOAT .)
    MINUS           reduce using rule 69 (var_const -> CONST_FLOAT .)
    GREATER_THAN    reduce using rule 69 (var_const -> CONST_FLOAT .)
    LESS_THAN       reduce using rule 69 (var_const -> CONST_FLOAT .)
    GREATER_OR_EQUAL_THAN reduce using rule 69 (var_const -> CONST_FLOAT .)
    LESS_OR_EQUAL_THAN reduce using rule 69 (var_const -> CONST_FLOAT .)
    EQUAL_THAN      reduce using rule 69 (var_const -> CONST_FLOAT .)
    NOT_EQUAL_THAN  reduce using rule 69 (var_const -> CONST_FLOAT .)
    AND             reduce using rule 69 (var_const -> CONST_FLOAT .)
    OR              reduce using rule 69 (var_const -> CONST_FLOAT .)
    COMMA           reduce using rule 69 (var_const -> CONST_FLOAT .)
    RPAREN          reduce using rule 69 (var_const -> CONST_FLOAT .)
    SEMICOLON       reduce using rule 69 (var_const -> CONST_FLOAT .)


state 32

    (70) var_const -> CONST_STRING .

    RBRACKET        reduce using rule 70 (var_const -> CONST_STRING .)
    TIMES           reduce using rule 70 (var_const -> CONST_STRING .)
    DIVIDES         reduce using rule 70 (var_const -> CONST_STRING .)
    PLUS            reduce using rule 70 (var_const -> CONST_STRING .)
    MINUS           reduce using rule 70 (var_const -> CONST_STRING .)
    GREATER_THAN    reduce using rule 70 (var_const -> CONST_STRING .)
    LESS_THAN       reduce using rule 70 (var_const -> CONST_STRING .)
    GREATER_OR_EQUAL_THAN reduce using rule 70 (var_const -> CONST_STRING .)
    LESS_OR_EQUAL_THAN reduce using rule 70 (var_const -> CONST_STRING .)
    EQUAL_THAN      reduce using rule 70 (var_const -> CONST_STRING .)
    NOT_EQUAL_THAN  reduce using rule 70 (var_const -> CONST_STRING .)
    AND             reduce using rule 70 (var_const -> CONST_STRING .)
    OR              reduce using rule 70 (var_const -> CONST_STRING .)
    COMMA           reduce using rule 70 (var_const -> CONST_STRING .)
    RPAREN          reduce using rule 70 (var_const -> CONST_STRING .)
    SEMICOLON       reduce using rule 70 (var_const -> CONST_STRING .)


state 33

    (71) var_const -> boolean .

    RBRACKET        reduce using rule 71 (var_const -> boolean .)
    TIMES           reduce using rule 71 (var_const -> boolean .)
    DIVIDES         reduce using rule 71 (var_const -> boolean .)
    PLUS            reduce using rule 71 (var_const -> boolean .)
    MINUS           reduce using rule 71 (var_const -> boolean .)
    GREATER_THAN    reduce using rule 71 (var_const -> boolean .)
    LESS_THAN       reduce using rule 71 (var_const -> boolean .)
    GREATER_OR_EQUAL_THAN reduce using rule 71 (var_const -> boolean .)
    LESS_OR_EQUAL_THAN reduce using rule 71 (var_const -> boolean .)
    EQUAL_THAN      reduce using rule 71 (var_const -> boolean .)
    NOT_EQUAL_THAN  reduce using rule 71 (var_const -> boolean .)
    AND             reduce using rule 71 (var_const -> boolean .)
    OR              reduce using rule 71 (var_const -> boolean .)
    COMMA           reduce using rule 71 (var_const -> boolean .)
    RPAREN          reduce using rule 71 (var_const -> boolean .)
    SEMICOLON       reduce using rule 71 (var_const -> boolean .)


state 34

    (72) var_const -> function .

    RBRACKET        reduce using rule 72 (var_const -> function .)
    TIMES           reduce using rule 72 (var_const -> function .)
    DIVIDES         reduce using rule 72 (var_const -> function .)
    PLUS            reduce using rule 72 (var_const -> function .)
    MINUS           reduce using rule 72 (var_const -> function .)
    GREATER_THAN    reduce using rule 72 (var_const -> function .)
    LESS_THAN       reduce using rule 72 (var_const -> function .)
    GREATER_OR_EQUAL_THAN reduce using rule 72 (var_const -> function .)
    LESS_OR_EQUAL_THAN reduce using rule 72 (var_const -> function .)
    EQUAL_THAN      reduce using rule 72 (var_const -> function .)
    NOT_EQUAL_THAN  reduce using rule 72 (var_const -> function .)
    AND             reduce using rule 72 (var_const -> function .)
    OR              reduce using rule 72 (var_const -> function .)
    COMMA           reduce using rule 72 (var_const -> function .)
    RPAREN          reduce using rule 72 (var_const -> function .)
    SEMICOLON       reduce using rule 72 (var_const -> function .)


state 35

    (58) boolean -> TRUE .

    RBRACKET        reduce using rule 58 (boolean -> TRUE .)
    TIMES           reduce using rule 58 (boolean -> TRUE .)
    DIVIDES         reduce using rule 58 (boolean -> TRUE .)
    PLUS            reduce using rule 58 (boolean -> TRUE .)
    MINUS           reduce using rule 58 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 58 (boolean -> TRUE .)
    LESS_THAN       reduce using rule 58 (boolean -> TRUE .)
    GREATER_OR_EQUAL_THAN reduce using rule 58 (boolean -> TRUE .)
    LESS_OR_EQUAL_THAN reduce using rule 58 (boolean -> TRUE .)
    EQUAL_THAN      reduce using rule 58 (boolean -> TRUE .)
    NOT_EQUAL_THAN  reduce using rule 58 (boolean -> TRUE .)
    AND             reduce using rule 58 (boolean -> TRUE .)
    OR              reduce using rule 58 (boolean -> TRUE .)
    COMMA           reduce using rule 58 (boolean -> TRUE .)
    RPAREN          reduce using rule 58 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 58 (boolean -> TRUE .)


state 36

    (59) boolean -> FALSE .

    RBRACKET        reduce using rule 59 (boolean -> FALSE .)
    TIMES           reduce using rule 59 (boolean -> FALSE .)
    DIVIDES         reduce using rule 59 (boolean -> FALSE .)
    PLUS            reduce using rule 59 (boolean -> FALSE .)
    MINUS           reduce using rule 59 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 59 (boolean -> FALSE .)
    LESS_THAN       reduce using rule 59 (boolean -> FALSE .)
    GREATER_OR_EQUAL_THAN reduce using rule 59 (boolean -> FALSE .)
    LESS_OR_EQUAL_THAN reduce using rule 59 (boolean -> FALSE .)
    EQUAL_THAN      reduce using rule 59 (boolean -> FALSE .)
    NOT_EQUAL_THAN  reduce using rule 59 (boolean -> FALSE .)
    AND             reduce using rule 59 (boolean -> FALSE .)
    OR              reduce using rule 59 (boolean -> FALSE .)
    COMMA           reduce using rule 59 (boolean -> FALSE .)
    RPAREN          reduce using rule 59 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 59 (boolean -> FALSE .)


state 37

    (35) block -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 45


state 38

    (36) statements -> vars . statement statements
    (37) statements -> vars . empty
    (38) statement -> . assignment
    (39) statement -> . condition
    (40) statement -> . write
    (41) statement -> . loop
    (42) statement -> . method
    (43) statement -> . predefined_method
    (44) statement -> . return
    (73) empty -> .
    (49) assignment -> . ID ASSIGN expression_log SEMICOLON
    (50) assignment -> . ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON
    (51) condition -> . IF LPAREN expression_log RPAREN condition_point block else condition_point2
    (56) write -> . PRINT LPAREN expression_log RPAREN SEMICOLON
    (57) loop -> . WHILE LPAREN expression_log RPAREN block
    (60) method -> . ID LPAREN args RPAREN SEMICOLON
    (76) predefined_method -> . START LPAREN RPAREN SEMICOLON
    (77) predefined_method -> . RESET LPAREN RPAREN SEMICOLON
    (78) predefined_method -> . END LPAREN RPAREN SEMICOLON
    (79) predefined_method -> . GIRA_IZQ LPAREN exp RPAREN SEMICOLON
    (80) predefined_method -> . GIRA_DER LPAREN exp RPAREN SEMICOLON
    (81) predefined_method -> . CAMINA LPAREN exp RPAREN SEMICOLON
    (82) predefined_method -> . SI_DIBUJA LPAREN RPAREN SEMICOLON
    (83) predefined_method -> . NO_DIBUJA LPAREN RPAREN SEMICOLON
    (84) predefined_method -> . DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON
    (85) predefined_method -> . DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON
    (86) predefined_method -> . DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON
    (87) predefined_method -> . COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON
    (26) return -> . RETURN expression_log SEMICOLON

    RBRACE          reduce using rule 73 (empty -> .)
    ID              shift and go to state 55
    IF              shift and go to state 56
    PRINT           shift and go to state 57
    WHILE           shift and go to state 58
    START           shift and go to state 59
    RESET           shift and go to state 60
    END             shift and go to state 61
    GIRA_IZQ        shift and go to state 62
    GIRA_DER        shift and go to state 63
    CAMINA          shift and go to state 64
    SI_DIBUJA       shift and go to state 65
    NO_DIBUJA       shift and go to state 66
    DIBUJA_POLIGONO shift and go to state 67
    DIBUJA_CIRCULO  shift and go to state 68
    DIBUJA_ESTRELLA shift and go to state 69
    COLOR_PLUMA     shift and go to state 70
    RETURN          shift and go to state 71

    statement                      shift and go to state 46
    empty                          shift and go to state 47
    assignment                     shift and go to state 48
    condition                      shift and go to state 49
    write                          shift and go to state 50
    loop                           shift and go to state 51
    method                         shift and go to state 52
    predefined_method              shift and go to state 53
    return                         shift and go to state 54

state 39

    (27) functions -> FUNC type_func ID LPAREN . params RPAREN block functions
    (29) params -> . type ID params_aux
    (30) params -> . empty
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOLEAN
    (73) empty -> .

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    RPAREN          reduce using rule 73 (empty -> .)

    params                         shift and go to state 72
    type                           shift and go to state 73
    empty                          shift and go to state 74

state 40

    (2) vars -> VAR ID COLON type SEMICOLON . vars
    (2) vars -> . VAR ID COLON type SEMICOLON vars
    (3) vars -> . VAR ID list COLON type SEMICOLON vars
    (4) vars -> . empty
    (73) empty -> .

    VAR             shift and go to state 6
    FUNC            reduce using rule 73 (empty -> .)
    MAIN            reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    START           reduce using rule 73 (empty -> .)
    RESET           reduce using rule 73 (empty -> .)
    END             reduce using rule 73 (empty -> .)
    GIRA_IZQ        reduce using rule 73 (empty -> .)
    GIRA_DER        reduce using rule 73 (empty -> .)
    CAMINA          reduce using rule 73 (empty -> .)
    SI_DIBUJA       reduce using rule 73 (empty -> .)
    NO_DIBUJA       reduce using rule 73 (empty -> .)
    DIBUJA_POLIGONO reduce using rule 73 (empty -> .)
    DIBUJA_CIRCULO  reduce using rule 73 (empty -> .)
    DIBUJA_ESTRELLA reduce using rule 73 (empty -> .)
    COLOR_PLUMA     reduce using rule 73 (empty -> .)
    RETURN          reduce using rule 73 (empty -> .)
    RBRACE          reduce using rule 73 (empty -> .)

    vars                           shift and go to state 75
    empty                          shift and go to state 7

state 41

    (3) vars -> VAR ID list COLON type . SEMICOLON vars

    SEMICOLON       shift and go to state 76


state 42

    (25) list -> LBRACKET var_const RBRACKET .

    COLON           reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    RBRACKET        reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    TIMES           reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    DIVIDES         reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    PLUS            reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    MINUS           reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    GREATER_THAN    reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    LESS_THAN       reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    GREATER_OR_EQUAL_THAN reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    LESS_OR_EQUAL_THAN reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    EQUAL_THAN      reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    NOT_EQUAL_THAN  reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    AND             reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    OR              reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    COMMA           reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    RPAREN          reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)
    SEMICOLON       reduce using rule 25 (list -> LBRACKET var_const RBRACKET .)


state 43

    (67) var_const -> ID list .

    RBRACKET        reduce using rule 67 (var_const -> ID list .)
    TIMES           reduce using rule 67 (var_const -> ID list .)
    DIVIDES         reduce using rule 67 (var_const -> ID list .)
    PLUS            reduce using rule 67 (var_const -> ID list .)
    MINUS           reduce using rule 67 (var_const -> ID list .)
    GREATER_THAN    reduce using rule 67 (var_const -> ID list .)
    LESS_THAN       reduce using rule 67 (var_const -> ID list .)
    GREATER_OR_EQUAL_THAN reduce using rule 67 (var_const -> ID list .)
    LESS_OR_EQUAL_THAN reduce using rule 67 (var_const -> ID list .)
    EQUAL_THAN      reduce using rule 67 (var_const -> ID list .)
    NOT_EQUAL_THAN  reduce using rule 67 (var_const -> ID list .)
    AND             reduce using rule 67 (var_const -> ID list .)
    OR              reduce using rule 67 (var_const -> ID list .)
    COMMA           reduce using rule 67 (var_const -> ID list .)
    RPAREN          reduce using rule 67 (var_const -> ID list .)
    SEMICOLON       reduce using rule 67 (var_const -> ID list .)


state 44

    (61) function -> ID LPAREN . args RPAREN
    (62) args -> . expression_log args_aux
    (63) args -> . empty
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (73) empty -> .
    (5) not -> . NOT
    (6) not -> . empty

    RPAREN          reduce using rule 73 (empty -> .)
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)
    NOT             shift and go to state 81

    args                           shift and go to state 77
    expression_log                 shift and go to state 78
    empty                          shift and go to state 79
    not                            shift and go to state 80

state 45

    (35) block -> LBRACE statements RBRACE .

    $end            reduce using rule 35 (block -> LBRACE statements RBRACE .)
    FUNC            reduce using rule 35 (block -> LBRACE statements RBRACE .)
    MAIN            reduce using rule 35 (block -> LBRACE statements RBRACE .)
    VAR             reduce using rule 35 (block -> LBRACE statements RBRACE .)
    ID              reduce using rule 35 (block -> LBRACE statements RBRACE .)
    IF              reduce using rule 35 (block -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 35 (block -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 35 (block -> LBRACE statements RBRACE .)
    START           reduce using rule 35 (block -> LBRACE statements RBRACE .)
    RESET           reduce using rule 35 (block -> LBRACE statements RBRACE .)
    END             reduce using rule 35 (block -> LBRACE statements RBRACE .)
    GIRA_IZQ        reduce using rule 35 (block -> LBRACE statements RBRACE .)
    GIRA_DER        reduce using rule 35 (block -> LBRACE statements RBRACE .)
    CAMINA          reduce using rule 35 (block -> LBRACE statements RBRACE .)
    SI_DIBUJA       reduce using rule 35 (block -> LBRACE statements RBRACE .)
    NO_DIBUJA       reduce using rule 35 (block -> LBRACE statements RBRACE .)
    DIBUJA_POLIGONO reduce using rule 35 (block -> LBRACE statements RBRACE .)
    DIBUJA_CIRCULO  reduce using rule 35 (block -> LBRACE statements RBRACE .)
    DIBUJA_ESTRELLA reduce using rule 35 (block -> LBRACE statements RBRACE .)
    COLOR_PLUMA     reduce using rule 35 (block -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 35 (block -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 35 (block -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 35 (block -> LBRACE statements RBRACE .)


state 46

    (36) statements -> vars statement . statements
    (36) statements -> . vars statement statements
    (37) statements -> . vars empty
    (2) vars -> . VAR ID COLON type SEMICOLON vars
    (3) vars -> . VAR ID list COLON type SEMICOLON vars
    (4) vars -> . empty
    (73) empty -> .

    VAR             shift and go to state 6
    ID              reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    START           reduce using rule 73 (empty -> .)
    RESET           reduce using rule 73 (empty -> .)
    END             reduce using rule 73 (empty -> .)
    GIRA_IZQ        reduce using rule 73 (empty -> .)
    GIRA_DER        reduce using rule 73 (empty -> .)
    CAMINA          reduce using rule 73 (empty -> .)
    SI_DIBUJA       reduce using rule 73 (empty -> .)
    NO_DIBUJA       reduce using rule 73 (empty -> .)
    DIBUJA_POLIGONO reduce using rule 73 (empty -> .)
    DIBUJA_CIRCULO  reduce using rule 73 (empty -> .)
    DIBUJA_ESTRELLA reduce using rule 73 (empty -> .)
    COLOR_PLUMA     reduce using rule 73 (empty -> .)
    RETURN          reduce using rule 73 (empty -> .)
    RBRACE          reduce using rule 73 (empty -> .)

    vars                           shift and go to state 38
    statements                     shift and go to state 82
    empty                          shift and go to state 7

state 47

    (37) statements -> vars empty .

    RBRACE          reduce using rule 37 (statements -> vars empty .)


state 48

    (38) statement -> assignment .

    VAR             reduce using rule 38 (statement -> assignment .)
    ID              reduce using rule 38 (statement -> assignment .)
    IF              reduce using rule 38 (statement -> assignment .)
    PRINT           reduce using rule 38 (statement -> assignment .)
    WHILE           reduce using rule 38 (statement -> assignment .)
    START           reduce using rule 38 (statement -> assignment .)
    RESET           reduce using rule 38 (statement -> assignment .)
    END             reduce using rule 38 (statement -> assignment .)
    GIRA_IZQ        reduce using rule 38 (statement -> assignment .)
    GIRA_DER        reduce using rule 38 (statement -> assignment .)
    CAMINA          reduce using rule 38 (statement -> assignment .)
    SI_DIBUJA       reduce using rule 38 (statement -> assignment .)
    NO_DIBUJA       reduce using rule 38 (statement -> assignment .)
    DIBUJA_POLIGONO reduce using rule 38 (statement -> assignment .)
    DIBUJA_CIRCULO  reduce using rule 38 (statement -> assignment .)
    DIBUJA_ESTRELLA reduce using rule 38 (statement -> assignment .)
    COLOR_PLUMA     reduce using rule 38 (statement -> assignment .)
    RETURN          reduce using rule 38 (statement -> assignment .)
    RBRACE          reduce using rule 38 (statement -> assignment .)


state 49

    (39) statement -> condition .

    VAR             reduce using rule 39 (statement -> condition .)
    ID              reduce using rule 39 (statement -> condition .)
    IF              reduce using rule 39 (statement -> condition .)
    PRINT           reduce using rule 39 (statement -> condition .)
    WHILE           reduce using rule 39 (statement -> condition .)
    START           reduce using rule 39 (statement -> condition .)
    RESET           reduce using rule 39 (statement -> condition .)
    END             reduce using rule 39 (statement -> condition .)
    GIRA_IZQ        reduce using rule 39 (statement -> condition .)
    GIRA_DER        reduce using rule 39 (statement -> condition .)
    CAMINA          reduce using rule 39 (statement -> condition .)
    SI_DIBUJA       reduce using rule 39 (statement -> condition .)
    NO_DIBUJA       reduce using rule 39 (statement -> condition .)
    DIBUJA_POLIGONO reduce using rule 39 (statement -> condition .)
    DIBUJA_CIRCULO  reduce using rule 39 (statement -> condition .)
    DIBUJA_ESTRELLA reduce using rule 39 (statement -> condition .)
    COLOR_PLUMA     reduce using rule 39 (statement -> condition .)
    RETURN          reduce using rule 39 (statement -> condition .)
    RBRACE          reduce using rule 39 (statement -> condition .)


state 50

    (40) statement -> write .

    VAR             reduce using rule 40 (statement -> write .)
    ID              reduce using rule 40 (statement -> write .)
    IF              reduce using rule 40 (statement -> write .)
    PRINT           reduce using rule 40 (statement -> write .)
    WHILE           reduce using rule 40 (statement -> write .)
    START           reduce using rule 40 (statement -> write .)
    RESET           reduce using rule 40 (statement -> write .)
    END             reduce using rule 40 (statement -> write .)
    GIRA_IZQ        reduce using rule 40 (statement -> write .)
    GIRA_DER        reduce using rule 40 (statement -> write .)
    CAMINA          reduce using rule 40 (statement -> write .)
    SI_DIBUJA       reduce using rule 40 (statement -> write .)
    NO_DIBUJA       reduce using rule 40 (statement -> write .)
    DIBUJA_POLIGONO reduce using rule 40 (statement -> write .)
    DIBUJA_CIRCULO  reduce using rule 40 (statement -> write .)
    DIBUJA_ESTRELLA reduce using rule 40 (statement -> write .)
    COLOR_PLUMA     reduce using rule 40 (statement -> write .)
    RETURN          reduce using rule 40 (statement -> write .)
    RBRACE          reduce using rule 40 (statement -> write .)


state 51

    (41) statement -> loop .

    VAR             reduce using rule 41 (statement -> loop .)
    ID              reduce using rule 41 (statement -> loop .)
    IF              reduce using rule 41 (statement -> loop .)
    PRINT           reduce using rule 41 (statement -> loop .)
    WHILE           reduce using rule 41 (statement -> loop .)
    START           reduce using rule 41 (statement -> loop .)
    RESET           reduce using rule 41 (statement -> loop .)
    END             reduce using rule 41 (statement -> loop .)
    GIRA_IZQ        reduce using rule 41 (statement -> loop .)
    GIRA_DER        reduce using rule 41 (statement -> loop .)
    CAMINA          reduce using rule 41 (statement -> loop .)
    SI_DIBUJA       reduce using rule 41 (statement -> loop .)
    NO_DIBUJA       reduce using rule 41 (statement -> loop .)
    DIBUJA_POLIGONO reduce using rule 41 (statement -> loop .)
    DIBUJA_CIRCULO  reduce using rule 41 (statement -> loop .)
    DIBUJA_ESTRELLA reduce using rule 41 (statement -> loop .)
    COLOR_PLUMA     reduce using rule 41 (statement -> loop .)
    RETURN          reduce using rule 41 (statement -> loop .)
    RBRACE          reduce using rule 41 (statement -> loop .)


state 52

    (42) statement -> method .

    VAR             reduce using rule 42 (statement -> method .)
    ID              reduce using rule 42 (statement -> method .)
    IF              reduce using rule 42 (statement -> method .)
    PRINT           reduce using rule 42 (statement -> method .)
    WHILE           reduce using rule 42 (statement -> method .)
    START           reduce using rule 42 (statement -> method .)
    RESET           reduce using rule 42 (statement -> method .)
    END             reduce using rule 42 (statement -> method .)
    GIRA_IZQ        reduce using rule 42 (statement -> method .)
    GIRA_DER        reduce using rule 42 (statement -> method .)
    CAMINA          reduce using rule 42 (statement -> method .)
    SI_DIBUJA       reduce using rule 42 (statement -> method .)
    NO_DIBUJA       reduce using rule 42 (statement -> method .)
    DIBUJA_POLIGONO reduce using rule 42 (statement -> method .)
    DIBUJA_CIRCULO  reduce using rule 42 (statement -> method .)
    DIBUJA_ESTRELLA reduce using rule 42 (statement -> method .)
    COLOR_PLUMA     reduce using rule 42 (statement -> method .)
    RETURN          reduce using rule 42 (statement -> method .)
    RBRACE          reduce using rule 42 (statement -> method .)


state 53

    (43) statement -> predefined_method .

    VAR             reduce using rule 43 (statement -> predefined_method .)
    ID              reduce using rule 43 (statement -> predefined_method .)
    IF              reduce using rule 43 (statement -> predefined_method .)
    PRINT           reduce using rule 43 (statement -> predefined_method .)
    WHILE           reduce using rule 43 (statement -> predefined_method .)
    START           reduce using rule 43 (statement -> predefined_method .)
    RESET           reduce using rule 43 (statement -> predefined_method .)
    END             reduce using rule 43 (statement -> predefined_method .)
    GIRA_IZQ        reduce using rule 43 (statement -> predefined_method .)
    GIRA_DER        reduce using rule 43 (statement -> predefined_method .)
    CAMINA          reduce using rule 43 (statement -> predefined_method .)
    SI_DIBUJA       reduce using rule 43 (statement -> predefined_method .)
    NO_DIBUJA       reduce using rule 43 (statement -> predefined_method .)
    DIBUJA_POLIGONO reduce using rule 43 (statement -> predefined_method .)
    DIBUJA_CIRCULO  reduce using rule 43 (statement -> predefined_method .)
    DIBUJA_ESTRELLA reduce using rule 43 (statement -> predefined_method .)
    COLOR_PLUMA     reduce using rule 43 (statement -> predefined_method .)
    RETURN          reduce using rule 43 (statement -> predefined_method .)
    RBRACE          reduce using rule 43 (statement -> predefined_method .)


state 54

    (44) statement -> return .

    VAR             reduce using rule 44 (statement -> return .)
    ID              reduce using rule 44 (statement -> return .)
    IF              reduce using rule 44 (statement -> return .)
    PRINT           reduce using rule 44 (statement -> return .)
    WHILE           reduce using rule 44 (statement -> return .)
    START           reduce using rule 44 (statement -> return .)
    RESET           reduce using rule 44 (statement -> return .)
    END             reduce using rule 44 (statement -> return .)
    GIRA_IZQ        reduce using rule 44 (statement -> return .)
    GIRA_DER        reduce using rule 44 (statement -> return .)
    CAMINA          reduce using rule 44 (statement -> return .)
    SI_DIBUJA       reduce using rule 44 (statement -> return .)
    NO_DIBUJA       reduce using rule 44 (statement -> return .)
    DIBUJA_POLIGONO reduce using rule 44 (statement -> return .)
    DIBUJA_CIRCULO  reduce using rule 44 (statement -> return .)
    DIBUJA_ESTRELLA reduce using rule 44 (statement -> return .)
    COLOR_PLUMA     reduce using rule 44 (statement -> return .)
    RETURN          reduce using rule 44 (statement -> return .)
    RBRACE          reduce using rule 44 (statement -> return .)


state 55

    (49) assignment -> ID . ASSIGN expression_log SEMICOLON
    (50) assignment -> ID . ASSIGN READ LPAREN expression_log RPAREN SEMICOLON
    (60) method -> ID . LPAREN args RPAREN SEMICOLON

    ASSIGN          shift and go to state 83
    LPAREN          shift and go to state 84


state 56

    (51) condition -> IF . LPAREN expression_log RPAREN condition_point block else condition_point2

    LPAREN          shift and go to state 85


state 57

    (56) write -> PRINT . LPAREN expression_log RPAREN SEMICOLON

    LPAREN          shift and go to state 86


state 58

    (57) loop -> WHILE . LPAREN expression_log RPAREN block

    LPAREN          shift and go to state 87


state 59

    (76) predefined_method -> START . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 88


state 60

    (77) predefined_method -> RESET . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 89


state 61

    (78) predefined_method -> END . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 90


state 62

    (79) predefined_method -> GIRA_IZQ . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 91


state 63

    (80) predefined_method -> GIRA_DER . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 92


state 64

    (81) predefined_method -> CAMINA . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 93


state 65

    (82) predefined_method -> SI_DIBUJA . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 94


state 66

    (83) predefined_method -> NO_DIBUJA . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 95


state 67

    (84) predefined_method -> DIBUJA_POLIGONO . LPAREN exp COMMA exp RPAREN SEMICOLON

    LPAREN          shift and go to state 96


state 68

    (85) predefined_method -> DIBUJA_CIRCULO . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 97


state 69

    (86) predefined_method -> DIBUJA_ESTRELLA . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 98


state 70

    (87) predefined_method -> COLOR_PLUMA . LPAREN string_var RPAREN SEMICOLON

    LPAREN          shift and go to state 99


state 71

    (26) return -> RETURN . expression_log SEMICOLON
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (5) not -> . NOT
    (6) not -> . empty
    (73) empty -> .

    NOT             shift and go to state 81
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)

    expression_log                 shift and go to state 100
    not                            shift and go to state 80
    empty                          shift and go to state 101

state 72

    (27) functions -> FUNC type_func ID LPAREN params . RPAREN block functions

    RPAREN          shift and go to state 102


state 73

    (29) params -> type . ID params_aux

    ID              shift and go to state 103


state 74

    (30) params -> empty .

    RPAREN          reduce using rule 30 (params -> empty .)


state 75

    (2) vars -> VAR ID COLON type SEMICOLON vars .

    FUNC            reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    MAIN            reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    ID              reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    IF              reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    PRINT           reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    WHILE           reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    START           reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    RESET           reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    END             reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    GIRA_IZQ        reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    GIRA_DER        reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    CAMINA          reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    SI_DIBUJA       reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    NO_DIBUJA       reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    DIBUJA_POLIGONO reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    DIBUJA_CIRCULO  reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    DIBUJA_ESTRELLA reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    COLOR_PLUMA     reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    RETURN          reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)
    RBRACE          reduce using rule 2 (vars -> VAR ID COLON type SEMICOLON vars .)


state 76

    (3) vars -> VAR ID list COLON type SEMICOLON . vars
    (2) vars -> . VAR ID COLON type SEMICOLON vars
    (3) vars -> . VAR ID list COLON type SEMICOLON vars
    (4) vars -> . empty
    (73) empty -> .

    VAR             shift and go to state 6
    FUNC            reduce using rule 73 (empty -> .)
    MAIN            reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    START           reduce using rule 73 (empty -> .)
    RESET           reduce using rule 73 (empty -> .)
    END             reduce using rule 73 (empty -> .)
    GIRA_IZQ        reduce using rule 73 (empty -> .)
    GIRA_DER        reduce using rule 73 (empty -> .)
    CAMINA          reduce using rule 73 (empty -> .)
    SI_DIBUJA       reduce using rule 73 (empty -> .)
    NO_DIBUJA       reduce using rule 73 (empty -> .)
    DIBUJA_POLIGONO reduce using rule 73 (empty -> .)
    DIBUJA_CIRCULO  reduce using rule 73 (empty -> .)
    DIBUJA_ESTRELLA reduce using rule 73 (empty -> .)
    COLOR_PLUMA     reduce using rule 73 (empty -> .)
    RETURN          reduce using rule 73 (empty -> .)
    RBRACE          reduce using rule 73 (empty -> .)

    vars                           shift and go to state 104
    empty                          shift and go to state 7

state 77

    (61) function -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 105


state 78

    (62) args -> expression_log . args_aux
    (64) args_aux -> . COMMA expression_log args_aux
    (65) args_aux -> . empty
    (73) empty -> .

    COMMA           shift and go to state 107
    RPAREN          reduce using rule 73 (empty -> .)

    args_aux                       shift and go to state 106
    empty                          shift and go to state 108

state 79

    (63) args -> empty .
    (6) not -> empty .

    RPAREN          reduce using rule 63 (args -> empty .)
    LPAREN          reduce using rule 6 (not -> empty .)
    ID              reduce using rule 6 (not -> empty .)
    CONST_INT       reduce using rule 6 (not -> empty .)
    CONST_FLOAT     reduce using rule 6 (not -> empty .)
    CONST_STRING    reduce using rule 6 (not -> empty .)
    TRUE            reduce using rule 6 (not -> empty .)
    FALSE           reduce using rule 6 (not -> empty .)


state 80

    (7) expression_log -> not . expression
    (8) expression_log -> not . expression AND expression_log
    (9) expression_log -> not . expression OR expression_log
    (10) expression -> . exp
    (11) expression -> . exp GREATER_THAN exp
    (12) expression -> . exp LESS_THAN exp
    (13) expression -> . exp GREATER_OR_EQUAL_THAN exp
    (14) expression -> . exp LESS_OR_EQUAL_THAN exp
    (15) expression -> . exp EQUAL_THAN exp
    (16) expression -> . exp NOT_EQUAL_THAN exp
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    expression                     shift and go to state 109
    exp                            shift and go to state 110
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 81

    (5) not -> NOT .

    LPAREN          reduce using rule 5 (not -> NOT .)
    ID              reduce using rule 5 (not -> NOT .)
    CONST_INT       reduce using rule 5 (not -> NOT .)
    CONST_FLOAT     reduce using rule 5 (not -> NOT .)
    CONST_STRING    reduce using rule 5 (not -> NOT .)
    TRUE            reduce using rule 5 (not -> NOT .)
    FALSE           reduce using rule 5 (not -> NOT .)


state 82

    (36) statements -> vars statement statements .

    RBRACE          reduce using rule 36 (statements -> vars statement statements .)


state 83

    (49) assignment -> ID ASSIGN . expression_log SEMICOLON
    (50) assignment -> ID ASSIGN . READ LPAREN expression_log RPAREN SEMICOLON
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (5) not -> . NOT
    (6) not -> . empty
    (73) empty -> .

    READ            shift and go to state 116
    NOT             shift and go to state 81
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)

    expression_log                 shift and go to state 115
    not                            shift and go to state 80
    empty                          shift and go to state 101

state 84

    (60) method -> ID LPAREN . args RPAREN SEMICOLON
    (62) args -> . expression_log args_aux
    (63) args -> . empty
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (73) empty -> .
    (5) not -> . NOT
    (6) not -> . empty

    RPAREN          reduce using rule 73 (empty -> .)
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)
    NOT             shift and go to state 81

    args                           shift and go to state 117
    expression_log                 shift and go to state 78
    empty                          shift and go to state 79
    not                            shift and go to state 80

state 85

    (51) condition -> IF LPAREN . expression_log RPAREN condition_point block else condition_point2
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (5) not -> . NOT
    (6) not -> . empty
    (73) empty -> .

    NOT             shift and go to state 81
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)

    expression_log                 shift and go to state 118
    not                            shift and go to state 80
    empty                          shift and go to state 101

state 86

    (56) write -> PRINT LPAREN . expression_log RPAREN SEMICOLON
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (5) not -> . NOT
    (6) not -> . empty
    (73) empty -> .

    NOT             shift and go to state 81
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)

    expression_log                 shift and go to state 119
    not                            shift and go to state 80
    empty                          shift and go to state 101

state 87

    (57) loop -> WHILE LPAREN . expression_log RPAREN block
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (5) not -> . NOT
    (6) not -> . empty
    (73) empty -> .

    NOT             shift and go to state 81
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)

    expression_log                 shift and go to state 120
    not                            shift and go to state 80
    empty                          shift and go to state 101

state 88

    (76) predefined_method -> START LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 121


state 89

    (77) predefined_method -> RESET LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 122


state 90

    (78) predefined_method -> END LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 123


state 91

    (79) predefined_method -> GIRA_IZQ LPAREN . exp RPAREN SEMICOLON
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 124
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 92

    (80) predefined_method -> GIRA_DER LPAREN . exp RPAREN SEMICOLON
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 125
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 93

    (81) predefined_method -> CAMINA LPAREN . exp RPAREN SEMICOLON
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 126
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 94

    (82) predefined_method -> SI_DIBUJA LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 127


state 95

    (83) predefined_method -> NO_DIBUJA LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 128


state 96

    (84) predefined_method -> DIBUJA_POLIGONO LPAREN . exp COMMA exp RPAREN SEMICOLON
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 129
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 97

    (85) predefined_method -> DIBUJA_CIRCULO LPAREN . exp RPAREN SEMICOLON
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 130
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 98

    (86) predefined_method -> DIBUJA_ESTRELLA LPAREN . exp RPAREN SEMICOLON
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 131
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 99

    (87) predefined_method -> COLOR_PLUMA LPAREN . string_var RPAREN SEMICOLON
    (74) string_var -> . ID
    (75) string_var -> . CONST_STRING

    ID              shift and go to state 133
    CONST_STRING    shift and go to state 134

    string_var                     shift and go to state 132

state 100

    (26) return -> RETURN expression_log . SEMICOLON

    SEMICOLON       shift and go to state 135


state 101

    (6) not -> empty .

    LPAREN          reduce using rule 6 (not -> empty .)
    ID              reduce using rule 6 (not -> empty .)
    CONST_INT       reduce using rule 6 (not -> empty .)
    CONST_FLOAT     reduce using rule 6 (not -> empty .)
    CONST_STRING    reduce using rule 6 (not -> empty .)
    TRUE            reduce using rule 6 (not -> empty .)
    FALSE           reduce using rule 6 (not -> empty .)


state 102

    (27) functions -> FUNC type_func ID LPAREN params RPAREN . block functions
    (35) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 136

state 103

    (29) params -> type ID . params_aux
    (31) params_aux -> . COMMA type ID params_aux
    (32) params_aux -> . empty
    (73) empty -> .

    COMMA           shift and go to state 138
    RPAREN          reduce using rule 73 (empty -> .)

    params_aux                     shift and go to state 137
    empty                          shift and go to state 139

state 104

    (3) vars -> VAR ID list COLON type SEMICOLON vars .

    FUNC            reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    MAIN            reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    ID              reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    IF              reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    PRINT           reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    WHILE           reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    START           reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    RESET           reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    END             reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    GIRA_IZQ        reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    GIRA_DER        reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    CAMINA          reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    SI_DIBUJA       reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    NO_DIBUJA       reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    DIBUJA_POLIGONO reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    DIBUJA_CIRCULO  reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    DIBUJA_ESTRELLA reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    COLOR_PLUMA     reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    RETURN          reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)
    RBRACE          reduce using rule 3 (vars -> VAR ID list COLON type SEMICOLON vars .)


state 105

    (61) function -> ID LPAREN args RPAREN .

    RBRACKET        reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    DIVIDES         reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    GREATER_THAN    reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    LESS_THAN       reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    GREATER_OR_EQUAL_THAN reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    LESS_OR_EQUAL_THAN reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    EQUAL_THAN      reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    AND             reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    OR              reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 61 (function -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 61 (function -> ID LPAREN args RPAREN .)


state 106

    (62) args -> expression_log args_aux .

    RPAREN          reduce using rule 62 (args -> expression_log args_aux .)


state 107

    (64) args_aux -> COMMA . expression_log args_aux
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (5) not -> . NOT
    (6) not -> . empty
    (73) empty -> .

    NOT             shift and go to state 81
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)

    expression_log                 shift and go to state 140
    not                            shift and go to state 80
    empty                          shift and go to state 101

state 108

    (65) args_aux -> empty .

    RPAREN          reduce using rule 65 (args_aux -> empty .)


state 109

    (7) expression_log -> not expression .
    (8) expression_log -> not expression . AND expression_log
    (9) expression_log -> not expression . OR expression_log

    COMMA           reduce using rule 7 (expression_log -> not expression .)
    RPAREN          reduce using rule 7 (expression_log -> not expression .)
    SEMICOLON       reduce using rule 7 (expression_log -> not expression .)
    AND             shift and go to state 141
    OR              shift and go to state 142


state 110

    (10) expression -> exp .
    (11) expression -> exp . GREATER_THAN exp
    (12) expression -> exp . LESS_THAN exp
    (13) expression -> exp . GREATER_OR_EQUAL_THAN exp
    (14) expression -> exp . LESS_OR_EQUAL_THAN exp
    (15) expression -> exp . EQUAL_THAN exp
    (16) expression -> exp . NOT_EQUAL_THAN exp

    AND             reduce using rule 10 (expression -> exp .)
    OR              reduce using rule 10 (expression -> exp .)
    COMMA           reduce using rule 10 (expression -> exp .)
    RPAREN          reduce using rule 10 (expression -> exp .)
    SEMICOLON       reduce using rule 10 (expression -> exp .)
    GREATER_THAN    shift and go to state 143
    LESS_THAN       shift and go to state 144
    GREATER_OR_EQUAL_THAN shift and go to state 145
    LESS_OR_EQUAL_THAN shift and go to state 146
    EQUAL_THAN      shift and go to state 147
    NOT_EQUAL_THAN  shift and go to state 148


state 111

    (17) exp -> term .
    (18) exp -> term . PLUS exp
    (19) exp -> term . MINUS exp

    GREATER_THAN    reduce using rule 17 (exp -> term .)
    LESS_THAN       reduce using rule 17 (exp -> term .)
    GREATER_OR_EQUAL_THAN reduce using rule 17 (exp -> term .)
    LESS_OR_EQUAL_THAN reduce using rule 17 (exp -> term .)
    EQUAL_THAN      reduce using rule 17 (exp -> term .)
    NOT_EQUAL_THAN  reduce using rule 17 (exp -> term .)
    AND             reduce using rule 17 (exp -> term .)
    OR              reduce using rule 17 (exp -> term .)
    COMMA           reduce using rule 17 (exp -> term .)
    RPAREN          reduce using rule 17 (exp -> term .)
    SEMICOLON       reduce using rule 17 (exp -> term .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150


state 112

    (20) term -> factor .
    (21) term -> factor . TIMES term
    (22) term -> factor . DIVIDES term

    PLUS            reduce using rule 20 (term -> factor .)
    MINUS           reduce using rule 20 (term -> factor .)
    GREATER_THAN    reduce using rule 20 (term -> factor .)
    LESS_THAN       reduce using rule 20 (term -> factor .)
    GREATER_OR_EQUAL_THAN reduce using rule 20 (term -> factor .)
    LESS_OR_EQUAL_THAN reduce using rule 20 (term -> factor .)
    EQUAL_THAN      reduce using rule 20 (term -> factor .)
    NOT_EQUAL_THAN  reduce using rule 20 (term -> factor .)
    AND             reduce using rule 20 (term -> factor .)
    OR              reduce using rule 20 (term -> factor .)
    COMMA           reduce using rule 20 (term -> factor .)
    RPAREN          reduce using rule 20 (term -> factor .)
    SEMICOLON       reduce using rule 20 (term -> factor .)
    TIMES           shift and go to state 151
    DIVIDES         shift and go to state 152


state 113

    (23) factor -> LPAREN . expression_log RPAREN
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (5) not -> . NOT
    (6) not -> . empty
    (73) empty -> .

    NOT             shift and go to state 81
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)

    expression_log                 shift and go to state 153
    not                            shift and go to state 80
    empty                          shift and go to state 101

state 114

    (24) factor -> var_const .

    TIMES           reduce using rule 24 (factor -> var_const .)
    DIVIDES         reduce using rule 24 (factor -> var_const .)
    PLUS            reduce using rule 24 (factor -> var_const .)
    MINUS           reduce using rule 24 (factor -> var_const .)
    GREATER_THAN    reduce using rule 24 (factor -> var_const .)
    LESS_THAN       reduce using rule 24 (factor -> var_const .)
    GREATER_OR_EQUAL_THAN reduce using rule 24 (factor -> var_const .)
    LESS_OR_EQUAL_THAN reduce using rule 24 (factor -> var_const .)
    EQUAL_THAN      reduce using rule 24 (factor -> var_const .)
    NOT_EQUAL_THAN  reduce using rule 24 (factor -> var_const .)
    AND             reduce using rule 24 (factor -> var_const .)
    OR              reduce using rule 24 (factor -> var_const .)
    COMMA           reduce using rule 24 (factor -> var_const .)
    RPAREN          reduce using rule 24 (factor -> var_const .)
    SEMICOLON       reduce using rule 24 (factor -> var_const .)


state 115

    (49) assignment -> ID ASSIGN expression_log . SEMICOLON

    SEMICOLON       shift and go to state 154


state 116

    (50) assignment -> ID ASSIGN READ . LPAREN expression_log RPAREN SEMICOLON

    LPAREN          shift and go to state 155


state 117

    (60) method -> ID LPAREN args . RPAREN SEMICOLON

    RPAREN          shift and go to state 156


state 118

    (51) condition -> IF LPAREN expression_log . RPAREN condition_point block else condition_point2

    RPAREN          shift and go to state 157


state 119

    (56) write -> PRINT LPAREN expression_log . RPAREN SEMICOLON

    RPAREN          shift and go to state 158


state 120

    (57) loop -> WHILE LPAREN expression_log . RPAREN block

    RPAREN          shift and go to state 159


state 121

    (76) predefined_method -> START LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 160


state 122

    (77) predefined_method -> RESET LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 161


state 123

    (78) predefined_method -> END LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 162


state 124

    (79) predefined_method -> GIRA_IZQ LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 163


state 125

    (80) predefined_method -> GIRA_DER LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 164


state 126

    (81) predefined_method -> CAMINA LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 165


state 127

    (82) predefined_method -> SI_DIBUJA LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 166


state 128

    (83) predefined_method -> NO_DIBUJA LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 167


state 129

    (84) predefined_method -> DIBUJA_POLIGONO LPAREN exp . COMMA exp RPAREN SEMICOLON

    COMMA           shift and go to state 168


state 130

    (85) predefined_method -> DIBUJA_CIRCULO LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 169


state 131

    (86) predefined_method -> DIBUJA_ESTRELLA LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 170


state 132

    (87) predefined_method -> COLOR_PLUMA LPAREN string_var . RPAREN SEMICOLON

    RPAREN          shift and go to state 171


state 133

    (74) string_var -> ID .

    RPAREN          reduce using rule 74 (string_var -> ID .)


state 134

    (75) string_var -> CONST_STRING .

    RPAREN          reduce using rule 75 (string_var -> CONST_STRING .)


state 135

    (26) return -> RETURN expression_log SEMICOLON .

    VAR             reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    ID              reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    IF              reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    PRINT           reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    WHILE           reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    START           reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    RESET           reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    END             reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    GIRA_IZQ        reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    GIRA_DER        reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    CAMINA          reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    SI_DIBUJA       reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    NO_DIBUJA       reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    COLOR_PLUMA     reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    RETURN          reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)
    RBRACE          reduce using rule 26 (return -> RETURN expression_log SEMICOLON .)


state 136

    (27) functions -> FUNC type_func ID LPAREN params RPAREN block . functions
    (27) functions -> . FUNC type_func ID LPAREN params RPAREN block functions
    (28) functions -> . empty
    (73) empty -> .

    FUNC            shift and go to state 9
    MAIN            reduce using rule 73 (empty -> .)

    functions                      shift and go to state 172
    empty                          shift and go to state 10

state 137

    (29) params -> type ID params_aux .

    RPAREN          reduce using rule 29 (params -> type ID params_aux .)


state 138

    (31) params_aux -> COMMA . type ID params_aux
    (45) type -> . INT
    (46) type -> . FLOAT
    (47) type -> . STRING
    (48) type -> . BOOLEAN

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19

    type                           shift and go to state 173

state 139

    (32) params_aux -> empty .

    RPAREN          reduce using rule 32 (params_aux -> empty .)


state 140

    (64) args_aux -> COMMA expression_log . args_aux
    (64) args_aux -> . COMMA expression_log args_aux
    (65) args_aux -> . empty
    (73) empty -> .

    COMMA           shift and go to state 107
    RPAREN          reduce using rule 73 (empty -> .)

    args_aux                       shift and go to state 174
    empty                          shift and go to state 108

state 141

    (8) expression_log -> not expression AND . expression_log
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (5) not -> . NOT
    (6) not -> . empty
    (73) empty -> .

    NOT             shift and go to state 81
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)

    not                            shift and go to state 80
    expression_log                 shift and go to state 175
    empty                          shift and go to state 101

state 142

    (9) expression_log -> not expression OR . expression_log
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (5) not -> . NOT
    (6) not -> . empty
    (73) empty -> .

    NOT             shift and go to state 81
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)

    not                            shift and go to state 80
    expression_log                 shift and go to state 176
    empty                          shift and go to state 101

state 143

    (11) expression -> exp GREATER_THAN . exp
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 177
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 144

    (12) expression -> exp LESS_THAN . exp
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 178
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 145

    (13) expression -> exp GREATER_OR_EQUAL_THAN . exp
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 179
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 146

    (14) expression -> exp LESS_OR_EQUAL_THAN . exp
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 180
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 147

    (15) expression -> exp EQUAL_THAN . exp
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 181
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 148

    (16) expression -> exp NOT_EQUAL_THAN . exp
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 182
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 149

    (18) exp -> term PLUS . exp
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    term                           shift and go to state 111
    exp                            shift and go to state 183
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 150

    (19) exp -> term MINUS . exp
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    term                           shift and go to state 111
    exp                            shift and go to state 184
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 151

    (21) term -> factor TIMES . term
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    factor                         shift and go to state 112
    term                           shift and go to state 185
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 152

    (22) term -> factor DIVIDES . term
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    factor                         shift and go to state 112
    term                           shift and go to state 186
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 153

    (23) factor -> LPAREN expression_log . RPAREN

    RPAREN          shift and go to state 187


state 154

    (49) assignment -> ID ASSIGN expression_log SEMICOLON .

    VAR             reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    ID              reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    IF              reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    PRINT           reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    WHILE           reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    START           reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    RESET           reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    END             reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    GIRA_IZQ        reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    GIRA_DER        reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    CAMINA          reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    SI_DIBUJA       reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    NO_DIBUJA       reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    COLOR_PLUMA     reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    RETURN          reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)
    RBRACE          reduce using rule 49 (assignment -> ID ASSIGN expression_log SEMICOLON .)


state 155

    (50) assignment -> ID ASSIGN READ LPAREN . expression_log RPAREN SEMICOLON
    (7) expression_log -> . not expression
    (8) expression_log -> . not expression AND expression_log
    (9) expression_log -> . not expression OR expression_log
    (5) not -> . NOT
    (6) not -> . empty
    (73) empty -> .

    NOT             shift and go to state 81
    LPAREN          reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    CONST_INT       reduce using rule 73 (empty -> .)
    CONST_FLOAT     reduce using rule 73 (empty -> .)
    CONST_STRING    reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)

    expression_log                 shift and go to state 188
    not                            shift and go to state 80
    empty                          shift and go to state 101

state 156

    (60) method -> ID LPAREN args RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 189


state 157

    (51) condition -> IF LPAREN expression_log RPAREN . condition_point block else condition_point2
    (52) condition_point -> .

    LBRACE          reduce using rule 52 (condition_point -> .)

    condition_point                shift and go to state 190

state 158

    (56) write -> PRINT LPAREN expression_log RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 191


state 159

    (57) loop -> WHILE LPAREN expression_log RPAREN . block
    (35) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 192

state 160

    (76) predefined_method -> START LPAREN RPAREN SEMICOLON .

    VAR             reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    START           reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    RESET           reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    CAMINA          reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 76 (predefined_method -> START LPAREN RPAREN SEMICOLON .)


state 161

    (77) predefined_method -> RESET LPAREN RPAREN SEMICOLON .

    VAR             reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    START           reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    RESET           reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    CAMINA          reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 77 (predefined_method -> RESET LPAREN RPAREN SEMICOLON .)


state 162

    (78) predefined_method -> END LPAREN RPAREN SEMICOLON .

    VAR             reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    START           reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    RESET           reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    CAMINA          reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 78 (predefined_method -> END LPAREN RPAREN SEMICOLON .)


state 163

    (79) predefined_method -> GIRA_IZQ LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 193


state 164

    (80) predefined_method -> GIRA_DER LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 194


state 165

    (81) predefined_method -> CAMINA LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 195


state 166

    (82) predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .

    VAR             reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    START           reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    RESET           reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    CAMINA          reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 82 (predefined_method -> SI_DIBUJA LPAREN RPAREN SEMICOLON .)


state 167

    (83) predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .

    VAR             reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    START           reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    RESET           reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    END             reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    CAMINA          reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 83 (predefined_method -> NO_DIBUJA LPAREN RPAREN SEMICOLON .)


state 168

    (84) predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA . exp RPAREN SEMICOLON
    (17) exp -> . term
    (18) exp -> . term PLUS exp
    (19) exp -> . term MINUS exp
    (20) term -> . factor
    (21) term -> . factor TIMES term
    (22) term -> . factor DIVIDES term
    (23) factor -> . LPAREN expression_log RPAREN
    (24) factor -> . var_const
    (66) var_const -> . ID
    (67) var_const -> . ID list
    (68) var_const -> . CONST_INT
    (69) var_const -> . CONST_FLOAT
    (70) var_const -> . CONST_STRING
    (71) var_const -> . boolean
    (72) var_const -> . function
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (61) function -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 113
    ID              shift and go to state 29
    CONST_INT       shift and go to state 30
    CONST_FLOAT     shift and go to state 31
    CONST_STRING    shift and go to state 32
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 196
    term                           shift and go to state 111
    factor                         shift and go to state 112
    var_const                      shift and go to state 114
    boolean                        shift and go to state 33
    function                       shift and go to state 34

state 169

    (85) predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 197


state 170

    (86) predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 198


state 171

    (87) predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 199


state 172

    (27) functions -> FUNC type_func ID LPAREN params RPAREN block functions .

    MAIN            reduce using rule 27 (functions -> FUNC type_func ID LPAREN params RPAREN block functions .)


state 173

    (31) params_aux -> COMMA type . ID params_aux

    ID              shift and go to state 200


state 174

    (64) args_aux -> COMMA expression_log args_aux .

    RPAREN          reduce using rule 64 (args_aux -> COMMA expression_log args_aux .)


state 175

    (8) expression_log -> not expression AND expression_log .

    COMMA           reduce using rule 8 (expression_log -> not expression AND expression_log .)
    RPAREN          reduce using rule 8 (expression_log -> not expression AND expression_log .)
    SEMICOLON       reduce using rule 8 (expression_log -> not expression AND expression_log .)


state 176

    (9) expression_log -> not expression OR expression_log .

    COMMA           reduce using rule 9 (expression_log -> not expression OR expression_log .)
    RPAREN          reduce using rule 9 (expression_log -> not expression OR expression_log .)
    SEMICOLON       reduce using rule 9 (expression_log -> not expression OR expression_log .)


state 177

    (11) expression -> exp GREATER_THAN exp .

    AND             reduce using rule 11 (expression -> exp GREATER_THAN exp .)
    OR              reduce using rule 11 (expression -> exp GREATER_THAN exp .)
    COMMA           reduce using rule 11 (expression -> exp GREATER_THAN exp .)
    RPAREN          reduce using rule 11 (expression -> exp GREATER_THAN exp .)
    SEMICOLON       reduce using rule 11 (expression -> exp GREATER_THAN exp .)


state 178

    (12) expression -> exp LESS_THAN exp .

    AND             reduce using rule 12 (expression -> exp LESS_THAN exp .)
    OR              reduce using rule 12 (expression -> exp LESS_THAN exp .)
    COMMA           reduce using rule 12 (expression -> exp LESS_THAN exp .)
    RPAREN          reduce using rule 12 (expression -> exp LESS_THAN exp .)
    SEMICOLON       reduce using rule 12 (expression -> exp LESS_THAN exp .)


state 179

    (13) expression -> exp GREATER_OR_EQUAL_THAN exp .

    AND             reduce using rule 13 (expression -> exp GREATER_OR_EQUAL_THAN exp .)
    OR              reduce using rule 13 (expression -> exp GREATER_OR_EQUAL_THAN exp .)
    COMMA           reduce using rule 13 (expression -> exp GREATER_OR_EQUAL_THAN exp .)
    RPAREN          reduce using rule 13 (expression -> exp GREATER_OR_EQUAL_THAN exp .)
    SEMICOLON       reduce using rule 13 (expression -> exp GREATER_OR_EQUAL_THAN exp .)


state 180

    (14) expression -> exp LESS_OR_EQUAL_THAN exp .

    AND             reduce using rule 14 (expression -> exp LESS_OR_EQUAL_THAN exp .)
    OR              reduce using rule 14 (expression -> exp LESS_OR_EQUAL_THAN exp .)
    COMMA           reduce using rule 14 (expression -> exp LESS_OR_EQUAL_THAN exp .)
    RPAREN          reduce using rule 14 (expression -> exp LESS_OR_EQUAL_THAN exp .)
    SEMICOLON       reduce using rule 14 (expression -> exp LESS_OR_EQUAL_THAN exp .)


state 181

    (15) expression -> exp EQUAL_THAN exp .

    AND             reduce using rule 15 (expression -> exp EQUAL_THAN exp .)
    OR              reduce using rule 15 (expression -> exp EQUAL_THAN exp .)
    COMMA           reduce using rule 15 (expression -> exp EQUAL_THAN exp .)
    RPAREN          reduce using rule 15 (expression -> exp EQUAL_THAN exp .)
    SEMICOLON       reduce using rule 15 (expression -> exp EQUAL_THAN exp .)


state 182

    (16) expression -> exp NOT_EQUAL_THAN exp .

    AND             reduce using rule 16 (expression -> exp NOT_EQUAL_THAN exp .)
    OR              reduce using rule 16 (expression -> exp NOT_EQUAL_THAN exp .)
    COMMA           reduce using rule 16 (expression -> exp NOT_EQUAL_THAN exp .)
    RPAREN          reduce using rule 16 (expression -> exp NOT_EQUAL_THAN exp .)
    SEMICOLON       reduce using rule 16 (expression -> exp NOT_EQUAL_THAN exp .)


state 183

    (18) exp -> term PLUS exp .

    GREATER_THAN    reduce using rule 18 (exp -> term PLUS exp .)
    LESS_THAN       reduce using rule 18 (exp -> term PLUS exp .)
    GREATER_OR_EQUAL_THAN reduce using rule 18 (exp -> term PLUS exp .)
    LESS_OR_EQUAL_THAN reduce using rule 18 (exp -> term PLUS exp .)
    EQUAL_THAN      reduce using rule 18 (exp -> term PLUS exp .)
    NOT_EQUAL_THAN  reduce using rule 18 (exp -> term PLUS exp .)
    AND             reduce using rule 18 (exp -> term PLUS exp .)
    OR              reduce using rule 18 (exp -> term PLUS exp .)
    COMMA           reduce using rule 18 (exp -> term PLUS exp .)
    RPAREN          reduce using rule 18 (exp -> term PLUS exp .)
    SEMICOLON       reduce using rule 18 (exp -> term PLUS exp .)


state 184

    (19) exp -> term MINUS exp .

    GREATER_THAN    reduce using rule 19 (exp -> term MINUS exp .)
    LESS_THAN       reduce using rule 19 (exp -> term MINUS exp .)
    GREATER_OR_EQUAL_THAN reduce using rule 19 (exp -> term MINUS exp .)
    LESS_OR_EQUAL_THAN reduce using rule 19 (exp -> term MINUS exp .)
    EQUAL_THAN      reduce using rule 19 (exp -> term MINUS exp .)
    NOT_EQUAL_THAN  reduce using rule 19 (exp -> term MINUS exp .)
    AND             reduce using rule 19 (exp -> term MINUS exp .)
    OR              reduce using rule 19 (exp -> term MINUS exp .)
    COMMA           reduce using rule 19 (exp -> term MINUS exp .)
    RPAREN          reduce using rule 19 (exp -> term MINUS exp .)
    SEMICOLON       reduce using rule 19 (exp -> term MINUS exp .)


state 185

    (21) term -> factor TIMES term .

    PLUS            reduce using rule 21 (term -> factor TIMES term .)
    MINUS           reduce using rule 21 (term -> factor TIMES term .)
    GREATER_THAN    reduce using rule 21 (term -> factor TIMES term .)
    LESS_THAN       reduce using rule 21 (term -> factor TIMES term .)
    GREATER_OR_EQUAL_THAN reduce using rule 21 (term -> factor TIMES term .)
    LESS_OR_EQUAL_THAN reduce using rule 21 (term -> factor TIMES term .)
    EQUAL_THAN      reduce using rule 21 (term -> factor TIMES term .)
    NOT_EQUAL_THAN  reduce using rule 21 (term -> factor TIMES term .)
    AND             reduce using rule 21 (term -> factor TIMES term .)
    OR              reduce using rule 21 (term -> factor TIMES term .)
    COMMA           reduce using rule 21 (term -> factor TIMES term .)
    RPAREN          reduce using rule 21 (term -> factor TIMES term .)
    SEMICOLON       reduce using rule 21 (term -> factor TIMES term .)


state 186

    (22) term -> factor DIVIDES term .

    PLUS            reduce using rule 22 (term -> factor DIVIDES term .)
    MINUS           reduce using rule 22 (term -> factor DIVIDES term .)
    GREATER_THAN    reduce using rule 22 (term -> factor DIVIDES term .)
    LESS_THAN       reduce using rule 22 (term -> factor DIVIDES term .)
    GREATER_OR_EQUAL_THAN reduce using rule 22 (term -> factor DIVIDES term .)
    LESS_OR_EQUAL_THAN reduce using rule 22 (term -> factor DIVIDES term .)
    EQUAL_THAN      reduce using rule 22 (term -> factor DIVIDES term .)
    NOT_EQUAL_THAN  reduce using rule 22 (term -> factor DIVIDES term .)
    AND             reduce using rule 22 (term -> factor DIVIDES term .)
    OR              reduce using rule 22 (term -> factor DIVIDES term .)
    COMMA           reduce using rule 22 (term -> factor DIVIDES term .)
    RPAREN          reduce using rule 22 (term -> factor DIVIDES term .)
    SEMICOLON       reduce using rule 22 (term -> factor DIVIDES term .)


state 187

    (23) factor -> LPAREN expression_log RPAREN .

    TIMES           reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    DIVIDES         reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    PLUS            reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    MINUS           reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    GREATER_THAN    reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    LESS_THAN       reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    GREATER_OR_EQUAL_THAN reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    LESS_OR_EQUAL_THAN reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    EQUAL_THAN      reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    AND             reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    OR              reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    COMMA           reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    RPAREN          reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)
    SEMICOLON       reduce using rule 23 (factor -> LPAREN expression_log RPAREN .)


state 188

    (50) assignment -> ID ASSIGN READ LPAREN expression_log . RPAREN SEMICOLON

    RPAREN          shift and go to state 201


state 189

    (60) method -> ID LPAREN args RPAREN SEMICOLON .

    VAR             reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    ID              reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    IF              reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    PRINT           reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    WHILE           reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    START           reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    RESET           reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    END             reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    CAMINA          reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    RETURN          reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)
    RBRACE          reduce using rule 60 (method -> ID LPAREN args RPAREN SEMICOLON .)


state 190

    (51) condition -> IF LPAREN expression_log RPAREN condition_point . block else condition_point2
    (35) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 202

state 191

    (56) write -> PRINT LPAREN expression_log RPAREN SEMICOLON .

    VAR             reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    ID              reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    IF              reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    PRINT           reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    WHILE           reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    START           reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    RESET           reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    END             reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    CAMINA          reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    RETURN          reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)
    RBRACE          reduce using rule 56 (write -> PRINT LPAREN expression_log RPAREN SEMICOLON .)


state 192

    (57) loop -> WHILE LPAREN expression_log RPAREN block .

    VAR             reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    ID              reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    IF              reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    PRINT           reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    WHILE           reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    START           reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    RESET           reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    END             reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    GIRA_IZQ        reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    GIRA_DER        reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    CAMINA          reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    SI_DIBUJA       reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    NO_DIBUJA       reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    DIBUJA_POLIGONO reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    DIBUJA_CIRCULO  reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    DIBUJA_ESTRELLA reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    COLOR_PLUMA     reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    RETURN          reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)
    RBRACE          reduce using rule 57 (loop -> WHILE LPAREN expression_log RPAREN block .)


state 193

    (79) predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .

    VAR             reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    START           reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    RESET           reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    END             reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 79 (predefined_method -> GIRA_IZQ LPAREN exp RPAREN SEMICOLON .)


state 194

    (80) predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .

    VAR             reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    START           reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    RESET           reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    END             reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 80 (predefined_method -> GIRA_DER LPAREN exp RPAREN SEMICOLON .)


state 195

    (81) predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .

    VAR             reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    START           reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    RESET           reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    END             reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 81 (predefined_method -> CAMINA LPAREN exp RPAREN SEMICOLON .)


state 196

    (84) predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 203


state 197

    (85) predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .

    VAR             reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    START           reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    RESET           reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    END             reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 85 (predefined_method -> DIBUJA_CIRCULO LPAREN exp RPAREN SEMICOLON .)


state 198

    (86) predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .

    VAR             reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    START           reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    RESET           reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    END             reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 86 (predefined_method -> DIBUJA_ESTRELLA LPAREN exp RPAREN SEMICOLON .)


state 199

    (87) predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .

    VAR             reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    ID              reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    IF              reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    PRINT           reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    WHILE           reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    START           reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    RESET           reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    END             reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    CAMINA          reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    RETURN          reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)
    RBRACE          reduce using rule 87 (predefined_method -> COLOR_PLUMA LPAREN string_var RPAREN SEMICOLON .)


state 200

    (31) params_aux -> COMMA type ID . params_aux
    (31) params_aux -> . COMMA type ID params_aux
    (32) params_aux -> . empty
    (73) empty -> .

    COMMA           shift and go to state 138
    RPAREN          reduce using rule 73 (empty -> .)

    params_aux                     shift and go to state 204
    empty                          shift and go to state 139

state 201

    (50) assignment -> ID ASSIGN READ LPAREN expression_log RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 205


state 202

    (51) condition -> IF LPAREN expression_log RPAREN condition_point block . else condition_point2
    (53) else -> . ELSE block
    (54) else -> . empty
    (73) empty -> .

    ELSE            shift and go to state 207
    VAR             reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    START           reduce using rule 73 (empty -> .)
    RESET           reduce using rule 73 (empty -> .)
    END             reduce using rule 73 (empty -> .)
    GIRA_IZQ        reduce using rule 73 (empty -> .)
    GIRA_DER        reduce using rule 73 (empty -> .)
    CAMINA          reduce using rule 73 (empty -> .)
    SI_DIBUJA       reduce using rule 73 (empty -> .)
    NO_DIBUJA       reduce using rule 73 (empty -> .)
    DIBUJA_POLIGONO reduce using rule 73 (empty -> .)
    DIBUJA_CIRCULO  reduce using rule 73 (empty -> .)
    DIBUJA_ESTRELLA reduce using rule 73 (empty -> .)
    COLOR_PLUMA     reduce using rule 73 (empty -> .)
    RETURN          reduce using rule 73 (empty -> .)
    RBRACE          reduce using rule 73 (empty -> .)

    else                           shift and go to state 206
    empty                          shift and go to state 208

state 203

    (84) predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 209


state 204

    (31) params_aux -> COMMA type ID params_aux .

    RPAREN          reduce using rule 31 (params_aux -> COMMA type ID params_aux .)


state 205

    (50) assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .

    VAR             reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    ID              reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    IF              reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    PRINT           reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    WHILE           reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    START           reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    RESET           reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    END             reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    CAMINA          reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    RETURN          reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)
    RBRACE          reduce using rule 50 (assignment -> ID ASSIGN READ LPAREN expression_log RPAREN SEMICOLON .)


state 206

    (51) condition -> IF LPAREN expression_log RPAREN condition_point block else . condition_point2
    (55) condition_point2 -> .

    VAR             reduce using rule 55 (condition_point2 -> .)
    ID              reduce using rule 55 (condition_point2 -> .)
    IF              reduce using rule 55 (condition_point2 -> .)
    PRINT           reduce using rule 55 (condition_point2 -> .)
    WHILE           reduce using rule 55 (condition_point2 -> .)
    START           reduce using rule 55 (condition_point2 -> .)
    RESET           reduce using rule 55 (condition_point2 -> .)
    END             reduce using rule 55 (condition_point2 -> .)
    GIRA_IZQ        reduce using rule 55 (condition_point2 -> .)
    GIRA_DER        reduce using rule 55 (condition_point2 -> .)
    CAMINA          reduce using rule 55 (condition_point2 -> .)
    SI_DIBUJA       reduce using rule 55 (condition_point2 -> .)
    NO_DIBUJA       reduce using rule 55 (condition_point2 -> .)
    DIBUJA_POLIGONO reduce using rule 55 (condition_point2 -> .)
    DIBUJA_CIRCULO  reduce using rule 55 (condition_point2 -> .)
    DIBUJA_ESTRELLA reduce using rule 55 (condition_point2 -> .)
    COLOR_PLUMA     reduce using rule 55 (condition_point2 -> .)
    RETURN          reduce using rule 55 (condition_point2 -> .)
    RBRACE          reduce using rule 55 (condition_point2 -> .)

    condition_point2               shift and go to state 210

state 207

    (53) else -> ELSE . block
    (35) block -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 24

    block                          shift and go to state 211

state 208

    (54) else -> empty .

    VAR             reduce using rule 54 (else -> empty .)
    ID              reduce using rule 54 (else -> empty .)
    IF              reduce using rule 54 (else -> empty .)
    PRINT           reduce using rule 54 (else -> empty .)
    WHILE           reduce using rule 54 (else -> empty .)
    START           reduce using rule 54 (else -> empty .)
    RESET           reduce using rule 54 (else -> empty .)
    END             reduce using rule 54 (else -> empty .)
    GIRA_IZQ        reduce using rule 54 (else -> empty .)
    GIRA_DER        reduce using rule 54 (else -> empty .)
    CAMINA          reduce using rule 54 (else -> empty .)
    SI_DIBUJA       reduce using rule 54 (else -> empty .)
    NO_DIBUJA       reduce using rule 54 (else -> empty .)
    DIBUJA_POLIGONO reduce using rule 54 (else -> empty .)
    DIBUJA_CIRCULO  reduce using rule 54 (else -> empty .)
    DIBUJA_ESTRELLA reduce using rule 54 (else -> empty .)
    COLOR_PLUMA     reduce using rule 54 (else -> empty .)
    RETURN          reduce using rule 54 (else -> empty .)
    RBRACE          reduce using rule 54 (else -> empty .)


state 209

    (84) predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .

    VAR             reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    ID              reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    IF              reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PRINT           reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    START           reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RESET           reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    END             reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    GIRA_IZQ        reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    GIRA_DER        reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    CAMINA          reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    SI_DIBUJA       reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    NO_DIBUJA       reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    DIBUJA_POLIGONO reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    DIBUJA_CIRCULO  reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    DIBUJA_ESTRELLA reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    COLOR_PLUMA     reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 84 (predefined_method -> DIBUJA_POLIGONO LPAREN exp COMMA exp RPAREN SEMICOLON .)


state 210

    (51) condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .

    VAR             reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    ID              reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    IF              reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    PRINT           reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    WHILE           reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    START           reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    RESET           reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    END             reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    GIRA_IZQ        reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    GIRA_DER        reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    CAMINA          reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    SI_DIBUJA       reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    NO_DIBUJA       reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    DIBUJA_POLIGONO reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    DIBUJA_CIRCULO  reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    DIBUJA_ESTRELLA reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    COLOR_PLUMA     reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    RETURN          reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)
    RBRACE          reduce using rule 51 (condition -> IF LPAREN expression_log RPAREN condition_point block else condition_point2 .)


state 211

    (53) else -> ELSE block .

    VAR             reduce using rule 53 (else -> ELSE block .)
    ID              reduce using rule 53 (else -> ELSE block .)
    IF              reduce using rule 53 (else -> ELSE block .)
    PRINT           reduce using rule 53 (else -> ELSE block .)
    WHILE           reduce using rule 53 (else -> ELSE block .)
    START           reduce using rule 53 (else -> ELSE block .)
    RESET           reduce using rule 53 (else -> ELSE block .)
    END             reduce using rule 53 (else -> ELSE block .)
    GIRA_IZQ        reduce using rule 53 (else -> ELSE block .)
    GIRA_DER        reduce using rule 53 (else -> ELSE block .)
    CAMINA          reduce using rule 53 (else -> ELSE block .)
    SI_DIBUJA       reduce using rule 53 (else -> ELSE block .)
    NO_DIBUJA       reduce using rule 53 (else -> ELSE block .)
    DIBUJA_POLIGONO reduce using rule 53 (else -> ELSE block .)
    DIBUJA_CIRCULO  reduce using rule 53 (else -> ELSE block .)
    DIBUJA_ESTRELLA reduce using rule 53 (else -> ELSE block .)
    COLOR_PLUMA     reduce using rule 53 (else -> ELSE block .)
    RETURN          reduce using rule 53 (else -> ELSE block .)
    RBRACE          reduce using rule 53 (else -> ELSE block .)

